{"version":3,"sources":["Example/Operation.ts","Example/Example.ts","Random.ts","Example/ExampleGenerator.ts","Profile/Profile.ts","Profile/ProfileProvider.ts","Task/Task.ts","Task/TaskProvider.ts","container.ts","Example/Solve.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Operation","Example","first","operation","second","answer","this","signs","Add","Sub","Mult","Div","solved","random","min","max","Math","floor","ExampleGenerator","task","previousExample","lastExample","hasAnswer","newExample","isRight","addExample","Profile","name","examplesCount","ProfileProvider","Task","profile","examples","example","push","solvedExamplesCount","filter","length","TaskProvider","profileProvider","currentTask","getCurrentProfile","exampleGenerator","taskProvider","Solve","state","generate","getCurrentOrNewTask","onSubmit","submitHandler","bind","rightExamplesCount","string","type","value","onChange","changeHandler","wrongExamplesCount","role","to","event","setState","target","preventDefault","isFinished","cleanCurrentTask","React","Component","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1222f2bc.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import {Operation} from \"./Operation\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isRight(): boolean {\n        return this.answer === this.solved\n    }\n\n    private get solved(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import {Example} from \"./Example\";\nimport {random} from \"../Random\";\nimport {Operation} from \"./Operation\";\nimport {Task} from \"../Task/Task\";\n\nexport class ExampleGenerator {\n    public generate(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = new Example(\n            random(1, 10),\n            random(Operation.Add, Operation.Sub),\n            random(1, 10),\n        )\n\n        if (null !== previousExample && !previousExample?.isRight) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.addExample(newExample)\n\n        return newExample\n    }\n}\n","export class Profile {\n    public constructor(\n        public readonly name: string,\n    public readonly examplesCount: number,\n    ) {\n    }\n}\n","import {Profile} from \"./Profile\";\n\nexport class ProfileProvider {\n    public getCurrentProfile(): Profile {\nreturn new Profile(\n    'Default profile',\n    3\n)\n    }\n}\n","import {Profile} from \"../Profile/Profile\"\nimport {Example} from \"../Example/Example\";\n\nexport class Task {\n    private readonly examples: Example[] = []\n\n    public constructor(\n        public readonly profile: Profile\n    ) {\n    }\n\n    public addExample(example: Example): void {\n        this.examples.push(example)\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isRight)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.isRight)\n            .length\n    }\n\n    public get isFinished(): boolean {\n        return this.solvedExamplesCount === this.profile.examplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {ProfileProvider} from \"../Profile/ProfileProvider\";\nimport {Task} from \"./Task\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly profileProvider: ProfileProvider) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.profileProvider.getCurrentProfile()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","import {ExampleGenerator} from \"./Example/ExampleGenerator\";\nimport {ProfileProvider} from \"./Profile/ProfileProvider\";\nimport {TaskProvider} from \"./Task/TaskProvider\";\n\nexport const exampleGenerator = new ExampleGenerator()\nexport const taskProvider = new TaskProvider(new ProfileProvider())\n","import {Example} from \"./Example\";\nimport React from \"react\";\nimport {exampleGenerator, taskProvider} from \"../container\";\nimport {Link} from \"react-router-dom\";\n\ninterface SolveState {\n    example: Example\n    answer: string\n}\n\nexport class Solve extends React.Component<{}, SolveState> {\n    public readonly state: SolveState = {\n        example: exampleGenerator.generate(taskProvider.getCurrentOrNewTask()),\n        answer: '',\n    }\n\n    public render() {\n        const currentTask = taskProvider.getCurrentOrNewTask()\n\n        return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Example #{currentTask.rightExamplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Answer</button>\n                </form>\n                <ul>\n                    <li>Errors count: {currentTask.wrongExamplesCount}</li>\n                    <li>\n                        <div>Profile: {currentTask.profile.name}</div>\n                        <div>\n                            <Link role=\"button\" to=\"/profiles\">Change</Link>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        )\n            ;\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (taskProvider.getCurrentOrNewTask().isFinished) {\n            taskProvider.cleanCurrentTask()\n        }\n\n        this.setState({\n            example: exampleGenerator.generate(taskProvider.getCurrentOrNewTask())\n        })\n    }\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Solve} from \"./Example/Solve\";\n\nexport default function App() {\n    return (\n        <Router>\n            <div>\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Solve</Link>\n                        </li>\n                    </ul>\n                </nav>\n\n                <Switch>\n                    <Route path=\"/profiles\">\n                        Profiles\n                    </Route>\n                    <Route path=\"/\">\n                        <Solve/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Solve from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Solve />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}