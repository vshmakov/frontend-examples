{"version":3,"sources":["Operation.ts","Example.ts","Random.ts","ExampleGenerator.ts","Attempt.ts","AttemptProvider.ts","Profile.ts","ProfileProvider.ts","container.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Operation","Example","first","operation","second","signs","Add","Sub","Mult","Div","this","answer","solved","random","min","max","Math","floor","ExampleGenerator","attempt","example","addExample","Attempt","profile","examples","push","length","AttemptProvider","profileProvider","getCurrentProfile","Profile","name","examplesCount","ProfileProvider","exampleGenerator","attemptProvider","App","getCurrentOrNewAttempt","state","generate","onSubmit","submitHandler","bind","string","type","value","onChange","changeHandler","event","setState","target","preventDefault","isRight","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6JAAYA,E,qFAAAA,O,aAAAA,I,aAAAA,I,eAAAA,I,cAAAA,M,KCEL,IAAMC,EAAb,WACI,WACqBC,EACAC,EACAC,GAClB,yBAHkBF,QAGnB,KAFmBC,YAEnB,KADmBC,SAJzB,wCAQI,WAA6B,IAAD,EAClBC,GAAK,mBACNL,EAAUM,IAAM,KADV,cAENN,EAAUO,IAAM,KAFV,cAGNP,EAAUQ,KAAO,KAHX,cAINR,EAAUS,IAAM,KAJV,GAOX,MAAM,GAAN,OAAUC,KAAKR,MAAf,YAAwBG,EAAMK,KAAKP,WAAnC,YAAiDO,KAAKN,UAhB9D,qBAmBI,SAAeO,GACX,OAAOA,IAAWD,KAAKE,SApB/B,kBAuBI,WACI,OAAQF,KAAKP,WACT,KAAKH,EAAUM,IACX,OAAOI,KAAKR,MAAQQ,KAAKN,OAE7B,KAAKJ,EAAUO,IACX,OAAOG,KAAKR,MAAQQ,KAAKN,OAE7B,KAAKJ,EAAUQ,KACX,OAAOE,KAAKR,MAAQQ,KAAKN,OAGjC,OAAOM,KAAKR,MAAQQ,KAAKN,WAnCjC,KCFO,SAASS,EAAOC,EAAaC,GAChC,OAAOC,KAAKC,MAAMD,KAAKH,UAAYE,EAAMD,EAAM,GAAKA,GCIjD,IAAMI,EAAb,wFACI,SAAgBC,GACZ,IAAMC,EAAU,IAAInB,EAChBY,EAAO,EAAG,IACVA,EAAOb,EAAUM,IAAKN,EAAUO,KAChCM,EAAO,EAAG,KAId,OAFAM,EAAQE,WAAWD,GAEZA,MATf,KCFaE,EAAb,WAGI,WACoBC,GACjB,yBADiBA,UAClB,KAJeC,SAAsB,GAD3C,8CAQI,SAAkBJ,GACdV,KAAKc,SAASC,KAAKL,KAT3B,yBAYI,WACI,OAAOV,KAAKc,SAASE,WAb7B,KCAaC,EAAb,WACI,WAAoCC,GAAmC,yBAAnCA,kBADxC,0DAII,WACJ,OAAQ,IAAIN,EACRZ,KAAKkB,gBAAgBC,yBANzB,KCHaC,EACT,WACoBC,EACHC,GACd,yBAFiBD,OAElB,KADeC,iBCDRC,EAAb,iGACI,WACJ,OAAO,IAAIH,EACP,kBACA,QAJJ,KCEaI,EAAmB,IAAIhB,EACvBiB,EAAkB,IAAIR,EAAgB,IAAIM,G,OCqDxCG,E,4MA/CHjB,QAAmBgB,EAAgBE,yB,EAC3BC,MAAkB,CAC9BlB,QAASc,EAAiBK,SAAS,EAAKpB,SACxCR,OAAQ,I,4CAGZ,WACI,OACI,gCACI,uBAAM6B,SAAU9B,KAAK+B,cAAcC,KAAKhC,MAAxC,UACI,2CAAcA,KAAKS,QAAQa,iBAC3B,iCAAOtB,KAAK4B,MAAMlB,QAAQuB,OAA1B,SACA,uBACIC,KAAK,OACLC,MAAOnC,KAAK4B,MAAM3B,OAClBmC,SAAUpC,KAAKqC,cAAcL,KAAKhC,QACtC,wBAAQkC,KAAK,SAAb,uBAEJ,6BACI,2CAAclC,KAAKS,QAAQI,QAAQQ,e,2BAOnD,SAAsBiB,GAClBtC,KAAKuC,SAAS,CACVtC,OAAQqC,EAAME,OAAOL,U,2BAI7B,SAAsBG,GAClBA,EAAMG,iBAEFzC,KAAK4B,MAAMlB,QAAQgC,SAAS1C,KAAK4B,MAAM3B,SACvCD,KAAKuC,SAAS,CACV7B,QAASc,EAAiBK,SAAS7B,KAAKS,WAIhDT,KAAKuC,SAAS,CACVtC,OAAQ,S,GA3CF0C,IAAMC,WCITC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.961752d0.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import {Operation} from \"./Operation\";\n\nexport class Example {\n    public constructor(\n        private readonly first: number,\n        private readonly operation: Operation,\n        private readonly second: number,\n    ) {\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public isRight(answer: number): boolean {\n        return answer === this.solved\n    }\n\n    private get solved(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import {Example} from \"./Example\";\nimport {random} from \"./Random\";\nimport {Operation} from \"./Operation\";\nimport {Attempt} from \"./Attempt\";\n\nexport class ExampleGenerator {\n    public generate(attempt: Attempt): Example {\n        const example = new Example(\n            random(1, 10),\n            random(Operation.Add, Operation.Sub),\n            random(1, 10),\n        );\n        attempt.addExample(example)\n\n        return example\n    }\n}\n","import {Profile} from \"./Profile\"\nimport {Example} from \"./Example\";\n\nexport class Attempt {\n    private readonly examples: Example[] = []\n\n    public constructor(\n        public readonly profile: Profile\n    ) {\n    }\n\n    public addExample(example: Example): void {\n        this.examples.push(example)\n    }\n\n    public get examplesCount(): number {\n        return this.examples.length\n    }\n}\n","import {Attempt} from \"./Attempt\";\nimport {ProfileProvider} from \"./ProfileProvider\";\n\nexport class AttemptProvider {\n    public constructor(private readonly profileProvider: ProfileProvider) {\n    }\n\n    public getCurrentOrNewAttempt(): Attempt {\nreturn  new Attempt(\n    this.profileProvider.getCurrentProfile()\n)\n    }\n}\n","export class Profile {\n    public constructor(\n        public readonly name: string,\n    private readonly examplesCount: number,\n    ) {\n    }\n}\n","import {Profile} from \"./Profile\";\n\nexport class ProfileProvider {\n    public getCurrentProfile(): Profile {\nreturn new Profile(\n    'Default profile',\n    10\n)\n    }\n\n}\n","import {ExampleGenerator} from \"./ExampleGenerator\";\nimport {AttemptProvider} from \"./AttemptProvider\";\nimport {ProfileProvider} from \"./ProfileProvider\";\n\nexport const exampleGenerator = new ExampleGenerator()\nexport const attemptProvider = new AttemptProvider(new ProfileProvider())\n","import React from 'react';\nimport {Example} from \"./Example\";\nimport {attemptProvider, exampleGenerator} from \"./container\";\nimport {Attempt} from \"./Attempt\";\n\ninterface AppState {\n    answer: string\n    example: Example\n}\n\nclass App extends React.Component<{}, AppState> {\n    private attempt: Attempt = attemptProvider.getCurrentOrNewAttempt()\n    public readonly state: AppState = {\n        example: exampleGenerator.generate(this.attempt),\n        answer: '',\n    }\n\n    public render() {\n        return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Example #{this.attempt.examplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Answer</button>\n                </form>\n                <ul>\n                    <li>Profile: {this.attempt.profile.name}</li>\n                </ul>\n            </div>\n        )\n            ;\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n\n        if (this.state.example.isRight(+this.state.answer)) {\n            this.setState({\n                example: exampleGenerator.generate(this.attempt)\n            })\n        }\n\n        this.setState({\n            answer: ''\n        })\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}