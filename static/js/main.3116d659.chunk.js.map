{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Operation","random","min","max","Math","floor","Example","first","operation","second","signs","Add","Sub","Mult","Div","this","answer","solved","App","state","example","generateExample","onSubmit","submitHandler","bind","string","type","value","onChange","changeHandler","event","setState","target","preventDefault","isRight","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6JAMKA,E,kFAJL,SAASC,EAAOC,EAAaC,GACzB,OAAOC,KAAKC,MAAMD,KAAKH,UAAYE,EAAMD,EAAM,GAAKA,I,SAGnDF,O,aAAAA,I,aAAAA,I,eAAAA,I,cAAAA,M,SAOCM,E,WACF,WACqBC,EACAC,EACAC,GAClB,yBAHkBF,QAGnB,KAFmBC,YAEnB,KADmBC,S,wCAIrB,WAA6B,IAAD,EAClBC,GAAK,mBACNV,EAAUW,IAAM,KADV,cAENX,EAAUY,IAAM,KAFV,cAGNZ,EAAUa,KAAO,KAHX,cAINb,EAAUc,IAAM,KAJV,GAOX,MAAM,GAAN,OAAUC,KAAKR,MAAf,YAAwBG,EAAMK,KAAKP,WAAnC,YAAiDO,KAAKN,U,qBAG1D,SAAeO,GACX,OAAOA,IAAWD,KAAKE,S,kBAG3B,WACI,OAAQF,KAAKP,WACT,KAAKR,EAAUW,IACX,OAAOI,KAAKR,MAAQQ,KAAKN,OAE7B,KAAKT,EAAUY,IACX,OAAOG,KAAKR,MAAQQ,KAAKN,OAE7B,KAAKT,EAAUa,KACX,OAAOE,KAAKR,MAAQQ,KAAKN,OAGjC,OAAOM,KAAKR,MAAQQ,KAAKN,W,KAyDlBS,E,4MA/CKC,MAAQ,CACpBH,OAAQ,GACRI,QAAS,EAAKC,mB,4CAGlB,WACI,OACI,uBAAMC,SAAUP,KAAKQ,cAAcC,KAAKT,MAAxC,UACI,iCAAOA,KAAKI,MAAMC,QAAQK,OAA1B,SACA,uBACIC,KAAK,OACLC,MAAOZ,KAAKI,MAAMH,OAClBY,SAAUb,KAAKc,cAAcL,KAAKT,QACtC,wBAAQW,KAAK,SAAb,yB,2BAKZ,SAAsBI,GAClBf,KAAKgB,SAAS,CACVf,OAAQc,EAAME,OAAOL,U,2BAI7B,SAAsBG,GAClBA,EAAMG,iBAEFlB,KAAKI,MAAMC,QAAQc,SAASnB,KAAKI,MAAMH,SACvCD,KAAKgB,SAAS,CACVX,QAASL,KAAKM,oBAItBN,KAAKgB,SAAS,CACVf,OAAQ,O,6BAIhB,WACI,OAAO,IAAIV,EACPL,EAAO,EAAG,IACVA,EAAOD,EAAUW,IAAKX,EAAUY,KAChCX,EAAO,EAAG,S,GA3CJkC,IAAMC,WC3CTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3116d659.chunk.js","sourcesContent":["import React from 'react';\n\nfunction random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nenum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n\nclass Example {\n    public constructor(\n        private readonly first: number,\n        private readonly operation: Operation,\n        private readonly second: number,\n    ) {\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public isRight(answer: number): boolean {\n        return answer === this.solved\n    }\n\n    private get solved(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n\ninterface AppState {\n    answer: string\n    example: Example\n}\n\nclass App extends React.Component<{}, AppState> {\n    public readonly state = {\n        answer: '',\n        example: this.generateExample()\n    }\n\n    public render() {\n        return (\n            <form onSubmit={this.submitHandler.bind(this)}>\n                <span>{this.state.example.string} = </span>\n                <input\n                    type=\"text\"\n                    value={this.state.answer}\n                    onChange={this.changeHandler.bind(this)}/>\n                <button type=\"submit\">Answer</button>\n            </form>\n        );\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n\n        if (this.state.example.isRight(+this.state.answer)) {\n            this.setState({\n                example: this.generateExample()\n            })\n        }\n\n        this.setState({\n            answer: ''\n        })\n    }\n\n    private generateExample(): Example {\n        return new Example(\n            random(1, 10),\n            random(Operation.Add, Operation.Sub),\n            random(1, 10),\n        )\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}