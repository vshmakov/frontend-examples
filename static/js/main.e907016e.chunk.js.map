{"version":3,"sources":["Example/Operation.ts","Task/TaskResult.tsx","Task/TaskConfig.tsx","Example/Solve.tsx","Example/Example.ts","Example/ExampleProvider.ts","Task/Task.ts","Task/TaskSettings.ts","Example/ExampleSettings.ts","Task/TaskProvider.ts","Random.ts","Example/ExampleGenerator.ts","Example/CoefficientGenerator.ts","Example/ExampleValues.ts","App.tsx","Example/OperationGeneratorCollection.ts","Example/AddGenerator.ts","reportWebVitals.ts","index.tsx"],"names":["Operation","TaskResult","task","this","props","solvedExamplesCount","wrongExamplesCount","onClick","startNewTask","showExamples","examples","number","example","push","string","answer","isSolved","React","Component","TaskConfig","Solve","state","getActualOrNewExample","showTaskHistory","showTaskConfig","getCurrentOrNewTask","bind","onSubmit","submitHandler","rightExamplesCount","taskSettings","examplesCount","type","value","onChange","changeHandler","clickHandler","taskProvider","cleanCurrentTask","setState","event","target","preventDefault","exampleProvider","Example","first","operation","second","signs","Add","Sub","Mult","Div","solution","exampleValues","ExampleProvider","exampleGenerator","previousExample","lastExample","hasAnswer","newExample","generate","Task","filter","length","solvedExamples","remainedExamplesCount","TaskSettings","exampleSettings","ExampleSettings","minValue","maxValue","minResult","maxResult","TaskProvider","currentTask","random","min","max","Math","floor","randomFlag","probability","ExampleGenerator","operationGeneratorCollection","coefficientGenerator","generator","getGenerator","maxCoefficient","nextExample","nextCoefficient","getUniqueCoefficient","CoefficientGenerator","uniqueCoefficient","solvedExample","ExampleValues","generators","DOMException","createFromValues","generateValues","settings","minSecond","getValueBetween","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e907016e.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import React from \"react\";\nimport {Task} from \"./Task\";\n\ninterface Props {\n    task: Task\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    render() {\n        const task = this.props.task\n\n        return (\n            <div>\n                <h1>Task result</h1>\n                <ul>\n                    <li>Solved examples count: {task.solvedExamplesCount}</li>\n                    <li>Errors count: {task.wrongExamplesCount}</li>\n                </ul>\n                <div>\n                    <button onClick={this.props.startNewTask}>Start new task</button>\n                </div>\n                <h2>Examples</h2>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Example</th>\n                        <th>Answer</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.showExamples(task)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n}\n","import React from \"react\";\n\ninterface Props {\n    startNewTask: () => void\n}\n\nexport class TaskConfig extends React.Component<Props> {\n    render() {\n        return (\n            <div>\n                <h1>Task settings</h1>\n                <div>\n                    <button onClick={this.props.startNewTask}>Start new task</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import {Example} from \"./Example\";\nimport React from \"react\";\nimport {TaskResult} from \"../Task/TaskResult\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {ExampleProvider} from \"./ExampleProvider\";\nimport {Task} from \"../Task/Task\";\nimport {TaskConfig} from \"../Task/TaskConfig\";\n\ninterface Props {\n    taskProvider: TaskProvider\n    exampleProvider: ExampleProvider\n}\n\ninterface State {\n    example: Example\n    answer: string\n    showTaskHistory: boolean\n    showTaskConfig: boolean\n}\n\nexport class Solve extends React.Component<Props, State> {\n    public readonly state: State = {\n        example: this.getActualOrNewExample(),\n        answer: '',\n        showTaskHistory: false,\n        showTaskConfig: false,\n    }\n\n    public render() {\n        const task = this.getCurrentOrNewTask()\n\n        if (this.state.showTaskHistory) {\n            return <TaskResult task={task} startNewTask={this.startNewTask.bind(this)}/>\n        }\n\n        if (this.state.showTaskConfig) {\n            return <TaskConfig startNewTask={this.startNewTask.bind(this)}/>\n        }\n\n        return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Example #{task.rightExamplesCount} from {task.taskSettings.examplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Answer</button>\n                </form>\n                <div>\n                    <button onClick={this.clickHandler.bind(this)}>Change settings</button>\n                </div>\n            </div>\n        )\n    }\n\n    private startNewTask(): void {\n        this.props.taskProvider.cleanCurrentTask()\n        this.setState({\n            example: this.getActualOrNewExample(),\n            showTaskHistory: false,\n            showTaskConfig: false\n        })\n    }\n\n    private clickHandler(): void {\n        this.setState({\n            showTaskConfig: true\n        })\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (this.getCurrentOrNewTask().isSolved) {\n            this.setState({\n                showTaskHistory: true\n            })\n\n            return\n        }\n\n        this.setState({\n            example: this.getActualOrNewExample()\n        })\n    }\n\n    private getCurrentOrNewTask(): Task {\n        return this.props.taskProvider.getCurrentOrNewTask();\n    }\n\n    private getActualOrNewExample(): Example {\n        return this.props.exampleProvider.getActualOrNewExample(this.getCurrentOrNewTask())\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {ExampleValues} from \"./ExampleValues\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public static createFromValues(exampleValues: ExampleValues, operation: Operation): Example {\n        return new Example(exampleValues.first, operation, exampleValues.second)\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solution\n    }\n\n    public get solution(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\nimport {ExampleGenerator} from \"./ExampleGenerator\";\n\nexport class ExampleProvider {\n    public constructor(private readonly exampleGenerator: ExampleGenerator) {\n    }\n\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = this.exampleGenerator.generate(task)\n\n        if (null !== previousExample && !previousExample?.isSolved) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.examples.push(newExample)\n\n        return newExample\n    }\n}\n","import {Example} from \"../Example/Example\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly taskSettings: TaskSettings\n    ) {\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.solvedExamples.length\n    }\n\n    public get solvedExamples(): Example[] {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.taskSettings.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {ExampleSettings} from \"../Example/ExampleSettings\";\n\nexport class TaskSettings {\n    public constructor(\n        public readonly examplesCount: number,\n        public readonly exampleSettings: ExampleSettings\n    ) {\n    }\n}\n","export class ExampleSettings {\n    public constructor(\n        public readonly minValue: number,\n        public readonly maxValue: number,\n        public readonly minResult: number,\n        public readonly maxResult: number,\n    ) {\n    }\n}\n","import {Task} from \"./Task\";\nimport {TaskSettings} from './TaskSettings'\nimport {ExampleSettings} from '../Example/ExampleSettings'\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                new TaskSettings(20, new ExampleSettings(1, 9, 1, 10))\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function randomFlag(probability: number): boolean {\n    return probability / 100 <= Math.random()\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\nimport {randomFlag} from \"../Random\";\nimport {Task} from \"../Task/Task\";\nimport {CoefficientGenerator} from \"./CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./OperationGeneratorCollection\";\n\nexport class ExampleGenerator {\n    public constructor(\n        private readonly operationGeneratorCollection: OperationGeneratorCollection,\n        private readonly coefficientGenerator: CoefficientGenerator\n    ) {\n    }\n\n    public generate(task: Task): Example {\n        const generator = this.operationGeneratorCollection.getGenerator(Operation.Add)\n        const exampleSettings = task.taskSettings.exampleSettings\n        let example = generator.generate(exampleSettings)\n\n        if (randomFlag(15)) {\n            return example\n        }\n\n        let maxCoefficient = 0\n\n        for (let number = 1; number <= 100; number++) {\n            const nextExample = generator.generate(exampleSettings)\n            const nextCoefficient = this.coefficientGenerator.getUniqueCoefficient(nextExample, task)\n\n            if (nextCoefficient > maxCoefficient) {\n                example = nextExample\n                maxCoefficient = nextCoefficient\n            }\n        }\n\n        return example\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\n\nexport class CoefficientGenerator {\n    public getUniqueCoefficient(example: Example, task: Task): number {\n        let uniqueCoefficient = 1\n        const solvedExamples = task.solvedExamples\n        const solvedExamplesCount = solvedExamples.length || 1\n\n        for (let solvedExample of solvedExamples) {\n            if (example.first === solvedExample.first && example.operation === solvedExample.operation && example.second === solvedExample.second) {\n                uniqueCoefficient -= 60 / 100 / solvedExamplesCount\n            }\n\n            if (example.solution === solvedExample.solution) {\n                uniqueCoefficient -= 40 / 100 / solvedExamplesCount\n            }\n        }\n\n        return uniqueCoefficient\n    }\n}\n","export class ExampleValues {\n    public constructor(\n        public readonly first: number,\n        public readonly second: number\n    ) {\n    }\n}\n","import React from 'react';\nimport {Solve} from \"./Example/Solve\";\nimport {ExampleProvider} from \"./Example/ExampleProvider\";\nimport {TaskProvider} from \"./Task/TaskProvider\";\nimport {ExampleGenerator} from './Example/ExampleGenerator'\nimport {CoefficientGenerator} from \"./Example/CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./Example/OperationGeneratorCollection\";\nimport {AddGenerator} from \"./Example/AddGenerator\";\n\nconst operationGeneratorCollection = new OperationGeneratorCollection([new AddGenerator()])\nconst coefficientGenerator = new CoefficientGenerator()\nconst exampleGenerator = new ExampleGenerator(operationGeneratorCollection, coefficientGenerator)\nconst exampleProvider = new ExampleProvider(exampleGenerator)\nconst taskProvider = new TaskProvider()\n\nexport default function App() {\n    return (\n        <Solve taskProvider={taskProvider} exampleProvider={exampleProvider}/>\n    )\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\n\nexport class OperationGeneratorCollection {\n    public constructor(private readonly generators: OperationGenerator[]) {\n    }\n\n    public getGenerator(operation: Operation): OperationGenerator {\nfor (let generator of this.generators){\n    if (operation===generator.operation){\n        return  generator\n    }\n}\n\n    throw new DOMException(`Generator with ${operation} does not exist`)\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {Example} from \"./Example\";\n\nexport class AddGenerator implements OperationGenerator {\n    public readonly operation: Operation = Operation.Add\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        return Example.createFromValues(this.generateValues(exampleSettings), this.operation)\n    }\n\n    private generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = this.getValueBetween(settings.minValue, settings.minResult - first, settings.minValue)\n        const maxSecond = this.getValueBetween(settings.maxValue, minSecond, settings.maxResult - first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n\n    private getValueBetween(value: number, min: number, max: number): number {\n        if (min > max) {\n            throw new DOMException(`${min} is greater than ${max}`)\n        }\n\n        if (value < min) {\n            return min\n        }\n\n        if (value > max) {\n            return max\n        }\n\n        return value\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Solve from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Solve />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}