{"version":3,"sources":["Example/Operation.ts","Example/Example.ts","Random.ts","Example/ExampleGenerator.ts","Profile/Profile.ts","Profile/ProfileProvider.ts","Task/Task.ts","Task/TaskProvider.ts","container.ts","Example/Solve.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Operation","Example","first","operation","second","signs","Add","Sub","Mult","Div","this","answer","solved","random","min","max","Math","floor","ExampleGenerator","task","example","addExample","Profile","name","examplesCount","ProfileProvider","Task","profile","examples","push","length","TaskProvider","profileProvider","getCurrentProfile","exampleGenerator","taskProvider","Solve","getNewTask","state","generate","onSubmit","submitHandler","bind","string","type","value","onChange","changeHandler","role","to","event","setState","target","preventDefault","isRight","isFinished","React","Component","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6JAAYA,E,wGAAAA,O,aAAAA,I,aAAAA,I,eAAAA,I,cAAAA,M,KCEL,IAAMC,EAAb,WACI,WACqBC,EACAC,EACAC,GAClB,yBAHkBF,QAGnB,KAFmBC,YAEnB,KADmBC,SAJzB,wCAQI,WAA6B,IAAD,EAClBC,GAAK,mBACNL,EAAUM,IAAM,KADV,cAENN,EAAUO,IAAM,KAFV,cAGNP,EAAUQ,KAAO,KAHX,cAINR,EAAUS,IAAM,KAJV,GAOX,MAAM,GAAN,OAAUC,KAAKR,MAAf,YAAwBG,EAAMK,KAAKP,WAAnC,YAAiDO,KAAKN,UAhB9D,qBAmBI,SAAeO,GACX,OAAOA,IAAWD,KAAKE,SApB/B,kBAuBI,WACI,OAAQF,KAAKP,WACT,KAAKH,EAAUM,IACX,OAAOI,KAAKR,MAAQQ,KAAKN,OAE7B,KAAKJ,EAAUO,IACX,OAAOG,KAAKR,MAAQQ,KAAKN,OAE7B,KAAKJ,EAAUQ,KACX,OAAOE,KAAKR,MAAQQ,KAAKN,OAGjC,OAAOM,KAAKR,MAAQQ,KAAKN,WAnCjC,KCFO,SAASS,EAAOC,EAAaC,GAChC,OAAOC,KAAKC,MAAMD,KAAKH,UAAYE,EAAMD,EAAM,GAAKA,GCIjD,IAAMI,EAAb,wFACI,SAAgBC,GACZ,IAAMC,EAAU,IAAInB,EAChBY,EAAO,EAAG,IACVA,EAAOb,EAAUM,IAAKN,EAAUO,KAChCM,EAAO,EAAG,KAId,OAFAM,EAAKE,WAAWD,GAETA,MATf,KCLaE,EACT,WACoBC,EACJC,GACb,yBAFiBD,OAElB,KADcC,iBCDPC,EAAb,iGACI,WACJ,OAAO,IAAIH,EACP,kBACA,OAJJ,KCCaI,EAAb,WAGI,WACoBC,GACjB,yBADiBA,UAClB,KAJeC,SAAsB,GAD3C,8CAQI,SAAkBR,GACdV,KAAKkB,SAASC,KAAKT,KAT3B,yBAYI,WACI,OAAOV,KAAKkB,SAASE,SAb7B,sBAgBI,WACI,OAAOpB,KAAKc,gBAAkBd,KAAKiB,QAAQH,kBAjBnD,KCAaO,EAAb,WACI,WAAoCC,GAAmC,yBAAnCA,kBADxC,8CAII,WACI,OAAO,IAAIN,EACPhB,KAAKsB,gBAAgBC,yBANjC,KCCaC,EAAmB,IAAIhB,EACvBiB,EAAe,IAAIJ,EAAa,IAAIN,G,OCMpCW,EAAb,4MACYjB,KAAagB,EAAaE,aADtC,EAEoBC,MAAoB,CAChClB,QAASc,EAAiBK,SAAS,EAAKpB,MACxCR,OAAQ,IAJhB,4CAOI,WACI,OACI,gCACI,uBAAM6B,SAAU9B,KAAK+B,cAAcC,KAAKhC,MAAxC,UACI,2CAAcA,KAAKS,KAAKK,iBACxB,iCAAOd,KAAK4B,MAAMlB,QAAQuB,OAA1B,SACA,uBACIC,KAAK,OACLC,MAAOnC,KAAK4B,MAAM3B,OAClBmC,SAAUpC,KAAKqC,cAAcL,KAAKhC,QACtC,wBAAQkC,KAAK,SAAb,uBAEJ,6BACI,+BACI,4CAAelC,KAAKS,KAAKQ,QAAQJ,QACjC,8BACI,cAAC,IAAD,CAAMyB,KAAK,SAASC,GAAG,YAAvB,gCAvB5B,2BAgCI,SAAsBC,GAClBxC,KAAKyC,SAAS,CACVxC,OAAQuC,EAAME,OAAOP,UAlCjC,2BAsCI,SAAsBK,GAClBA,EAAMG,iBACN,IAAM1C,EAASD,KAAK4B,MAAM3B,OAEtB,KAAOA,IAIXD,KAAKyC,SAAS,CACVxC,OAAQ,KAGPD,KAAK4B,MAAMlB,QAAQkC,SAAS3C,KAI7BD,KAAKS,KAAKoC,aACV7C,KAAKS,KAAOgB,EAAaE,cAG7B3B,KAAKyC,SAAS,CACV/B,QAASc,EAAiBK,SAAS7B,KAAKS,cA3DpD,GAA2BqC,IAAMC,WCPlB,SAASC,IACpB,OACI,cAAC,IAAD,UACI,gCACI,8BACI,6BACI,6BACI,cAAC,IAAD,CAAMT,GAAG,IAAT,yBAKZ,eAAC,IAAD,WACI,cAAC,IAAD,CAAOU,KAAK,YAAZ,sBAGA,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACI,cAAC,EAAD,cCnBxB,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f03c39e8.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import {Operation} from \"./Operation\";\n\nexport class Example {\n    public constructor(\n        private readonly first: number,\n        private readonly operation: Operation,\n        private readonly second: number,\n    ) {\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public isRight(answer: number): boolean {\n        return answer === this.solved\n    }\n\n    private get solved(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import {Example} from \"./Example\";\nimport {random} from \"../Random\";\nimport {Operation} from \"./Operation\";\nimport {Task} from \"../Task/Task\";\n\nexport class ExampleGenerator {\n    public generate(task: Task): Example {\n        const example = new Example(\n            random(1, 10),\n            random(Operation.Add, Operation.Sub),\n            random(1, 10),\n        );\n        task.addExample(example)\n\n        return example\n    }\n}\n","export class Profile {\n    public constructor(\n        public readonly name: string,\n    public readonly examplesCount: number,\n    ) {\n    }\n}\n","import {Profile} from \"./Profile\";\n\nexport class ProfileProvider {\n    public getCurrentProfile(): Profile {\nreturn new Profile(\n    'Default profile',\n    3\n)\n    }\n}\n","import {Profile} from \"../Profile/Profile\"\nimport {Example} from \"../Example/Example\";\n\nexport class Task {\n    private readonly examples: Example[] = []\n\n    public constructor(\n        public readonly profile: Profile\n    ) {\n    }\n\n    public addExample(example: Example): void {\n        this.examples.push(example)\n    }\n\n    public get examplesCount(): number {\n        return this.examples.length\n    }\n\n    public get isFinished(): boolean {\n        return this.examplesCount === this.profile.examplesCount\n    }\n}\n","import {ProfileProvider} from \"../Profile/ProfileProvider\";\nimport {Task} from \"./Task\";\n\nexport class TaskProvider {\n    public constructor(private readonly profileProvider: ProfileProvider) {\n    }\n\n    public getNewTask(): Task {\n        return new Task(\n            this.profileProvider.getCurrentProfile()\n        )\n    }\n}\n","import {ExampleGenerator} from \"./Example/ExampleGenerator\";\nimport {ProfileProvider} from \"./Profile/ProfileProvider\";\nimport {TaskProvider} from \"./Task/TaskProvider\";\n\nexport const exampleGenerator = new ExampleGenerator()\nexport const taskProvider = new TaskProvider(new ProfileProvider())\n","import {Example} from \"./Example\";\nimport React from \"react\";\nimport {Task} from \"../Task/Task\";\nimport {exampleGenerator, taskProvider} from \"../container\";\nimport {Link} from \"react-router-dom\";\n\ninterface SolveState {\n    example: Example\n    answer: string\n}\n\nexport class Solve extends React.Component<{}, SolveState> {\n    private task: Task = taskProvider.getNewTask()\n    public readonly state: SolveState = {\n        example: exampleGenerator.generate(this.task),\n        answer: '',\n    }\n\n    public render() {\n        return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Example #{this.task.examplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Answer</button>\n                </form>\n                <ul>\n                    <li>\n                        <div>Profile: {this.task.profile.name}</div>\n                        <div>\n                            <Link role=\"button\" to=\"/profiles\">Change</Link>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        )\n            ;\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        if (!this.state.example.isRight(+answer)) {\n            return;\n        }\n\n        if (this.task.isFinished) {\n            this.task = taskProvider.getNewTask()\n        }\n\n        this.setState({\n            example: exampleGenerator.generate(this.task)\n        })\n    }\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Solve} from \"./Example/Solve\";\n\nexport default function App() {\n    return (\n        <Router>\n            <div>\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Solve</Link>\n                        </li>\n                    </ul>\n                </nav>\n\n                <Switch>\n                    <Route path=\"/profiles\">\n                        Profiles\n                    </Route>\n                    <Route path=\"/\">\n                        <Solve/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Solve from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Solve />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}