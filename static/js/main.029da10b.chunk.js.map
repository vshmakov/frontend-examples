{"version":3,"sources":["Example/Operation.ts","Component/Solve.tsx","Example/Example.ts","Example/ExampleProvider.ts","Task/Task.ts","Task/TaskProvider.ts","Task/TaskSettingsManager.ts","Random.ts","Example/ExampleGenerator.ts","Example/CoefficientGenerator.ts","Example/OperationGeneratorCollection.ts","Example/ExampleValues.ts","NumberManipulator.ts","Example/ValuesGenerator.ts","Example/AddGenerator.ts","ObjectManipulator.ts","Task/RatingGenerator.ts","Component/App.tsx","Example/RevertGenerator.ts","Task/TaskSettingsNormalizer.ts","Example/ProfileProvider.ts","Example/ExampleSettingsNormalizer.ts","Component/StartNewTaskButton.tsx","Component/TaskResult.tsx","Component/SettingInput.tsx","Component/OperationSettings.tsx","Component/TaskConfig.tsx","Example/MultGenerator.ts","reportWebVitals.ts","index.tsx"],"names":["Operation","Solve","state","example","getActualOrNewExample","answer","task","this","getCurrentOrNewTask","onSubmit","submitHandler","bind","currentExampleNumber","taskSettings","examplesCount","string","type","value","onChange","changeHandler","onClick","props","openConfiguration","event","setState","target","preventDefault","isSolved","openTaskResult","taskProvider","exampleProvider","React","Component","Example","first","operation","second","signs","Add","Sub","Mult","Div","solution","exampleValues","ExampleProvider","exampleGenerator","previousExample","lastExample","hasAnswer","newExample","generate","examples","push","Task","solvedExamplesCount","filter","length","wrongExamplesCount","solvedExamples","remainedExamplesCount","TaskProvider","taskSettingsManager","currentTask","getCurrentSettings","storageKey","TaskSettingsManager","taskSettingsNormalizer","profileProvider","item","localStorage","getItem","operations","addSettings","defaultAddProfile","exampleSettings","multSettings","defaultMultProfile","JSON","parse","normalize","setItem","stringify","random","min","max","Math","floor","randomFlag","probability","ExampleGenerator","operationGeneratorCollection","coefficientGenerator","getOperation","generator","getGenerator","includes","maxCoefficient","number","nextExample","nextCoefficient","getUniqueCoefficient","CoefficientGenerator","uniqueCoefficient","solvedExample","OperationGeneratorCollection","generators","DOMException","ExampleValues","getValueBetween","getValueLessThan","ValuesGenerator","createFromValues","generateValues","AddGenerator","settings","minValue","maxValue","minSecond","minResult","maxResult","getObjectKeys","object","Object","keys","isEqual","object1","object2","key","clone","cloned","isObject","Page","RatingGenerator","coefficients","coeeficients","getTaskCoefficients","rating","rightExamplesCount","index","reduce","previousExamplesCount","standardExamplesCount","map","round","RevertGenerator","originalGenerator","TaskSettingsNormalizer","exampleSettingsNormalizer","normalizeAddSettings","normalizeMultSettings","ProfileProvider","normalizeAddProfile","normalizeMultProfile","normalizeProfile","add10Profile","name","addProfiles","multTableProfile","multProfiles","normalizer","profile","ExampleSettingsNormalizer","upperBound","StartNewTaskButton","TaskResult","startNewTask","ratingGenerator","getRating","showExamples","SettingInput","toString","disabled","OperationSettings","isSettingsOpened","operationCheckboxes","renderOperationCheckbox","profiles","renderProfile","renderSettings","baseOperation","checked","isInputDisabled","changeRadioHandler","some","source","copyValues","operationNames","changeCheckboxHandler","enabledOperations","enabledOperation","TaskConfig","getCurrentTaskSettings","clickHandler","changeExamplesCountHandler","getNewTaskSettings","saveTaskSettings","MultGenerator","addGenerator","multGenerator","App","page","router","openPage","cleanCurrentTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.029da10b.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import {Example} from \"../Example/Example\";\nimport React from \"react\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {ExampleProvider} from \"../Example/ExampleProvider\";\nimport {Task} from \"../Task/Task\";\n\ninterface Props {\n    taskProvider: TaskProvider\n    exampleProvider: ExampleProvider\n    openConfiguration: () => void\n    openTaskResult: () => void\n}\n\ninterface State {\n    example: Example\n    answer: string\n}\n\nexport class Solve extends React.Component<Props, State> {\n    public readonly state: State = {\n        example: this.getActualOrNewExample(),\n        answer: '',\n    }\n\n    public render() {\n        const task = this.getCurrentOrNewTask()\n\n        return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Пример №{task.currentExampleNumber} из {task.taskSettings.examplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Ответить</button>\n                </form>\n                <div>\n                    <button onClick={this.props.openConfiguration}>\n                        Изменить настройки\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (this.getCurrentOrNewTask().isSolved) {\n            this.props.openTaskResult()\n\n            return\n        }\n\n        this.setState({\n            example: this.getActualOrNewExample()\n        })\n    }\n\n    private getCurrentOrNewTask(): Task {\n        return this.props.taskProvider.getCurrentOrNewTask();\n    }\n\n    private getActualOrNewExample(): Example {\n        return this.props.exampleProvider.getActualOrNewExample(this.getCurrentOrNewTask())\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {ExampleValues} from \"./ExampleValues\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public static createFromValues(exampleValues: ExampleValues, operation: Operation): Example {\n        return new Example(exampleValues.first, operation, exampleValues.second)\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solution\n    }\n\n    public get solution(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\nimport {ExampleGenerator} from \"./ExampleGenerator\";\n\nexport class ExampleProvider {\n    public constructor(private readonly exampleGenerator: ExampleGenerator) {\n    }\n\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = this.exampleGenerator.generate(task)\n\n        if (null !== previousExample && !previousExample?.isSolved) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.examples.push(newExample)\n\n        return newExample\n    }\n}\n","import {Example} from \"../Example/Example\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly taskSettings: TaskSettings\n    ) {\n    }\n\n    public get currentExampleNumber(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount - this.wrongExamplesCount\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.solvedExamples.length\n    }\n\n    public get solvedExamples(): Example[] {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.taskSettings.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {Task} from \"./Task\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly taskSettingsManager: TaskSettingsManager) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.taskSettingsManager.getCurrentSettings()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","import {TaskSettings} from \"./TaskSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {TaskSettingsNormalizer} from \"./TaskSettingsNormalizer\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\n\nconst storageKey = 'task-settings-v2';\n\nexport class TaskSettingsManager {\n    public constructor(\n        private readonly taskSettingsNormalizer: TaskSettingsNormalizer,\n        private readonly profileProvider: ProfileProvider\n    ) {\n    }\n\n    public getCurrentSettings(): TaskSettings {\n        const item = localStorage.getItem(storageKey)\n\n        if (null === item) {\n            return {\n                examplesCount: 10,\n                operations: [Operation.Add],\n                addSettings: this.profileProvider.defaultAddProfile.exampleSettings,\n                multSettings: this.profileProvider.defaultMultProfile.exampleSettings\n            }\n        }\n\n        const taskSettings = JSON.parse(item)\n\n        return taskSettings\n    }\n\n    public saveTaskSettings(taskSettings: TaskSettings): void {\n        this.taskSettingsNormalizer.normalize(taskSettings)\n        localStorage.setItem(storageKey, JSON.stringify(taskSettings))\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function randomFlag(probability: number): boolean {\n    return probability / 100 <= Math.random()\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\nimport {random, randomFlag} from \"../Random\";\nimport {Task} from \"../Task/Task\";\nimport {CoefficientGenerator} from \"./CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./OperationGeneratorCollection\";\n\nexport class ExampleGenerator {\n    public constructor(\n        private readonly operationGeneratorCollection: OperationGeneratorCollection,\n        private readonly coefficientGenerator: CoefficientGenerator\n    ) {\n    }\n\n    public generate(task: Task): Example {\n        const operation = this.getOperation(task)\n        const generator = this.operationGeneratorCollection.getGenerator(operation)\n        const taskSettings = task.taskSettings\n        const exampleSettings = [Operation.Add, Operation.Sub].includes(operation) ? taskSettings.addSettings : taskSettings.multSettings\n        let example = generator.generate(exampleSettings)\n\n        if (randomFlag(15)) {\n            return example\n        }\n\n        let maxCoefficient = 0\n\n        for (let number = 1; number <= 100; number++) {\n            const nextExample = generator.generate(exampleSettings)\n            const nextCoefficient = this.coefficientGenerator.getUniqueCoefficient(nextExample, task)\n\n            if (nextCoefficient > maxCoefficient) {\n                example = nextExample\n                maxCoefficient = nextCoefficient\n            }\n        }\n\n        return example\n    }\n\n    private getOperation(task: Task): Operation {\n        const operations = task.taskSettings.operations\n\n        return operations[random(0, operations.length - 1)]\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\n\nexport class CoefficientGenerator {\n    public getUniqueCoefficient(example: Example, task: Task): number {\n        let uniqueCoefficient = 1\n        const solvedExamples = task.solvedExamples\n        const solvedExamplesCount = solvedExamples.length || 1\n\n        for (let solvedExample of solvedExamples) {\n            if (example.first === solvedExample.first && example.operation === solvedExample.operation && example.second === solvedExample.second) {\n                uniqueCoefficient -= 60 / 100 / solvedExamplesCount\n            }\n\n            if (example.solution === solvedExample.solution) {\n                uniqueCoefficient -= 40 / 100 / solvedExamplesCount\n            }\n        }\n\n        return uniqueCoefficient\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\n\nexport class OperationGeneratorCollection {\n    public constructor(private readonly generators: OperationGenerator[]) {\n    }\n\n    public getGenerator(operation: Operation): OperationGenerator {\nfor (let generator of this.generators){\n    if (operation===generator.operation){\n        return  generator\n    }\n}\n\n    throw new DOMException(`Generator with ${operation} does not exist`)\n    }\n}\n","export class ExampleValues {\n    public constructor(\n        public readonly first: number,\n        public readonly second: number\n    ) {\n    }\n}\n","export function getValueBetween(value: number, min: number, max: number): number {\n    if (min > max) {\n        throw new DOMException(`${min} is greater than ${max}`)\n    }\n\n    if (value < min) {\n        return min\n    }\n\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n\nexport function getValueLessThan(value: number, max: number): number {\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n","import {OperationGenerator} from \"./OperationGenerator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\n\nexport abstract class ValuesGenerator implements OperationGenerator {\n    public abstract readonly operation: Operation\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        return Example.createFromValues(this.generateValues(exampleSettings), this.operation)\n    }\n\n    protected abstract generateValues(settings: ExampleSettings): ExampleValues\n}\n","import {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {getValueBetween} from \"../NumberManipulator\";\nimport {ValuesGenerator} from \"./ValuesGenerator\";\nimport {Operation} from \"./Operation\";\n\nexport class AddGenerator extends ValuesGenerator {\n    public readonly operation: Operation = Operation.Add\n\n    protected generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult - first, settings.maxResult - first)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult - first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","export function getObjectKeys<T extends {}>(object: T): (keyof T)[] {\n    const keys = Object.keys(object)\n\n    return keys as (keyof T)[]\n}\n\nexport function isEqual<T extends {}>(object1: T, object2: T): boolean {\n    for (let key of getObjectKeys(object1)) {\n        if (object1[key] !== object2[key]) {\n            return false\n        }\n    }\n\n    return true\n}\n\nexport function copyValues<T extends {}>(target: T, source: T): void {\n    for (let key of getObjectKeys(source)) {\n        target[key] = source[key]\n    }\n}\n\n\nexport function clone<T extends {}>(object: T): T {\n    const cloned = {} as T\n\n    for (let key of getObjectKeys(object)) {\n        const value = object[key]\n        cloned[key] = isObject(value) ? clone(value) : value\n    }\n\n    return cloned\n}\n\nfunction isObject(value: any): boolean {\n    return typeof value === 'object' && value !== null\n}\n","import {Task} from \"./Task\";\nimport {getObjectKeys} from \"../ObjectManipulator\";\n\nexport class RatingGenerator {\n    private readonly coefficients = {\n        '10': [5, 6, 8, 9],\n        '20': [14, 15, 17, 19],\n    }\n\n    public getRating(task: Task): number {\n        const coeeficients = this.getTaskCoefficients(task)\n        let rating = 0\n\n        for (rating; rating < coeeficients.length; rating++) {\n            if (task.rightExamplesCount < coeeficients[rating]) {\n                break\n            }\n        }\n\n        return rating + 1\n    }\n\n    private getTaskCoefficients(task: Task): number[] {\n        const coefficients = this.coefficients\n        type ExamplesCount = keyof typeof coefficients\n        const index = getObjectKeys(this.coefficients)\n            .reduce((previousExamplesCount: ExamplesCount, examplesCount: ExamplesCount): ExamplesCount => task.solvedExamplesCount >= +examplesCount ? examplesCount : previousExamplesCount)\n        const standardExamplesCount = +index\n\n        return this.coefficients[index]\n            .map((examplesCount: number): number => Math.round(examplesCount * task.solvedExamplesCount / standardExamplesCount))\n    }\n}\n","import React from 'react';\nimport {Solve} from \"./Solve\";\nimport {ExampleProvider} from \"../Example/ExampleProvider\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\nimport {ExampleGenerator} from '../Example/ExampleGenerator'\nimport {CoefficientGenerator} from \"../Example/CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"../Example/OperationGeneratorCollection\";\nimport {AddGenerator} from \"../Example/AddGenerator\";\nimport {RatingGenerator} from \"../Task/RatingGenerator\";\nimport {RevertGenerator} from \"../Example/RevertGenerator\";\nimport {TaskSettingsNormalizer} from \"../Task/TaskSettingsNormalizer\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\nimport {ExampleSettingsNormalizer} from \"../Example/ExampleSettingsNormalizer\";\nimport {TaskResult} from \"./TaskResult\";\nimport {TaskConfig} from \"./TaskConfig\";\nimport {MultGenerator} from \"../Example/MultGenerator\";\n\nconst addGenerator = new AddGenerator()\nconst multGenerator = new MultGenerator()\nconst operationGeneratorCollection = new OperationGeneratorCollection([\n    addGenerator,\n    new RevertGenerator(addGenerator),\n    multGenerator,\n    new RevertGenerator(multGenerator),\n])\nconst coefficientGenerator = new CoefficientGenerator()\nconst exampleGenerator = new ExampleGenerator(operationGeneratorCollection, coefficientGenerator)\nconst exampleProvider = new ExampleProvider(exampleGenerator)\nconst exampleSettingsNormalizer = new ExampleSettingsNormalizer()\nconst taskSettingsNormalizer = new TaskSettingsNormalizer(exampleSettingsNormalizer)\nconst profileProvider = new ProfileProvider(exampleSettingsNormalizer)\nconst taskSettingsManager = new TaskSettingsManager(taskSettingsNormalizer, profileProvider)\nconst taskProvider = new TaskProvider(taskSettingsManager)\nconst ratingGenerator = new RatingGenerator()\n\nenum Page {\n    Solve = 1,\n    TaskResult,\n    TaskConfig,\n}\n\ninterface State {\n    page: Page\n}\n\nexport class App extends React.Component<{}, State> {\n    public readonly state: State = {\n        page: Page.Solve,\n    }\n\n    public render() {\n        const router = {\n            [Page.Solve]: <Solve\n                taskProvider={taskProvider}\n                exampleProvider={exampleProvider}\n                openConfiguration={this.openPage.bind(this, Page.TaskConfig)}\n                openTaskResult={this.openPage.bind(this, Page.TaskResult)}/>,\n            [Page.TaskResult]: <TaskResult\n                ratingGenerator={ratingGenerator}\n                taskProvider={taskProvider}\n                startNewTask={this.startNewTask.bind(this)}/>,\n            [Page.TaskConfig]: <TaskConfig\n                profileProvider={profileProvider}\n                taskSettingsManager={taskSettingsManager}\n                startNewTask={this.startNewTask.bind(this)}/>,\n        }\n\n        return (\n            <div>\n                {router[this.state.page]}\n            </div>\n        )\n    }\n\n    private startNewTask(): void {\n        taskProvider.cleanCurrentTask()\n        this.openPage(Page.Solve)\n    }\n\n    private openPage(page: Page): void {\n        this.setState({\n            page: page\n        })\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {Example} from \"./Example\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class RevertGenerator implements OperationGenerator {\n    public readonly operation: Operation\n\n    public constructor(private readonly originalGenerator: OperationGenerator) {\n        const operation = originalGenerator.operation\n\n        if (![Operation.Add, Operation.Mult].includes(operation)) {\n            throw new DOMException(`You can not revert ${operation} operation example generation`)\n        }\n\n        this.operation = operation + 1\n    }\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        const example = this.originalGenerator.generate(exampleSettings)\n\n        return new Example(\n            example.solution,\n            this.operation,\n            example.second\n        )\n    }\n}\n","import {TaskSettings} from \"./TaskSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {ExampleSettingsNormalizer} from \"../Example/ExampleSettingsNormalizer\";\n\nexport class TaskSettingsNormalizer {\n    public constructor(private readonly exampleSettingsNormalizer: ExampleSettingsNormalizer) {\n    }\n\n    public normalize(taskSettings: TaskSettings): void {\n        if (taskSettings.examplesCount < 1) {\n            taskSettings.examplesCount = 10\n        }\n\n        if (0 === taskSettings.operations.length) {\n            taskSettings.operations.push(Operation.Add)\n        }\n\n        this.exampleSettingsNormalizer.normalizeAddSettings(taskSettings.addSettings)\n        this.exampleSettingsNormalizer.normalizeMultSettings(taskSettings.multSettings)\n    }\n}\n","import {Profile} from \"./Profile\";\nimport {ExampleSettingsNormalizer} from \"./ExampleSettingsNormalizer\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\ntype ProfileNormalizer = (profile: Profile) => void\n\nexport class ProfileProvider {\n    private normalizeAddProfile: ProfileNormalizer\n    private normalizeMultProfile: ProfileNormalizer\n\n    public constructor(exampleSettingsNormalizer: ExampleSettingsNormalizer) {\n        this.normalizeAddProfile=this.normalizeProfile.bind(this, exampleSettingsNormalizer.normalizeAddSettings)\n        this.normalizeMultProfile=this.normalizeProfile.bind(this, exampleSettingsNormalizer.normalizeMultSettings)\n    }\n\n    public get defaultAddProfile(): Profile {\n        const add10Profile: Profile = {\n            name: 'В пределах 10',\n            exampleSettings: {\n                minValue: 1,\n                maxValue: 9,\n                minResult: 0,\n                maxResult: 0\n            }\n        }\n        this.normalizeAddProfile(add10Profile)\n\n        return add10Profile\n    }\n\n    public get addProfiles(): Profile[] {\n        const addProfiles: Profile[] = [\n            this.defaultAddProfile,\n            {\n                name: 'В пределах 20',\n                exampleSettings: {\n                    minValue: 1,\n                    maxValue: 19,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'В пределах 100',\n                exampleSettings: {\n                    minValue: 10,\n                    maxValue: 90,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'В пределах 10 000 (в столбик)',\n                exampleSettings: {\n                    minValue: 100,\n                    maxValue: 10000 - 100,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'От -100 до 100',\n                exampleSettings: {\n                    minValue: -100,\n                    maxValue: 100,\n                    minResult: -100,\n                    maxResult: 100\n                }\n            },\n        ]\n        addProfiles.map(this.normalizeAddProfile)\n\n        return addProfiles\n    }\n\n    public get defaultMultProfile(): Profile {\n        const multTableProfile: Profile = {\n            name: 'Таблица умножения',\n            exampleSettings: {\n                minValue: 1,\n                maxValue: 9,\n                minResult: 1,\n                maxResult: 81\n            }\n        }\n        this.normalizeMultProfile(multTableProfile)\n\n        return multTableProfile\n    }\n\n    public get multProfiles(): Profile[] {\n        const multProfiles: Profile[] = [\n            this.defaultMultProfile\n        ]\n        multProfiles.map(this.normalizeMultProfile)\n\n        return multProfiles\n    }\n\n    private normalizeProfile(normalizer: (exampleSettings: ExampleSettings) => void, profile: Profile): void {\n        normalizer(profile.exampleSettings)\n    }\n}\n","import {getValueBetween, getValueLessThan} from \"../NumberManipulator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class ExampleSettingsNormalizer {\n    public normalizeAddSettings(exampleSettings: ExampleSettings): void {\n        exampleSettings.minValue = getValueLessThan(exampleSettings.minValue, exampleSettings.maxValue)\n        const upperBound = exampleSettings.maxValue + exampleSettings.minValue\n        exampleSettings.minResult = getValueBetween(exampleSettings.minResult, exampleSettings.minValue * 2, upperBound)\n        exampleSettings.maxResult = getValueBetween(exampleSettings.maxResult, upperBound, exampleSettings.maxValue * 2)\n    }\n\n    public normalizeMultSettings(exampleSettings: ExampleSettings): void {\n        exampleSettings.minValue = getValueLessThan(exampleSettings.minValue, exampleSettings.maxValue)\n        const upperBound = exampleSettings.maxValue * exampleSettings.minValue\n        exampleSettings.minResult = getValueBetween(exampleSettings.minResult, exampleSettings.minValue ** 2, upperBound)\n        exampleSettings.maxResult = getValueBetween(exampleSettings.maxResult, upperBound, exampleSettings.maxValue ** 2)\n    }\n}\n","import React from \"react\";\n\ninterface Props {\n    onClick: () => void\n}\n\nexport class StartNewTaskButton extends React.Component<Props> {\n    render() {\n        return (\n            <button onClick={this.props.onClick}>\n                Продолжить решение\n            </button>\n        )\n    }\n}\n","import React from \"react\";\nimport {Task} from \"../Task/Task\";\nimport {RatingGenerator} from \"../Task/RatingGenerator\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\n\ninterface Props {\n    ratingGenerator: RatingGenerator\n    taskProvider: TaskProvider\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    public render() {\n        const task = this.props.taskProvider.getCurrentOrNewTask()\n\n        return (\n            <div>\n                <div>\n                    <StartNewTaskButton onClick={this.props.startNewTask}/>\n                </div>\n                <h1>Результаты задания</h1>\n                <ul>\n                    <li>Решено примеров: {task.solvedExamplesCount}</li>\n                    <li>Ошибок: {task.wrongExamplesCount}</li>\n                    <li>Оценка: {this.props.ratingGenerator.getRating(task)}</li>\n                </ul>\n                <h2>Примеры</h2>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>№</th>\n                        <th>Пример</th>\n                        <th>Ответ</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.showExamples(task)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n}\n","import React from \"react\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\n\ninterface Props {\n    exampleSettings: ExampleSettings\n    name: keyof ExampleSettings\n    disabled: boolean\n}\n\ninterface State {\n    value: string\n}\n\nexport class SettingInput extends React.Component<Props> {\n    public readonly state: State = {\n        value: this.props.exampleSettings[this.props.name].toString(),\n    }\n\n   public render() {\n        return (\n            <input\n                type=\"number\"\n                value={this.state.value}\n                onChange={this.changeHandler.bind(this)}\n            disabled={this.props.disabled}/>\n        )\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const exampleSettings = this.props.exampleSettings\n        const value = event.target.value\n        exampleSettings[this.props.name] = +value\n        this.setState({\n            value: value\n        })\n    }\n}\n","import React from \"react\";\nimport {SettingInput} from \"./SettingInput\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {TaskSettings} from \"../Task/TaskSettings\";\nimport {Profile} from \"../Example/Profile\";\nimport {copyValues, isEqual} from \"../ObjectManipulator\";\n\ninterface Props {\n    baseOperation: Operation.Add | Operation.Mult\n    taskSettings: TaskSettings\n    exampleSettings: ExampleSettings\n    profiles: Profile[]\n}\n\ninterface State {\n    isSettingsOpened: boolean\n    taskSettings: TaskSettings\n    exampleSettings: ExampleSettings\n}\n\nexport class OperationSettings extends React.Component<Props, State> {\n    public readonly state: State = {\n        isSettingsOpened: false,\n        taskSettings: this.props.taskSettings,\n        exampleSettings: this.props.exampleSettings,\n    }\n\n    public render() {\n        const operationCheckboxes = this.operations.map(this.renderOperationCheckbox.bind(this))\n\n        return (\n            <div>\n                <div>\n                    {operationCheckboxes}\n                </div>\n                <form>\n                    {this.props.profiles.map(this.renderProfile.bind(this))}\n                </form>\n                <div>\n                    <button onClick={(): void => this.setState({isSettingsOpened: !this.state.isSettingsOpened})}>\n                        {!this.state.isSettingsOpened ? \"Показать детальные настройки\" : \"Скрыть\"}\n                    </button>\n                </div>\n                {this.renderSettings(this.state.exampleSettings)}\n            </div>\n        )\n    }\n\n    private get operations(): Operation[] {\n        const baseOperation = this.props.baseOperation\n\n        return [baseOperation, baseOperation + 1]\n    }\n\n    private renderProfile(profile: Profile) {\n        return (\n            <label key={profile.name}>\n                <input\n                    type=\"radio\"\n                    name='profile'\n                    checked={isEqual(this.state.exampleSettings, profile.exampleSettings)}\n                    disabled={this.isInputDisabled}\n                    onChange={this.changeRadioHandler.bind(this, profile)}/>\n                {profile.name}\n            </label>\n        )\n    }\n\n    private get isInputDisabled(): boolean {\n        return !this.props\n            .taskSettings\n            .operations\n            .some((operation: Operation): boolean => this.operations.includes(operation))\n    }\n\n    private changeRadioHandler(profile: Profile): void {\n        const exampleSettings = this.state.exampleSettings\n        copyValues(exampleSettings, profile.exampleSettings)\n        this.setState({\n            exampleSettings: exampleSettings\n        })\n    }\n\n    private renderSettings(exampleSettings: ExampleSettings) {\n        const isInputDisabled=this.isInputDisabled\n        const key = JSON.stringify([isInputDisabled, exampleSettings])\n\n        return !this.state.isSettingsOpened ? '' : (\n            <table>\n                <thead>\n                <tr>\n                    <th></th>\n                    <th>Минимум</th>\n                    <th>Максимум</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <th>Значение</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minValue' key={key} disabled={isInputDisabled}/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxValue' key={key} disabled={isInputDisabled}/>\n                    </td>\n                </tr>\n                <tr>\n                    <th>Результат</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minResult' key={key} disabled={isInputDisabled}/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxResult' key={key} disabled={isInputDisabled}/>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        )\n    }\n\n    private renderOperationCheckbox(operation: Operation) {\n        const operationNames = {\n            [Operation.Add]: 'Сложение',\n            [Operation.Sub]: 'Вычитание',\n            [Operation.Mult]: 'Умножение',\n            [Operation.Div]: 'Деление',\n        }\n\n        return (\n            <label key={operation}>\n                <input\n                    type=\"checkbox\"\n                    checked={this.state.taskSettings.operations.includes(operation)}\n                    onChange={this.changeCheckboxHandler.bind(this, operation)}/>\n                {operationNames[operation]}\n            </label>\n        )\n    }\n\n    private changeCheckboxHandler(operation: Operation): void {\n        const taskSettings = this.state.taskSettings\n        const enabledOperations = taskSettings.operations\n            .filter((enabledOperation: Operation): boolean => enabledOperation !== operation)\n\n        if (!taskSettings.operations.includes(operation)) {\n            enabledOperations.push(operation)\n        }\n\n        taskSettings.operations = enabledOperations\n        this.setState({\n            taskSettings: taskSettings\n        })\n    }\n}\n","import React from \"react\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\nimport {TaskSettings} from \"../Task/TaskSettings\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\nimport {OperationSettings} from \"./OperationSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\nimport {clone} from \"../ObjectManipulator\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    profileProvider: ProfileProvider\n    startNewTask: () => void\n}\n\ninterface State {\n    examplesCount: string\n    taskSettings: TaskSettings\n}\n\nexport class TaskConfig extends React.Component<Props, State> {\n    public readonly state: State = {\n        examplesCount: this.getCurrentTaskSettings().examplesCount.toString(),\n        taskSettings: this.getCurrentTaskSettings()\n    }\n\n    public render() {\n        const taskSettings = this.state.taskSettings;\n\n        return (\n            <div>\n                <div>\n                    <StartNewTaskButton onClick={this.clickHandler.bind(this)}/>\n                </div>\n                <h1>Настройки задания</h1>\n                Количество примеров: <div>\n                <input\n                    type=\"number\"\n                    value={this.state.examplesCount}\n                    onChange={this.changeExamplesCountHandler.bind(this)}/>\n            </div>\n                <OperationSettings\n                    baseOperation={Operation.Add}\n                    taskSettings={taskSettings}\n                    exampleSettings={taskSettings.addSettings}\n                    profiles={this.props.profileProvider.addProfiles}/>\n                <OperationSettings\n                    baseOperation={Operation.Mult}\n                    taskSettings={taskSettings}\n                    exampleSettings={taskSettings.multSettings}\n                    profiles={this.props.profileProvider.multProfiles}/>\n            </div>\n        )\n    }\n\n    private changeExamplesCountHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const taskSettings = this.getNewTaskSettings()\n        const value = event.target.value\n        taskSettings.examplesCount = +value\n        this.setState({\n            examplesCount: value,\n            taskSettings: taskSettings\n        })\n    }\n\n    private getNewTaskSettings(): TaskSettings {\n        const taskSettings = this.state.taskSettings\n\n        return clone(taskSettings)\n    }\n\n    private clickHandler(): void {\n        this.props.taskSettingsManager.saveTaskSettings(this.state.taskSettings)\n        this.props.startNewTask()\n    }\n\n    private getCurrentTaskSettings(): TaskSettings {\n        return this.props.taskSettingsManager.getCurrentSettings()\n    }\n}\n","import {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {getValueBetween} from \"../NumberManipulator\";\nimport {ValuesGenerator} from \"./ValuesGenerator\";\nimport {Operation} from \"./Operation\";\n\nexport class MultGenerator extends ValuesGenerator {\n    public readonly operation: Operation = Operation.Mult\n\n    protected generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult / first, settings.maxResult / first)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult / first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './Component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}