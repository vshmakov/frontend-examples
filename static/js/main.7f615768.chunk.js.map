{"version":3,"sources":["Example/Operation.ts","Task/TaskResult.tsx","Task/TaskSettings.ts","Task/TaskConfig.tsx","Example/Solve.tsx","Example/Example.ts","Example/ExampleProvider.ts","Task/Task.ts","Task/TaskProvider.ts","Example/ExampleSettings.ts","Example/NumberManipulator.ts","Task/TaskSettingsManager.ts","Random.ts","Example/ExampleGenerator.ts","Example/CoefficientGenerator.ts","Example/ExampleValues.ts","App.tsx","Example/OperationGeneratorCollection.ts","Example/AddGenerator.ts","reportWebVitals.ts","index.tsx"],"names":["Operation","TaskResult","task","this","props","onClick","startNewTask","solvedExamplesCount","wrongExamplesCount","showExamples","examples","number","example","push","string","answer","isSolved","React","Component","TaskSettings","examplesCount","addSettings","TaskConfig","state","taskSettings","getCurrentTaskSettings","clickHandler","bind","type","value","onChange","changeExamplesCountHandler","minValue","getChangeSettingsHandler","maxValue","minResult","maxResult","event","getNewTaskSettings","target","setState","name","changeSettingsHandler","taskSettingsManager","saveTaskSettings","getCurrentSettings","Solve","getActualOrNewExample","showTaskHistory","showTaskConfig","getCurrentOrNewTask","onSubmit","submitHandler","rightExamplesCount","changeHandler","taskProvider","cleanCurrentTask","preventDefault","exampleProvider","Example","first","operation","second","signs","Add","Sub","Mult","Div","solution","exampleValues","ExampleProvider","exampleGenerator","previousExample","lastExample","hasAnswer","newExample","generate","Task","filter","length","solvedExamples","remainedExamplesCount","TaskProvider","currentTask","ExampleSettings","getValueBetween","min","max","DOMException","TaskSettingsManager","storageKey","item","localStorage","getItem","exampleSettings","JSON","parse","normalize","setItem","stringify","random","Math","floor","randomFlag","probability","ExampleGenerator","operationGeneratorCollection","coefficientGenerator","generator","getGenerator","maxCoefficient","nextExample","nextCoefficient","getUniqueCoefficient","CoefficientGenerator","uniqueCoefficient","solvedExample","ExampleValues","generators","createFromValues","generateValues","settings","minSecond","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f615768.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import React from \"react\";\nimport {Task} from \"./Task\";\n\ninterface Props {\n    task: Task\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    render() {\n        const task = this.props.task\n\n        return (\n            <div>\n                <div>\n                    <button onClick={this.props.startNewTask}>Start new task</button>\n                </div>\n                <h1>Task result</h1>\n                <ul>\n                    <li>Solved examples count: {task.solvedExamplesCount}</li>\n                    <li>Errors count: {task.wrongExamplesCount}</li>\n                </ul>\n                <h2>Examples</h2>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Example</th>\n                        <th>Answer</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.showExamples(task)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n}\n","import {ExampleSettings} from \"../Example/ExampleSettings\";\n\nexport class TaskSettings {\n    public constructor(\n        public examplesCount: number,\n        public readonly addSettings: ExampleSettings\n    ) {\n    }\n}\n","import React from \"react\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\nimport {TaskSettings} from \"./TaskSettings\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    startNewTask: () => void\n}\n\ninterface State {\n    taskSettings: TaskSettings\n}\n\nexport class TaskConfig extends React.Component<Props> {\n    public readonly state: State = {\n        taskSettings: this.getCurrentTaskSettings()\n    }\n\n    render() {\n        const taskSettings = this.state.taskSettings;\n        const addSettings = taskSettings.addSettings\n\n        return (\n            <div>\n                <div>\n                    <button onClick={this.clickHandler.bind(this)}>Start new task</button>\n                </div>\n                <h1>Task settings</h1>\n                <div>\n                    <input\n                        type=\"number\"\n                        value={taskSettings.examplesCount}\n                        onChange={this.changeExamplesCountHandler.bind(this)}/>\n                </div>\n                <table>\n                    <thead>\n                    <tr>\n                        <th></th>\n                        <th>Minimum</th>\n                        <th>Maximum</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                        <th>Value</th>\n                        <td>\n                            <input\n                                type=\"number\"\n                                value={addSettings.minValue}\n                                onChange={this.getChangeSettingsHandler('minValue')}/>\n                        </td>\n                        <td>\n                            <input\n                                type=\"number\"\n                                value={addSettings.maxValue}\n                                onChange={this.getChangeSettingsHandler('maxValue')}/>\n                        </td>\n                    </tr>\n                    <tr>\n                        <th>Result</th>\n                        <td>\n                            <input\n                                type=\"number\"\n                                value={addSettings.minResult}\n                                onChange={this.getChangeSettingsHandler('minResult')}/>\n                        </td>\n                        <td>\n                            <input\n                                type=\"number\"\n                                value={addSettings.maxResult}\n                                onChange={this.getChangeSettingsHandler('maxResult')}/>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private changeExamplesCountHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const taskSettings = this.getNewTaskSettings()\n        taskSettings.examplesCount = +event.target.value\n        this.setState({\n            taskSettings: taskSettings\n        })\n    }\n\n    private getNewTaskSettings(): TaskSettings {\n        const taskSettings = this.state.taskSettings\n\n        return new TaskSettings(taskSettings.examplesCount, taskSettings.addSettings)\n    }\n\n    private getChangeSettingsHandler(name: keyof ExampleSettings): (event: React.ChangeEvent<HTMLInputElement>) => void {\n        return (event: React.ChangeEvent<HTMLInputElement>): void => this.changeSettingsHandler(event, name)\n    }\n\n    private changeSettingsHandler(event: React.ChangeEvent<HTMLInputElement>, name: keyof ExampleSettings): void {\n        const taskSettings = this.getNewTaskSettings()\n        taskSettings.addSettings[name] = +event.target.value\n        this.setState({\n            taskSettings: taskSettings\n        })\n    }\n\n    private clickHandler(): void {\n        this.props.taskSettingsManager.saveTaskSettings(this.state.taskSettings)\n        this.props.startNewTask()\n    }\n\n    private getCurrentTaskSettings(): TaskSettings {\n        return this.props.taskSettingsManager.getCurrentSettings()\n    }\n}\n","import {Example} from \"./Example\";\nimport React from \"react\";\nimport {TaskResult} from \"../Task/TaskResult\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {ExampleProvider} from \"./ExampleProvider\";\nimport {Task} from \"../Task/Task\";\nimport {TaskConfig} from \"../Task/TaskConfig\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    taskProvider: TaskProvider\n    exampleProvider: ExampleProvider\n}\n\ninterface State {\n    example: Example\n    answer: string\n    showTaskHistory: boolean\n    showTaskConfig: boolean\n}\n\nexport class Solve extends React.Component<Props, State> {\n    public readonly state: State = {\n        example: this.getActualOrNewExample(),\n        answer: '',\n        showTaskHistory: false,\n        showTaskConfig: false,\n    }\n\n    public render() {\n        if (this.state.showTaskConfig) {\n            return <TaskConfig startNewTask={this.startNewTask.bind(this)} taskSettingsManager={this.props.taskSettingsManager}/>\n        }\n\n        const task = this.getCurrentOrNewTask()\n\n        if (this.state.showTaskHistory) {\n            return <TaskResult task={task} startNewTask={this.startNewTask.bind(this)}/>\n        }\n\n                return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Example #{task.rightExamplesCount} from {task.taskSettings.examplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Answer</button>\n                </form>\n                <div>\n                    <button onClick={this.clickHandler.bind(this)}>Change settings</button>\n                </div>\n            </div>\n        )\n    }\n\n    private startNewTask(): void {\n        this.props.taskProvider.cleanCurrentTask()\n        this.setState({\n            example: this.getActualOrNewExample(),\n            showTaskHistory: false,\n            showTaskConfig: false\n        })\n    }\n\n    private clickHandler(): void {\n        this.setState({\n            showTaskConfig: true\n        })\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (this.getCurrentOrNewTask().isSolved) {\n            this.setState({\n                showTaskHistory: true\n            })\n\n            return\n        }\n\n        this.setState({\n            example: this.getActualOrNewExample()\n        })\n    }\n\n    private getCurrentOrNewTask(): Task {\n        return this.props.taskProvider.getCurrentOrNewTask();\n    }\n\n    private getActualOrNewExample(): Example {\n        return this.props.exampleProvider.getActualOrNewExample(this.getCurrentOrNewTask())\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {ExampleValues} from \"./ExampleValues\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public static createFromValues(exampleValues: ExampleValues, operation: Operation): Example {\n        return new Example(exampleValues.first, operation, exampleValues.second)\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solution\n    }\n\n    public get solution(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\nimport {ExampleGenerator} from \"./ExampleGenerator\";\n\nexport class ExampleProvider {\n    public constructor(private readonly exampleGenerator: ExampleGenerator) {\n    }\n\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = this.exampleGenerator.generate(task)\n\n        if (null !== previousExample && !previousExample?.isSolved) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.examples.push(newExample)\n\n        return newExample\n    }\n}\n","import {Example} from \"../Example/Example\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly taskSettings: TaskSettings\n    ) {\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.solvedExamples.length\n    }\n\n    public get solvedExamples(): Example[] {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.taskSettings.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {Task} from \"./Task\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly taskSettingsManager: TaskSettingsManager) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.taskSettingsManager.getCurrentSettings()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","export class ExampleSettings {\n    public constructor(\n        public minValue: number,\n        public maxValue: number,\n        public minResult: number,\n        public maxResult: number,\n    ) {\n    }\n}\n","export function getValueBetween(value: number, min: number, max: number): number {\n    if (min > max) {\n        throw new DOMException(`${min} is greater than ${max}`)\n    }\n\n    if (value < min) {\n        return min\n    }\n\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n\nexport function getValueLessThan(value: number, max: number): number {\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n","import {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {TaskSettings} from \"./TaskSettings\";\nimport {getValueBetween, getValueLessThan} from \"../Example/NumberManipulator\";\n\nexport class TaskSettingsManager {\n    private readonly storageKey = 'task-settings';\n\n    public getCurrentSettings(): TaskSettings {\n        const item = localStorage.getItem(this.storageKey)\n\n        if (null === item) {\n            const exampleSettings = new ExampleSettings(1, 9, 1, 10)\n            const defaultTaskSettings = new TaskSettings(20, exampleSettings)\n\n            return defaultTaskSettings\n        }\n\n        const taskSettings = JSON.parse(item)\n\n        return taskSettings\n    }\n\n    public saveTaskSettings(taskSettings: TaskSettings): void {\n        this.normalize(taskSettings)\n        localStorage.setItem(this.storageKey, JSON.stringify(taskSettings))\n    }\n\n    private normalize(taskSettings: TaskSettings): void {\n        if (taskSettings.examplesCount < 1) {\n            taskSettings.examplesCount = 1\n        }\n\n        const addSettings = taskSettings.addSettings\n\n        addSettings.minValue = getValueLessThan(addSettings.minValue, addSettings.maxValue)\n        addSettings.minResult = getValueBetween(addSettings.minResult, addSettings.minValue * 2, addSettings.maxValue * 2)\n        addSettings.maxResult = getValueBetween(addSettings.maxResult, addSettings.minValue * 2, addSettings.maxValue * 2)\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function randomFlag(probability: number): boolean {\n    return probability / 100 <= Math.random()\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\nimport {randomFlag} from \"../Random\";\nimport {Task} from \"../Task/Task\";\nimport {CoefficientGenerator} from \"./CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./OperationGeneratorCollection\";\n\nexport class ExampleGenerator {\n    public constructor(\n        private readonly operationGeneratorCollection: OperationGeneratorCollection,\n        private readonly coefficientGenerator: CoefficientGenerator\n    ) {\n    }\n\n    public generate(task: Task): Example {\n        const generator = this.operationGeneratorCollection.getGenerator(Operation.Add)\n        const exampleSettings = task.taskSettings.addSettings\n        let example = generator.generate(exampleSettings)\n\n        if (randomFlag(15)) {\n            return example\n        }\n\n        let maxCoefficient = 0\n\n        for (let number = 1; number <= 100; number++) {\n            const nextExample = generator.generate(exampleSettings)\n            const nextCoefficient = this.coefficientGenerator.getUniqueCoefficient(nextExample, task)\n\n            if (nextCoefficient > maxCoefficient) {\n                example = nextExample\n                maxCoefficient = nextCoefficient\n            }\n        }\n\n        return example\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\n\nexport class CoefficientGenerator {\n    public getUniqueCoefficient(example: Example, task: Task): number {\n        let uniqueCoefficient = 1\n        const solvedExamples = task.solvedExamples\n        const solvedExamplesCount = solvedExamples.length || 1\n\n        for (let solvedExample of solvedExamples) {\n            if (example.first === solvedExample.first && example.operation === solvedExample.operation && example.second === solvedExample.second) {\n                uniqueCoefficient -= 60 / 100 / solvedExamplesCount\n            }\n\n            if (example.solution === solvedExample.solution) {\n                uniqueCoefficient -= 40 / 100 / solvedExamplesCount\n            }\n        }\n\n        return uniqueCoefficient\n    }\n}\n","export class ExampleValues {\n    public constructor(\n        public readonly first: number,\n        public readonly second: number\n    ) {\n    }\n}\n","import React from 'react';\nimport {Solve} from \"./Example/Solve\";\nimport {ExampleProvider} from \"./Example/ExampleProvider\";\nimport {TaskProvider} from \"./Task/TaskProvider\";\nimport {TaskSettingsManager} from \"./Task/TaskSettingsManager\";\nimport {ExampleGenerator} from './Example/ExampleGenerator'\nimport {CoefficientGenerator} from \"./Example/CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./Example/OperationGeneratorCollection\";\nimport {AddGenerator} from \"./Example/AddGenerator\";\n\nconst operationGeneratorCollection = new OperationGeneratorCollection([new AddGenerator()])\nconst coefficientGenerator = new CoefficientGenerator()\nconst exampleGenerator = new ExampleGenerator(operationGeneratorCollection, coefficientGenerator)\nconst exampleProvider = new ExampleProvider(exampleGenerator)\nconst taskSettingsManager = new TaskSettingsManager()\nconst taskProvider = new TaskProvider(taskSettingsManager)\n\nexport default function App() {\n    return (\n        <Solve\n            taskProvider={taskProvider}\n            taskSettingsManager={taskSettingsManager}\n            exampleProvider={exampleProvider}/>\n    )\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\n\nexport class OperationGeneratorCollection {\n    public constructor(private readonly generators: OperationGenerator[]) {\n    }\n\n    public getGenerator(operation: Operation): OperationGenerator {\nfor (let generator of this.generators){\n    if (operation===generator.operation){\n        return  generator\n    }\n}\n\n    throw new DOMException(`Generator with ${operation} does not exist`)\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {Example} from \"./Example\";\nimport {getValueBetween} from \"./NumberManipulator\";\n\nexport class AddGenerator implements OperationGenerator {\n    public readonly operation: Operation = Operation.Add\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        return Example.createFromValues(this.generateValues(exampleSettings), this.operation)\n    }\n\n    private generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult - first, settings.minValue)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult - first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Solve from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Solve />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}