{"version":3,"sources":["Example/Operation.ts","Example/Example.ts","Random.ts","Example/ExampleProvider.ts","Profile/Profile.ts","Profile/ProfileProvider.ts","Task/Task.ts","Task/TaskProvider.ts","container.ts","Task/TaskResult.tsx","Example/Solve.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Operation","Example","first","operation","second","answer","this","signs","Add","Sub","Mult","Div","solved","random","min","max","Math","floor","ExampleProvider","task","previousExample","lastExample","hasAnswer","newExample","isSolved","examples","push","Profile","name","examplesCount","ProfileProvider","Task","profile","solvedExamplesCount","filter","example","length","remainedExamplesCount","TaskProvider","profileProvider","currentTask","getCurrentProfile","exampleProvider","taskProvider","TaskResult","getCurrentOrNewTask","wrongExamplesCount","onClick","clickHandler","bind","showExamples","number","string","cleanCurrentTask","props","startNewTask","React","Component","Solve","state","getActualOrNewExample","showTaskHistory","onSubmit","submitHandler","rightExamplesCount","type","value","onChange","changeHandler","setState","event","target","preventDefault","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac1b0f05.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import {Operation} from \"./Operation\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solved\n    }\n\n    private get solved(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import {Example} from \"./Example\";\nimport {random} from \"../Random\";\nimport {Operation} from \"./Operation\";\nimport {Task} from \"../Task/Task\";\n\nexport class ExampleProvider {\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = new Example(\n            random(1, 10),\n            random(Operation.Add, Operation.Sub),\n            random(1, 10),\n        )\n\n        if (null !== previousExample && !previousExample?.isSolved) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.examples.push(newExample)\n\n        return newExample\n    }\n}\n","export class Profile {\n    public constructor(\n        public readonly name: string,\n    public readonly examplesCount: number,\n    ) {\n    }\n}\n","import {Profile} from \"./Profile\";\n\nexport class ProfileProvider {\n    public getCurrentProfile(): Profile {\nreturn new Profile(\n    'Default profile',\n    2\n)\n    }\n}\n","import {Profile} from \"../Profile/Profile\"\nimport {Example} from \"../Example/Example\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly profile: Profile\n    ) {\n    }\n\n        public get rightExamplesCount(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n            .length\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.profile.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {ProfileProvider} from \"../Profile/ProfileProvider\";\nimport {Task} from \"./Task\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly profileProvider: ProfileProvider) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.profileProvider.getCurrentProfile()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","import {ExampleProvider} from \"./Example/ExampleProvider\";\nimport {ProfileProvider} from \"./Profile/ProfileProvider\";\nimport {TaskProvider} from \"./Task/TaskProvider\";\n\nexport const exampleProvider = new ExampleProvider()\nexport const taskProvider = new TaskProvider(new ProfileProvider())\n","import React from \"react\";\nimport {taskProvider} from \"../container\";\nimport {Task} from \"./Task\";\n\ninterface Props {\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    render() {\n        const currentTask = taskProvider.getCurrentOrNewTask()\n\n        return (\n            <div>\n                <h1>Task result</h1>\n                <ul>\n                    <li>Solved examples count: {currentTask.solvedExamplesCount}</li>\n                    <li>Errors count: {currentTask.wrongExamplesCount}</li>\n                </ul>\n                <div>\n                    <button onClick={this.clickHandler.bind(this)}>Start new task</button>\n                </div>\n                <h2>Examples</h2>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Example</th>\n                        <th>Answer</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.showExamples(currentTask)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n\n    private clickHandler(): void {\n        taskProvider.cleanCurrentTask()\n        this.props.startNewTask()\n    }\n}\n","import {Example} from \"./Example\";\nimport React from \"react\";\nimport {exampleProvider, taskProvider} from \"../container\";\nimport {TaskResult} from \"../Task/TaskResult\";\n\ninterface State {\n    example: Example\n    answer: string\n    showTaskHistory: boolean\n}\n\nexport class Solve extends React.Component<{}, State> {\n    public readonly state: State = {\n        example: exampleProvider.getActualOrNewExample(taskProvider.getCurrentOrNewTask()),\n        answer: '',\n        showTaskHistory: false,\n    }\n\n    public render() {\n        if (this.state.showTaskHistory) {\n            return <TaskResult startNewTask={this.startNewTask.bind(this)}/>\n        }\n\n        const currentTask = taskProvider.getCurrentOrNewTask()\n\n        return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Example #{currentTask.rightExamplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Answer</button>\n                </form>\n                <ul>\n                    <li>Remained examples count: {currentTask.remainedExamplesCount}</li>\n                </ul>\n            </div>\n        )\n            ;\n    }\n\n    private startNewTask(): void {\n        this.setState({\n            example: exampleProvider.getActualOrNewExample(taskProvider.getCurrentOrNewTask()),\n            showTaskHistory: false,\n        })\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (taskProvider.getCurrentOrNewTask().isSolved) {\n            this.setState({\n                showTaskHistory: true\n            })\n\n            return\n        }\n\n        this.setState({\n            example: exampleProvider.getActualOrNewExample(taskProvider.getCurrentOrNewTask())\n        })\n    }\n}\n","import React from 'react';\nimport {Solve} from \"./Example/Solve\";\n\nexport default function App() {\n    return (\n        <Solve/>\n    )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Solve from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Solve />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}