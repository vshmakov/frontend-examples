{"version":3,"sources":["Example/Operation.ts","Task/TaskResult.tsx","Task/TaskConfig.tsx","Example/Solve.tsx","Example/Example.ts","Example/ExampleProvider.ts","Task/Task.ts","Task/TaskProvider.ts","Example/ExampleSettings.ts","Task/TaskSettings.ts","Task/TaskSettingsProvider.ts","Random.ts","Example/ExampleGenerator.ts","Example/CoefficientGenerator.ts","Example/ExampleValues.ts","App.tsx","Example/OperationGeneratorCollection.ts","Example/AddGenerator.ts","reportWebVitals.ts","index.tsx"],"names":["Operation","TaskResult","task","this","props","onClick","startNewTask","solvedExamplesCount","wrongExamplesCount","showExamples","examples","number","example","push","string","answer","isSolved","React","Component","TaskConfig","currentSettings","taskSettingsProvider","getCurrentSettings","type","value","examplesCount","Solve","state","getActualOrNewExample","showTaskHistory","showTaskConfig","bind","getCurrentOrNewTask","onSubmit","submitHandler","rightExamplesCount","taskSettings","onChange","changeHandler","clickHandler","taskProvider","cleanCurrentTask","setState","event","target","preventDefault","exampleProvider","Example","first","operation","second","signs","Add","Sub","Mult","Div","solution","exampleValues","ExampleProvider","exampleGenerator","previousExample","lastExample","hasAnswer","newExample","generate","Task","filter","length","solvedExamples","remainedExamplesCount","TaskProvider","currentTask","ExampleSettings","minValue","maxValue","minResult","maxResult","TaskSettings","exampleSettings","TaskSettingsProvider","random","min","max","Math","floor","randomFlag","probability","ExampleGenerator","operationGeneratorCollection","coefficientGenerator","generator","getGenerator","maxCoefficient","nextExample","nextCoefficient","getUniqueCoefficient","CoefficientGenerator","uniqueCoefficient","solvedExample","ExampleValues","generators","DOMException","createFromValues","generateValues","settings","minSecond","getValueBetween","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b59e1ea2.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import React from \"react\";\nimport {Task} from \"./Task\";\n\ninterface Props {\n    task: Task\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    render() {\n        const task = this.props.task\n\n        return (\n            <div>\n                <div>\n                    <button onClick={this.props.startNewTask}>Start new task</button>\n                </div>\n                <h1>Task result</h1>\n                <ul>\n                    <li>Solved examples count: {task.solvedExamplesCount}</li>\n                    <li>Errors count: {task.wrongExamplesCount}</li>\n                </ul>\n                <h2>Examples</h2>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Example</th>\n                        <th>Answer</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.showExamples(task)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n}\n","import React from \"react\";\nimport {TaskSettingsProvider} from \"./TaskSettingsProvider\";\n\ninterface Props {\n    taskSettingsProvider: TaskSettingsProvider\n    startNewTask: () => void\n}\n\nexport class TaskConfig extends React.Component<Props> {\n    render() {\n        const currentSettings = this.props.taskSettingsProvider.getCurrentSettings()\n\n        return (\n            <div>\n                <div>\n                    <button onClick={this.props.startNewTask}>Start new task</button>\n                </div>\n                <h1>Task settings</h1>\n                <form>\n                    <input type=\"number\" value={currentSettings.examplesCount}/>\n                </form>\n            </div>\n        )\n    }\n}\n","import {Example} from \"./Example\";\nimport React from \"react\";\nimport {TaskResult} from \"../Task/TaskResult\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {ExampleProvider} from \"./ExampleProvider\";\nimport {Task} from \"../Task/Task\";\nimport {TaskConfig} from \"../Task/TaskConfig\";\nimport {TaskSettingsProvider} from \"../Task/TaskSettingsProvider\";\n\ninterface Props {\n    taskSettingsProvider: TaskSettingsProvider\n    taskProvider: TaskProvider\n    exampleProvider: ExampleProvider\n}\n\ninterface State {\n    example: Example\n    answer: string\n    showTaskHistory: boolean\n    showTaskConfig: boolean\n}\n\nexport class Solve extends React.Component<Props, State> {\n    public readonly state: State = {\n        example: this.getActualOrNewExample(),\n        answer: '',\n        showTaskHistory: false,\n        showTaskConfig: false,\n    }\n\n    public render() {\n        if (this.state.showTaskConfig) {\n            return <TaskConfig startNewTask={this.startNewTask.bind(this)} taskSettingsProvider={this.props.taskSettingsProvider}/>\n        }\n\n        const task = this.getCurrentOrNewTask()\n\n        if (this.state.showTaskHistory) {\n            return <TaskResult task={task} startNewTask={this.startNewTask.bind(this)}/>\n        }\n\n                return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Example #{task.rightExamplesCount} from {task.taskSettings.examplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Answer</button>\n                </form>\n                <div>\n                    <button onClick={this.clickHandler.bind(this)}>Change settings</button>\n                </div>\n            </div>\n        )\n    }\n\n    private startNewTask(): void {\n        this.props.taskProvider.cleanCurrentTask()\n        this.setState({\n            example: this.getActualOrNewExample(),\n            showTaskHistory: false,\n            showTaskConfig: false\n        })\n    }\n\n    private clickHandler(): void {\n        this.setState({\n            showTaskConfig: true\n        })\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (this.getCurrentOrNewTask().isSolved) {\n            this.setState({\n                showTaskHistory: true\n            })\n\n            return\n        }\n\n        this.setState({\n            example: this.getActualOrNewExample()\n        })\n    }\n\n    private getCurrentOrNewTask(): Task {\n        return this.props.taskProvider.getCurrentOrNewTask();\n    }\n\n    private getActualOrNewExample(): Example {\n        return this.props.exampleProvider.getActualOrNewExample(this.getCurrentOrNewTask())\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {ExampleValues} from \"./ExampleValues\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public static createFromValues(exampleValues: ExampleValues, operation: Operation): Example {\n        return new Example(exampleValues.first, operation, exampleValues.second)\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solution\n    }\n\n    public get solution(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\nimport {ExampleGenerator} from \"./ExampleGenerator\";\n\nexport class ExampleProvider {\n    public constructor(private readonly exampleGenerator: ExampleGenerator) {\n    }\n\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = this.exampleGenerator.generate(task)\n\n        if (null !== previousExample && !previousExample?.isSolved) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.examples.push(newExample)\n\n        return newExample\n    }\n}\n","import {Example} from \"../Example/Example\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly taskSettings: TaskSettings\n    ) {\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.solvedExamples.length\n    }\n\n    public get solvedExamples(): Example[] {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.taskSettings.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {Task} from \"./Task\";\nimport {TaskSettingsProvider} from \"./TaskSettingsProvider\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly taskSettingsProvider: TaskSettingsProvider) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.taskSettingsProvider.getCurrentSettings()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","export class ExampleSettings {\n    public constructor(\n        public readonly minValue: number,\n        public readonly maxValue: number,\n        public readonly minResult: number,\n        public readonly maxResult: number,\n    ) {\n    }\n}\n","import {ExampleSettings} from \"../Example/ExampleSettings\";\n\nexport class TaskSettings {\n    public constructor(\n        public readonly examplesCount: number,\n        public readonly exampleSettings: ExampleSettings\n    ) {\n    }\n}\n","import {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class TaskSettingsProvider {\n    public getCurrentSettings(): TaskSettings {\n        return new TaskSettings(20, new ExampleSettings(1, 9, 1, 10))\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function randomFlag(probability: number): boolean {\n    return probability / 100 <= Math.random()\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\nimport {randomFlag} from \"../Random\";\nimport {Task} from \"../Task/Task\";\nimport {CoefficientGenerator} from \"./CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./OperationGeneratorCollection\";\n\nexport class ExampleGenerator {\n    public constructor(\n        private readonly operationGeneratorCollection: OperationGeneratorCollection,\n        private readonly coefficientGenerator: CoefficientGenerator\n    ) {\n    }\n\n    public generate(task: Task): Example {\n        const generator = this.operationGeneratorCollection.getGenerator(Operation.Add)\n        const exampleSettings = task.taskSettings.exampleSettings\n        let example = generator.generate(exampleSettings)\n\n        if (randomFlag(15)) {\n            return example\n        }\n\n        let maxCoefficient = 0\n\n        for (let number = 1; number <= 100; number++) {\n            const nextExample = generator.generate(exampleSettings)\n            const nextCoefficient = this.coefficientGenerator.getUniqueCoefficient(nextExample, task)\n\n            if (nextCoefficient > maxCoefficient) {\n                example = nextExample\n                maxCoefficient = nextCoefficient\n            }\n        }\n\n        return example\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\n\nexport class CoefficientGenerator {\n    public getUniqueCoefficient(example: Example, task: Task): number {\n        let uniqueCoefficient = 1\n        const solvedExamples = task.solvedExamples\n        const solvedExamplesCount = solvedExamples.length || 1\n\n        for (let solvedExample of solvedExamples) {\n            if (example.first === solvedExample.first && example.operation === solvedExample.operation && example.second === solvedExample.second) {\n                uniqueCoefficient -= 60 / 100 / solvedExamplesCount\n            }\n\n            if (example.solution === solvedExample.solution) {\n                uniqueCoefficient -= 40 / 100 / solvedExamplesCount\n            }\n        }\n\n        return uniqueCoefficient\n    }\n}\n","export class ExampleValues {\n    public constructor(\n        public readonly first: number,\n        public readonly second: number\n    ) {\n    }\n}\n","import React from 'react';\nimport {Solve} from \"./Example/Solve\";\nimport {ExampleProvider} from \"./Example/ExampleProvider\";\nimport {TaskProvider} from \"./Task/TaskProvider\";\nimport {TaskSettingsProvider} from \"./Task/TaskSettingsProvider\";\nimport {ExampleGenerator} from './Example/ExampleGenerator'\nimport {CoefficientGenerator} from \"./Example/CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./Example/OperationGeneratorCollection\";\nimport {AddGenerator} from \"./Example/AddGenerator\";\n\nconst operationGeneratorCollection = new OperationGeneratorCollection([new AddGenerator()])\nconst coefficientGenerator = new CoefficientGenerator()\nconst exampleGenerator = new ExampleGenerator(operationGeneratorCollection, coefficientGenerator)\nconst exampleProvider = new ExampleProvider(exampleGenerator)\nconst taskSettingsProvider = new TaskSettingsProvider()\nconst taskProvider = new TaskProvider(taskSettingsProvider)\n\nexport default function App() {\n    return (\n        <Solve\n            taskProvider={taskProvider}\n            taskSettingsProvider={taskSettingsProvider}\n            exampleProvider={exampleProvider}/>\n    )\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\n\nexport class OperationGeneratorCollection {\n    public constructor(private readonly generators: OperationGenerator[]) {\n    }\n\n    public getGenerator(operation: Operation): OperationGenerator {\nfor (let generator of this.generators){\n    if (operation===generator.operation){\n        return  generator\n    }\n}\n\n    throw new DOMException(`Generator with ${operation} does not exist`)\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {Example} from \"./Example\";\n\nexport class AddGenerator implements OperationGenerator {\n    public readonly operation: Operation = Operation.Add\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        return Example.createFromValues(this.generateValues(exampleSettings), this.operation)\n    }\n\n    private generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = this.getValueBetween(settings.minValue, settings.minResult - first, settings.minValue)\n        const maxSecond = this.getValueBetween(settings.maxValue, minSecond, settings.maxResult - first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n\n    private getValueBetween(value: number, min: number, max: number): number {\n        if (min > max) {\n            throw new DOMException(`${min} is greater than ${max}`)\n        }\n\n        if (value < min) {\n            return min\n        }\n\n        if (value > max) {\n            return max\n        }\n\n        return value\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Solve from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Solve />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}