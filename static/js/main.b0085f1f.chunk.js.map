{"version":3,"sources":["Component/TaskResult.module.css","Example/Operation.ts","Component/Solve.tsx","Example/Example.ts","Example/ExampleProvider.ts","Task/Task.ts","Task/TaskProvider.ts","Task/TaskSettingsManager.ts","Random.ts","Example/ExampleGenerator.ts","Example/CoefficientGenerator.ts","Example/OperationGeneratorCollection.ts","Example/ExampleValues.ts","NumberManipulator.ts","Example/ValuesGenerator.ts","Example/AddGenerator.ts","ObjectManipulator.ts","Task/RatingGenerator.ts","Component/App.tsx","Example/RevertGenerator.ts","Task/TaskSettingsNormalizer.ts","Example/ProfileProvider.ts","Example/ExampleSettingsNormalizer.ts","Component/StartNewTaskButton.tsx","Component/TaskResult.tsx","Component/SettingInput.tsx","Component/OperationSettings.tsx","Component/TaskConfig.tsx","Example/MultGenerator.ts","reportWebVitals.ts","index.tsx","Component/OperationSettings.module.css","Component/Solve.module.css"],"names":["module","exports","Operation","Solve","state","example","getActualOrNewExample","answer","task","this","getCurrentOrNewTask","className","title","css","options_btn","xmlns","width","height","viewBox","onClick","props","openConfiguration","id","transform","data-name","d","fill","onSubmit","submitHandler","bind","name","currentExampleNumber","taskSettings","examplesCount","state_example_string","string","answer_input_answer_wrap","input_text","type","value","onChange","changeHandler","answer_btn_agree","x2","y2","stroke","strokeLinecap","strokeWidth","y1","event","setState","target","preventDefault","isSolved","openTaskResult","taskProvider","exampleProvider","React","Component","Example","first","operation","second","signs","Add","Sub","Mult","Div","solution","exampleValues","ExampleProvider","exampleGenerator","previousExample","lastExample","hasAnswer","newExample","generate","examples","push","Task","solvedExamplesCount","filter","length","wrongExamplesCount","solvedExamples","remainedExamplesCount","TaskProvider","taskSettingsManager","currentTask","getCurrentSettings","storageKey","TaskSettingsManager","taskSettingsNormalizer","profileProvider","item","localStorage","getItem","operations","addSettings","defaultAddProfile","exampleSettings","multSettings","defaultMultProfile","JSON","parse","normalize","setItem","stringify","random","min","max","Math","floor","randomFlag","probability","ExampleGenerator","operationGeneratorCollection","coefficientGenerator","getOperation","generator","getGenerator","includes","maxCoefficient","number","nextExample","nextCoefficient","getUniqueCoefficient","CoefficientGenerator","uniqueCoefficient","solvedExample","OperationGeneratorCollection","generators","DOMException","ExampleValues","getValueBetween","getValueLessThan","ValuesGenerator","createFromValues","generateValues","AddGenerator","settings","minValue","maxValue","minSecond","minResult","maxResult","getObjectKeys","object","Object","keys","isEqual","object1","object2","key","Page","RatingGenerator","coefficients","coeeficients","getTaskCoefficients","rating","rightExamplesCount","index","reduce","previousExamplesCount","standardExamplesCount","map","round","RevertGenerator","originalGenerator","TaskSettingsNormalizer","exampleSettingsNormalizer","normalizeAddSettings","normalizeMultSettings","ProfileProvider","normalizeAddProfile","normalizeMultProfile","normalizeProfile","add10Profile","addProfiles","multTableProfile","getMultProfile","multProfiles","normalizer","profile","ExampleSettingsNormalizer","upperBound","forEach","StartNewTaskButton","x1","TaskResult","startNewTask","ratingGenerator","getRating","result_table","showExamples","SettingInput","toString","disabled","OperationSettings","isSettingsOpened","operationCheckboxes","renderOperationCheckbox","settings_container","operation_checkboxes_list","profiles","renderProfile","settings_opened","settings_btn","settings_arrow","renderSettings","baseOperation","isInputDisabled","input_radio_wrap","checked","changeRadioHandler","some","source","copyValues","operationNames","main_operation_checkox_block","main_operation_checkox","changeCheckboxHandler","htmlFor","enabledOperations","enabledOperation","TaskConfig","getCurrentTaskSettings","clickHandler","changeExamplesCountHandler","saveTaskSettings","MultGenerator","addGenerator","multGenerator","App","page","router","openPage","cleanCurrentTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0085f1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"result_table\":\"TaskResult_result_table__2lDMu\"};","export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import {Example} from \"../Example/Example\";\nimport React from \"react\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {ExampleProvider} from \"../Example/ExampleProvider\";\nimport {Task} from \"../Task/Task\";\nimport css from './Solve.module.css';\n\ninterface Props {\n    taskProvider: TaskProvider\n    exampleProvider: ExampleProvider\n    openConfiguration: () => void\n    openTaskResult: () => void\n}\n\ninterface State {\n    example: Example\n    answer: string\n}\n\nexport class Solve extends React.Component<Props, State> {\n    public readonly state: State = {\n        example: this.getActualOrNewExample(),\n        answer: '',\n    }\n\n    public render() {\n        const task = this.getCurrentOrNewTask()\n\n        return (\n            <div className='wrap'>\n                <div className='header'>\n                    <h1>Задание</h1>\n                    <button title=\"прервать выполнение текущего задания и настроить новое\">\n                        <svg className={css.options_btn + ' header_btn'} xmlns=\"http://www.w3.org/2000/svg\" width=\"30.548\" height=\"30.548\" viewBox=\"0 0 30.548 30.548\"  onClick={this.props.openConfiguration}>\n                            <g id=\"settings\" transform=\"translate(0 0)\">\n                                <path id=\"Контур_6\" data-name=\"Контур 6\" d=\"M16.233,30.548H14.316A2.815,2.815,0,0,1,11.5,27.736v-.649a12.333,12.333,0,0,1-1.915-.795l-.46.46a2.812,2.812,0,0,1-3.978,0L3.8,25.4a2.812,2.812,0,0,1,0-3.978l.459-.459a12.333,12.333,0,0,1-.795-1.915H2.812A2.815,2.815,0,0,1,0,16.233V14.316A2.815,2.815,0,0,1,2.812,11.5h.649a12.336,12.336,0,0,1,.795-1.915l-.46-.46a2.812,2.812,0,0,1,0-3.978L5.152,3.8a2.812,2.812,0,0,1,3.977,0l.459.459A12.344,12.344,0,0,1,11.5,3.461V2.812A2.815,2.815,0,0,1,14.316,0h1.917a2.815,2.815,0,0,1,2.812,2.812v.649a12.332,12.332,0,0,1,1.915.795l.46-.46a2.812,2.812,0,0,1,3.978,0l1.355,1.355a2.812,2.812,0,0,1,0,3.978l-.459.459a12.333,12.333,0,0,1,.795,1.915h.649a2.815,2.815,0,0,1,2.812,2.812v1.917a2.815,2.815,0,0,1-2.812,2.812h-.649a12.336,12.336,0,0,1-.795,1.915l.46.46a2.812,2.812,0,0,1,0,3.978L25.4,26.752a2.812,2.812,0,0,1-3.977,0l-.459-.459a12.344,12.344,0,0,1-1.915.795v.649A2.815,2.815,0,0,1,16.233,30.548ZM9.887,24.413a10.549,10.549,0,0,0,2.734,1.135.9.9,0,0,1,.671.867v1.321a1.023,1.023,0,0,0,1.022,1.022h1.917a1.023,1.023,0,0,0,1.022-1.022V26.415a.9.9,0,0,1,.671-.867,10.549,10.549,0,0,0,2.734-1.135.9.9,0,0,1,1.088.138l.936.936a1.022,1.022,0,0,0,1.445,0l1.356-1.356a1.022,1.022,0,0,0,0-1.445l-.936-.936a.9.9,0,0,1-.138-1.088,10.548,10.548,0,0,0,1.135-2.734.9.9,0,0,1,.867-.671h1.321a1.023,1.023,0,0,0,1.022-1.022V14.316a1.023,1.023,0,0,0-1.022-1.022H26.415a.9.9,0,0,1-.867-.671,10.55,10.55,0,0,0-1.135-2.734A.9.9,0,0,1,24.551,8.8l.936-.936a1.022,1.022,0,0,0,0-1.445L24.131,5.062a1.022,1.022,0,0,0-1.445,0L21.749,6a.9.9,0,0,1-1.088.138A10.549,10.549,0,0,0,17.927,5a.9.9,0,0,1-.671-.867V2.812A1.023,1.023,0,0,0,16.233,1.79H14.316a1.023,1.023,0,0,0-1.022,1.022V4.134A.9.9,0,0,1,12.622,5,10.549,10.549,0,0,0,9.888,6.135.9.9,0,0,1,8.8,6l-.936-.936a1.022,1.022,0,0,0-1.445,0L5.062,6.417a1.022,1.022,0,0,0,0,1.445L6,8.8a.9.9,0,0,1,.138,1.088A10.548,10.548,0,0,0,5,12.622a.9.9,0,0,1-.867.671H2.812A1.024,1.024,0,0,0,1.79,14.316v1.917a1.023,1.023,0,0,0,1.022,1.022H4.134A.9.9,0,0,1,5,17.926a10.55,10.55,0,0,0,1.135,2.734A.9.9,0,0,1,6,21.749l-.936.936a1.022,1.022,0,0,0,0,1.445l1.356,1.356a1.022,1.022,0,0,0,1.445,0l.936-.936a.9.9,0,0,1,1.089-.137Z\" fill=\"#758eb1\"/>\n                                <path id=\"Контур_7\" data-name=\"Контур 7\" d=\"M151.247,157.893a6.647,6.647,0,1,1,6.647-6.647A6.654,6.654,0,0,1,151.247,157.893Zm0-11.5a4.857,4.857,0,1,0,4.857,4.857A4.862,4.862,0,0,0,151.247,146.39Z\" transform=\"translate(-135.972 -135.972)\" fill=\"#758eb1\"/>\n                            </g>\n                        </svg>\n                    </button>\n                </div>\n                <div className='container'>\n                    <form onSubmit={this.submitHandler.bind(this)}>\n                        <div className={css.name}>\n                            <h2>Пример №{task.currentExampleNumber} из {task.taskSettings.examplesCount}</h2>\n                        </div>\n                        <div className={css.state_example_string}>{this.state.example.string} = </div>\n                        <div className={css.answer_input_answer_wrap}>\n                            <input\n                            className={css.input_text + ' input_text'}\n                            type=\"text\"\n                            value={this.state.answer}\n                            onChange={this.changeHandler.bind(this)}/>\n                            <button className={css.answer_btn_agree} type=\"submit\" title=\"подтвердить ответ\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25.828\" height=\"16.828\" viewBox=\"0 0 25.828 16.828\">\n                                    <g id=\"Сгруппировать_7\" data-name=\"Сгруппировать 7\" transform=\"translate(-498.086 -285.473)\">\n                                        <line id=\"Линия_13\" data-name=\"Линия 13\" x2=\"9\" y2=\"9\" transform=\"translate(499.5 291.887)\" fill=\"none\" stroke=\"#fff\" strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                                        <line id=\"Линия_14\" data-name=\"Линия 14\" y1=\"14\" x2=\"14\" transform=\"translate(508.5 286.887)\" fill=\"none\" stroke=\"#fff\" strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                                    </g>\n                                </svg>\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (this.getCurrentOrNewTask().isSolved) {\n            this.props.openTaskResult()\n\n            return\n        }\n\n        this.setState({\n            example: this.getActualOrNewExample()\n        })\n    }\n\n    private getCurrentOrNewTask(): Task {\n        return this.props.taskProvider.getCurrentOrNewTask();\n    }\n\n    private getActualOrNewExample(): Example {\n        return this.props.exampleProvider.getActualOrNewExample(this.getCurrentOrNewTask())\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {ExampleValues} from \"./ExampleValues\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public static createFromValues(exampleValues: ExampleValues, operation: Operation): Example {\n        return new Example(exampleValues.first, operation, exampleValues.second)\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solution\n    }\n\n    public get solution(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\nimport {ExampleGenerator} from \"./ExampleGenerator\";\n\nexport class ExampleProvider {\n    public constructor(private readonly exampleGenerator: ExampleGenerator) {\n    }\n\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = this.exampleGenerator.generate(task)\n\n        if (null !== previousExample && !previousExample?.isSolved) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.examples.push(newExample)\n\n        return newExample\n    }\n}\n","import {Example} from \"../Example/Example\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly taskSettings: TaskSettings\n    ) {\n    }\n\n    public get currentExampleNumber(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount - this.wrongExamplesCount\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.solvedExamples.length\n    }\n\n    public get solvedExamples(): Example[] {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.taskSettings.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {Task} from \"./Task\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly taskSettingsManager: TaskSettingsManager) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.taskSettingsManager.getCurrentSettings()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","import {TaskSettings} from \"./TaskSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {TaskSettingsNormalizer} from \"./TaskSettingsNormalizer\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\n\nconst storageKey = 'task-settings-v2';\n\nexport class TaskSettingsManager {\n    public constructor(\n        private readonly taskSettingsNormalizer: TaskSettingsNormalizer,\n        private readonly profileProvider: ProfileProvider\n    ) {\n    }\n\n    public getCurrentSettings(): TaskSettings {\n        const item = localStorage.getItem(storageKey)\n\n        if (null === item) {\n            return {\n                examplesCount: 10,\n                operations: [Operation.Add],\n                addSettings: this.profileProvider.defaultAddProfile.exampleSettings,\n                multSettings: this.profileProvider.defaultMultProfile.exampleSettings\n            }\n        }\n\n        const taskSettings = JSON.parse(item)\n\n        return taskSettings\n    }\n\n    public saveTaskSettings(taskSettings: TaskSettings): void {\n        this.taskSettingsNormalizer.normalize(taskSettings)\n        localStorage.setItem(storageKey, JSON.stringify(taskSettings))\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function randomFlag(probability: number): boolean {\n    return probability / 100 <= Math.random()\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\nimport {random, randomFlag} from \"../Random\";\nimport {Task} from \"../Task/Task\";\nimport {CoefficientGenerator} from \"./CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./OperationGeneratorCollection\";\n\nexport class ExampleGenerator {\n    public constructor(\n        private readonly operationGeneratorCollection: OperationGeneratorCollection,\n        private readonly coefficientGenerator: CoefficientGenerator\n    ) {\n    }\n\n    public generate(task: Task): Example {\n        const operation = this.getOperation(task)\n        const generator = this.operationGeneratorCollection.getGenerator(operation)\n        const taskSettings = task.taskSettings\n        const exampleSettings = [Operation.Add, Operation.Sub].includes(operation) ? taskSettings.addSettings : taskSettings.multSettings\n        let example = generator.generate(exampleSettings)\n\n        if (randomFlag(15)) {\n            return example\n        }\n\n        let maxCoefficient = 0\n\n        for (let number = 1; number <= 100; number++) {\n            const nextExample = generator.generate(exampleSettings)\n            const nextCoefficient = this.coefficientGenerator.getUniqueCoefficient(nextExample, task)\n\n            if (nextCoefficient > maxCoefficient) {\n                example = nextExample\n                maxCoefficient = nextCoefficient\n            }\n        }\n\n        return example\n    }\n\n    private getOperation(task: Task): Operation {\n        const operations = task.taskSettings.operations\n\n        return operations[random(0, operations.length - 1)]\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\n\nexport class CoefficientGenerator {\n    public getUniqueCoefficient(example: Example, task: Task): number {\n        let uniqueCoefficient = 1\n        const solvedExamples = task.solvedExamples\n        const solvedExamplesCount = solvedExamples.length || 1\n\n        for (let solvedExample of solvedExamples) {\n            if (example.first === solvedExample.first && example.operation === solvedExample.operation && example.second === solvedExample.second) {\n                uniqueCoefficient -= 60 / 100 / solvedExamplesCount\n            }\n\n            if (example.solution === solvedExample.solution) {\n                uniqueCoefficient -= 40 / 100 / solvedExamplesCount\n            }\n        }\n\n        return uniqueCoefficient\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\n\nexport class OperationGeneratorCollection {\n    public constructor(private readonly generators: OperationGenerator[]) {\n    }\n\n    public getGenerator(operation: Operation): OperationGenerator {\nfor (let generator of this.generators){\n    if (operation===generator.operation){\n        return  generator\n    }\n}\n\n    throw new DOMException(`Generator with ${operation} does not exist`)\n    }\n}\n","export class ExampleValues {\n    public constructor(\n        public readonly first: number,\n        public readonly second: number\n    ) {\n    }\n}\n","export function getValueBetween(value: number, min: number, max: number): number {\n    if (min > max) {\n        throw new DOMException(`${min} is greater than ${max}`)\n    }\n\n    if (value < min) {\n        return min\n    }\n\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n\nexport function getValueLessThan(value: number, max: number): number {\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n","import {OperationGenerator} from \"./OperationGenerator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\n\nexport abstract class ValuesGenerator implements OperationGenerator {\n    public abstract readonly operation: Operation\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        return Example.createFromValues(this.generateValues(exampleSettings), this.operation)\n    }\n\n    protected abstract generateValues(settings: ExampleSettings): ExampleValues\n}\n","import {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {getValueBetween} from \"../NumberManipulator\";\nimport {ValuesGenerator} from \"./ValuesGenerator\";\nimport {Operation} from \"./Operation\";\n\nexport class AddGenerator extends ValuesGenerator {\n    public readonly operation: Operation = Operation.Add\n\n    protected generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult - first, settings.maxResult - first)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult - first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","export function getObjectKeys<T extends {}>(object: T): (keyof T)[] {\n    const keys = Object.keys(object)\n\n    return keys as (keyof T)[]\n}\n\nexport function isEqual<T extends {}>(object1: T, object2: T): boolean {\n    for (let key of getObjectKeys(object1)) {\n        if (object1[key] !== object2[key]) {\n            return false\n        }\n    }\n\n    return true\n}\n\nexport function copyValues<T extends {}>(target: T, source: T): void {\n    for (let key of getObjectKeys(source)) {\n        target[key] = source[key]\n    }\n}\n\n\nexport function clone<T extends {}>(object: T): T {\n    const cloned = {} as T\n\n    for (let key of getObjectKeys(object)) {\n        const value = object[key]\n        cloned[key] = isObject(value) ? clone(value) : value\n    }\n\n    return cloned\n}\n\nfunction isObject(value: any): boolean {\n    return typeof value === 'object' && value !== null\n}\n","import {Task} from \"./Task\";\nimport {getObjectKeys} from \"../ObjectManipulator\";\n\nexport class RatingGenerator {\n    private readonly coefficients = {\n        '10': [5, 6, 8, 9],\n        '20': [14, 15, 17, 19],\n    }\n\n    public getRating(task: Task): number {\n        const coeeficients = this.getTaskCoefficients(task)\n        let rating = 0\n\n        for (rating; rating < coeeficients.length; rating++) {\n            if (task.rightExamplesCount < coeeficients[rating]) {\n                break\n            }\n        }\n\n        return rating + 1\n    }\n\n    private getTaskCoefficients(task: Task): number[] {\n        const coefficients = this.coefficients\n        type ExamplesCount = keyof typeof coefficients\n        const index = getObjectKeys(this.coefficients)\n            .reduce((previousExamplesCount: ExamplesCount, examplesCount: ExamplesCount): ExamplesCount => task.solvedExamplesCount >= +examplesCount ? examplesCount : previousExamplesCount)\n        const standardExamplesCount = +index\n\n        return this.coefficients[index]\n            .map((examplesCount: number): number => Math.round(examplesCount * task.solvedExamplesCount / standardExamplesCount))\n    }\n}\n","import React from 'react';\nimport {Solve} from \"./Solve\";\nimport {ExampleProvider} from \"../Example/ExampleProvider\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\nimport {ExampleGenerator} from '../Example/ExampleGenerator'\nimport {CoefficientGenerator} from \"../Example/CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"../Example/OperationGeneratorCollection\";\nimport {AddGenerator} from \"../Example/AddGenerator\";\nimport {RatingGenerator} from \"../Task/RatingGenerator\";\nimport {RevertGenerator} from \"../Example/RevertGenerator\";\nimport {TaskSettingsNormalizer} from \"../Task/TaskSettingsNormalizer\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\nimport {ExampleSettingsNormalizer} from \"../Example/ExampleSettingsNormalizer\";\nimport {TaskResult} from \"./TaskResult\";\nimport {TaskConfig} from \"./TaskConfig\";\nimport {MultGenerator} from \"../Example/MultGenerator\";\n\nconst addGenerator = new AddGenerator()\nconst multGenerator = new MultGenerator()\nconst operationGeneratorCollection = new OperationGeneratorCollection([\n    addGenerator,\n    new RevertGenerator(addGenerator),\n    multGenerator,\n    new RevertGenerator(multGenerator),\n])\nconst coefficientGenerator = new CoefficientGenerator()\nconst exampleGenerator = new ExampleGenerator(operationGeneratorCollection, coefficientGenerator)\nconst exampleProvider = new ExampleProvider(exampleGenerator)\nconst exampleSettingsNormalizer = new ExampleSettingsNormalizer()\nconst taskSettingsNormalizer = new TaskSettingsNormalizer(exampleSettingsNormalizer)\nconst profileProvider = new ProfileProvider(exampleSettingsNormalizer)\nconst taskSettingsManager = new TaskSettingsManager(taskSettingsNormalizer, profileProvider)\nconst taskProvider = new TaskProvider(taskSettingsManager)\nconst ratingGenerator = new RatingGenerator()\n\nenum Page {\n    Solve = 1,\n    TaskResult,\n    TaskConfig,\n}\n\ninterface State {\n    page: Page\n}\n\nexport class App extends React.Component<{}, State> {\n    public readonly state: State = {\n        page: Page.Solve,\n    }\n\n    public render() {\n        const router = {\n            [Page.Solve]: <Solve\n                taskProvider={taskProvider}\n                exampleProvider={exampleProvider}\n                openConfiguration={this.openPage.bind(this, Page.TaskConfig)}\n                openTaskResult={this.openPage.bind(this, Page.TaskResult)}/>,\n            [Page.TaskResult]: <TaskResult\n                ratingGenerator={ratingGenerator}\n                taskProvider={taskProvider}\n                startNewTask={this.startNewTask.bind(this)}/>,\n            [Page.TaskConfig]: <TaskConfig\n                profileProvider={profileProvider}\n                taskSettingsManager={taskSettingsManager}\n                startNewTask={this.startNewTask.bind(this)}/>,\n        }\n\n        return (\n            <>\n                {router[this.state.page]}\n            </>\n        )\n    }\n\n    private startNewTask(): void {\n        taskProvider.cleanCurrentTask()\n        this.openPage(Page.Solve)\n    }\n\n    private openPage(page: Page): void {\n        this.setState({\n            page: page\n        })\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {Example} from \"./Example\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class RevertGenerator implements OperationGenerator {\n    public readonly operation: Operation\n\n    public constructor(private readonly originalGenerator: OperationGenerator) {\n        const operation = originalGenerator.operation\n\n        if (![Operation.Add, Operation.Mult].includes(operation)) {\n            throw new DOMException(`You can not revert ${operation} operation example generation`)\n        }\n\n        this.operation = operation + 1\n    }\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        const example = this.originalGenerator.generate(exampleSettings)\n\n        return new Example(\n            example.solution,\n            this.operation,\n            example.second\n        )\n    }\n}\n","import {TaskSettings} from \"./TaskSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {ExampleSettingsNormalizer} from \"../Example/ExampleSettingsNormalizer\";\n\nexport class TaskSettingsNormalizer {\n    public constructor(private readonly exampleSettingsNormalizer: ExampleSettingsNormalizer) {\n    }\n\n    public normalize(taskSettings: TaskSettings): void {\n        if (taskSettings.examplesCount < 1) {\n            taskSettings.examplesCount = 10\n        }\n\n        if (0 === taskSettings.operations.length) {\n            taskSettings.operations.push(Operation.Add)\n        }\n\n        this.exampleSettingsNormalizer.normalizeAddSettings(taskSettings.addSettings)\n        this.exampleSettingsNormalizer.normalizeMultSettings(taskSettings.multSettings)\n    }\n}\n","import {Profile} from \"./Profile\";\nimport {ExampleSettingsNormalizer} from \"./ExampleSettingsNormalizer\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\ntype ProfileNormalizer = (profile: Profile) => void\n\nexport class ProfileProvider {\n    private normalizeAddProfile: ProfileNormalizer\n    private normalizeMultProfile: ProfileNormalizer\n\n    public constructor(exampleSettingsNormalizer: ExampleSettingsNormalizer) {\n        this.normalizeAddProfile = this.normalizeProfile.bind(this, exampleSettingsNormalizer.normalizeAddSettings)\n        this.normalizeMultProfile = this.normalizeProfile.bind(this, exampleSettingsNormalizer.normalizeMultSettings)\n    }\n\n    public get defaultAddProfile(): Profile {\n        const add10Profile: Profile = {\n            name: 'В пределах 10',\n            exampleSettings: {\n                minValue: 1,\n                maxValue: 9,\n                minResult: 0,\n                maxResult: 0\n            }\n        }\n        this.normalizeAddProfile(add10Profile)\n\n        return add10Profile\n    }\n\n    public get addProfiles(): Profile[] {\n        const addProfiles: Profile[] = [\n            this.defaultAddProfile,\n            {\n                name: 'В пределах 20',\n                exampleSettings: {\n                    minValue: 1,\n                    maxValue: 19,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'В пределах 100',\n                exampleSettings: {\n                    minValue: 10,\n                    maxValue: 90,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'В пределах 10 000 (в столбик)',\n                exampleSettings: {\n                    minValue: 100,\n                    maxValue: 10000 - 100,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'От -100 до 100',\n                exampleSettings: {\n                    minValue: -100,\n                    maxValue: 100,\n                    minResult: -100,\n                    maxResult: 100\n                }\n            },\n        ]\n        addProfiles.map(this.normalizeAddProfile)\n\n        return addProfiles\n    }\n\n    public get defaultMultProfile(): Profile {\n        const multTableProfile: Profile = this.getMultProfile(1, 9)\n        this.normalizeMultProfile(multTableProfile)\n\n        return multTableProfile\n    }\n\n    public get multProfiles(): Profile[] {\n        const multProfiles: Profile[] = [\n            this.getMultProfile(1, 3),\n            this.getMultProfile(1, 6),\n            this.getMultProfile(1, 9),\n            this.getMultProfile(3, 9),\n            this.getMultProfile(10, 1000),\n        ]\n        multProfiles.map(this.normalizeMultProfile)\n\n        return multProfiles\n    }\n\n    private getMultProfile(minValue: number, maxValue: number): Profile {\n        return {\n            name: `От ${minValue} до ${maxValue}`,\n            exampleSettings: {\n                minValue: minValue,\n                maxValue: maxValue,\n                minResult: minValue ** 2,\n                maxResult: maxValue ** 2\n            }\n        }\n    }\n\n    private normalizeProfile(normalizer: (exampleSettings: ExampleSettings) => void, profile: Profile): void {\n        normalizer(profile.exampleSettings)\n    }\n}\n","import {getValueBetween, getValueLessThan} from \"../NumberManipulator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class ExampleSettingsNormalizer {\n    public normalizeAddSettings(exampleSettings: ExampleSettings): void {\n        exampleSettings.minValue = getValueLessThan(exampleSettings.minValue, exampleSettings.maxValue)\n        const upperBound = exampleSettings.maxValue + exampleSettings.minValue\n        exampleSettings.minResult = getValueBetween(exampleSettings.minResult, exampleSettings.minValue * 2, upperBound)\n        exampleSettings.maxResult = getValueBetween(exampleSettings.maxResult, upperBound, exampleSettings.maxValue * 2)\n    }\n\n    public normalizeMultSettings(exampleSettings: ExampleSettings): void {\n        const valueSettings: (keyof ExampleSettings)[] = ['minValue', 'maxValue']\n        valueSettings.forEach((key: keyof ExampleSettings): void => {\n            if (0 >= exampleSettings[key]) {\n                exampleSettings[key] = 1\n            }\n        })\n        exampleSettings.minValue = getValueLessThan(exampleSettings.minValue, exampleSettings.maxValue)\n        const upperBound = exampleSettings.maxValue * exampleSettings.minValue\n        exampleSettings.minResult = getValueBetween(exampleSettings.minResult, exampleSettings.minValue ** 2, upperBound)\n        exampleSettings.maxResult = getValueBetween(exampleSettings.maxResult, upperBound, exampleSettings.maxValue ** 2)\n    }\n}\n","import React from \"react\";\n\ninterface Props {\n    onClick: () => void\n}\n\nexport class StartNewTaskButton extends React.Component<Props> {\n    render() {\n        return (\n            <button onClick={this.props.onClick} title='начать новое задание'>\n                <svg className='header_btn' xmlns=\"http://www.w3.org/2000/svg\" width=\"22.412\" height=\"18.824\" viewBox=\"0 0 22.412 18.824\">\n                <g id=\"Сгруппировать_5\" data-name=\"Сгруппировать 5\" transform=\"translate(-781.088 -594.088)\">\n                    <line id=\"Линия_6\" data-name=\"Линия 6\" x1=\"20\" transform=\"translate(782.5 603.5)\" fill=\"none\" stroke=\"#758eb1\" strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                    <line id=\"Линия_7\" data-name=\"Линия 7\" y1=\"8\" x2=\"9\" transform=\"translate(782.5 595.5)\" fill=\"none\" stroke=\"#758eb1\" strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                    <line id=\"Линия_8\" data-name=\"Линия 8\" x2=\"9\" y2=\"8\" transform=\"translate(782.5 603.5)\" fill=\"none\" stroke=\"#758eb1\" strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                </g>\n                </svg>\n            </button>\n        )\n    }\n}\n","import React from \"react\";\nimport {Task} from \"../Task/Task\";\nimport {RatingGenerator} from \"../Task/RatingGenerator\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport css from './TaskResult.module.css';\n\ninterface Props {\n    ratingGenerator: RatingGenerator\n    taskProvider: TaskProvider\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    public render() {\n        const task = this.props.taskProvider.getCurrentOrNewTask()\n\n        return (\n            <div className='wrap'>\n                <div className='header'>\n                    <h1>Результаты задания</h1>\n                    <StartNewTaskButton onClick={this.props.startNewTask}/>\n                </div>\n                <div className=\"container\">\n                    <ul>\n                        <li>Решено примеров: {task.solvedExamplesCount}</li>\n                        <li>Ошибок: {task.wrongExamplesCount}</li>\n                        <li>Оценка: {this.props.ratingGenerator.getRating(task)}</li>\n                    </ul>\n                    <h2>Примеры</h2>\n                    <table className={css.result_table}>\n                        <thead>\n                        <tr>\n                            <th>№</th>\n                            <th>Пример</th>\n                            <th>Ответ</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.showExamples(task)}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n}\n","import React from \"react\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\n\ninterface Props {\n    exampleSettings: ExampleSettings\n    name: keyof ExampleSettings\n    disabled: boolean\n}\n\ninterface State {\n    value: string\n}\n\nexport class SettingInput extends React.Component<Props> {\n    public readonly state: State = {\n        value: this.props.exampleSettings[this.props.name].toString(),\n    }\n\n   public render() {\n        return (\n            <input\n                className='input_text'\n                type=\"number\"\n                value={this.state.value}\n                onChange={this.changeHandler.bind(this)}\n                disabled={this.props.disabled}/>\n        )\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const exampleSettings = this.props.exampleSettings\n        const value = event.target.value\n        exampleSettings[this.props.name] = +value\n        this.setState({\n            value: value\n        })\n    }\n}\n","import React from \"react\";\nimport {SettingInput} from \"./SettingInput\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {TaskSettings} from \"../Task/TaskSettings\";\nimport {Profile} from \"../Example/Profile\";\nimport {copyValues, isEqual} from \"../ObjectManipulator\";\nimport css from './OperationSettings.module.css';\n\ninterface Props {\n    baseOperation: Operation.Add | Operation.Mult\n    taskSettings: TaskSettings\n    exampleSettings: ExampleSettings\n    profiles: Profile[]\n}\n\ninterface State {\n    isSettingsOpened: boolean\n    taskSettings: TaskSettings\n    exampleSettings: ExampleSettings\n}\n\nexport class OperationSettings extends React.Component<Props, State> {\n    public readonly state: State = {\n        isSettingsOpened: false,\n        taskSettings: this.props.taskSettings,\n        exampleSettings: this.props.exampleSettings,\n    }\n\n    public render() {\n        const operationCheckboxes = this.operations.map(this.renderOperationCheckbox.bind(this))\n\n        return (\n            <div className={css.settings_container}>\n                    <div className={css.operation_checkboxes_list}>\n                        {operationCheckboxes}\n                    </div>\n                    <form>\n                        {this.props.profiles.map(this.renderProfile.bind(this))}\n                    </form>\n                    <div className={`${css.settings} ${!this.state.isSettingsOpened ? \"\" : css.settings_opened}`}>\n                        <button className={css.settings_btn} onClick={(): void => this.setState({isSettingsOpened: !this.state.isSettingsOpened})}>\n                            Детальные настройки\n                            <svg className={css.settings_arrow} xmlns=\"http://www.w3.org/2000/svg\" width=\"17.762\" height=\"10.295\" viewBox=\"0 0 17.762 10.295\">\n                                <g id=\"Сгруппировать_8\" data-name=\"Сгруппировать 8\" transform=\"translate(-497.153 -854.352)\">\n                                    <line id=\"Линия_19\" data-name=\"Линия 19\" x2=\"7.467\" y2=\"7.467\" transform=\"translate(513.5 863.233) rotate(180)\" fill=\"none\" stroke={!this.state.isSettingsOpened ? '#fff' : '#758eb1'} strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                                    <line id=\"Линия_20\" data-name=\"Линия 20\" x1=\"7.467\" y2=\"7.467\" transform=\"translate(506.034 863.233) rotate(180)\" fill=\"none\" stroke={!this.state.isSettingsOpened ? '#fff' : '#758eb1'} strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                                </g>\n                            </svg>\n                        </button>\n                    {this.renderSettings(this.state.exampleSettings)}\n                    </div>\n            </div>\n        )\n    }\n\n    private get operations(): Operation[] {\n        const baseOperation = this.props.baseOperation\n\n        return [baseOperation, baseOperation + 1]\n    }\n\n    private renderProfile(profile: Profile) {\n        const isInputDisabled = this.isInputDisabled\n\n        return (\n            <label className={css.input_radio_wrap} key={profile.name}>\n                <input\n                    type=\"radio\"\n                    name='profile'\n                    checked={!isInputDisabled && isEqual(this.state.exampleSettings, profile.exampleSettings)}\n                    disabled={isInputDisabled}\n                    onChange={this.changeRadioHandler.bind(this, profile)}/>\n                {profile.name}\n            </label>\n        )\n    }\n\n    private get isInputDisabled(): boolean {\n        return !this.props\n            .taskSettings\n            .operations\n            .some((operation: Operation): boolean => this.operations.includes(operation))\n    }\n\n    private changeRadioHandler(profile: Profile): void {\n        const exampleSettings = this.state.exampleSettings\n        copyValues(exampleSettings, profile.exampleSettings)\n        this.setState({\n            exampleSettings: exampleSettings\n        })\n    }\n\n    private renderSettings(exampleSettings: ExampleSettings) {\n        const isInputDisabled = this.isInputDisabled\n        const key = JSON.stringify([isInputDisabled, exampleSettings])\n\n        return !this.state.isSettingsOpened ? '' : (\n            <table>\n                <thead>\n                <tr>\n                    <th></th>\n                    <th>Минимум</th>\n                    <th>Максимум</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <th>Значение</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minValue' key={key}\n                                      disabled={isInputDisabled}/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxValue' key={key}\n                                      disabled={isInputDisabled}/>\n                    </td>\n                </tr>\n                <tr>\n                    <th>Результат</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minResult' key={key}\n                                      disabled={isInputDisabled}/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxResult' key={key}\n                                      disabled={isInputDisabled}/>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        )\n    }\n\n    private renderOperationCheckbox(operation: Operation) {\n        const operationNames = {\n            [Operation.Add]: 'Сложение',\n            [Operation.Sub]: 'Вычитание',\n            [Operation.Mult]: 'Умножение',\n            [Operation.Div]: 'Деление',\n        }\n\n        return (\n            <div className={css.main_operation_checkox_block}>\n                <input className={css.main_operation_checkox}\n                    id={'MainOperationCheckox' + operation}\n                    type=\"checkbox\"\n                    checked={this.state.taskSettings.operations.includes(operation)}\n                    onChange={this.changeCheckboxHandler.bind(this, operation)}/>\n                    <label key={operation} htmlFor={'MainOperationCheckox' + operation}>\n                        {operationNames[operation]}\n                    </label>\n            </div>\n        )\n    }\n\n    private changeCheckboxHandler(operation: Operation): void {\n        const taskSettings = this.state.taskSettings\n        const enabledOperations = taskSettings.operations\n            .filter((enabledOperation: Operation): boolean => enabledOperation !== operation)\n\n        if (!taskSettings.operations.includes(operation)) {\n            enabledOperations.push(operation)\n        }\n\n        taskSettings.operations = enabledOperations\n        this.setState({\n            taskSettings: taskSettings\n        })\n    }\n}\n","import React from \"react\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\nimport {TaskSettings} from \"../Task/TaskSettings\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\nimport {OperationSettings} from \"./OperationSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    profileProvider: ProfileProvider\n    startNewTask: () => void\n}\n\ninterface State {\n    examplesCount: string\n    taskSettings: TaskSettings\n}\n\nexport class TaskConfig extends React.Component<Props, State> {\n    public readonly state: State = {\n        examplesCount: this.getCurrentTaskSettings().examplesCount.toString(),\n        taskSettings: this.getCurrentTaskSettings()\n    }\n\n    public render() {\n        const taskSettings = this.state.taskSettings;\n\n        return (\n            <div className='wrap'>\n                <div className='header'>\n                    <h1>Настройки задания</h1>\n                        <StartNewTaskButton onClick={this.clickHandler.bind(this)}/>\n                </div>\n                <div className=\"container\">\n                    Количество примеров:\n                    <div>\n                    <input\n                    className='input_text'\n                        type=\"number\"\n                        value={this.state.examplesCount}\n                        onChange={this.changeExamplesCountHandler.bind(this)}/>\n                    </div>\n                    <OperationSettings\n                        baseOperation={Operation.Add}\n                        taskSettings={taskSettings}\n                        exampleSettings={taskSettings.addSettings}\n                        profiles={this.props.profileProvider.addProfiles}/>\n                    <OperationSettings\n                        baseOperation={Operation.Mult}\n                        taskSettings={taskSettings}\n                        exampleSettings={taskSettings.multSettings}\n                        profiles={this.props.profileProvider.multProfiles}/>\n                </div>\n            </div>\n        )\n    }\n\n    private changeExamplesCountHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const taskSettings = this.state.taskSettings\n        const value = event.target.value\n        taskSettings.examplesCount = +value\n        this.setState({\n            examplesCount: value,\n        })\n    }\n\n    private clickHandler(): void {\n        this.props.taskSettingsManager.saveTaskSettings(this.state.taskSettings)\n        this.props.startNewTask()\n    }\n\n    private getCurrentTaskSettings(): TaskSettings {\n        return this.props.taskSettingsManager.getCurrentSettings()\n    }\n}\n","import {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {getValueBetween} from \"../NumberManipulator\";\nimport {ValuesGenerator} from \"./ValuesGenerator\";\nimport {Operation} from \"./Operation\";\n\nexport class MultGenerator extends ValuesGenerator {\n    public readonly operation: Operation = Operation.Mult\n\n    protected generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult / first, settings.maxResult / first)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult / first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './Component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings_container\":\"OperationSettings_settings_container__3fXro\",\"main_operation_checkox\":\"OperationSettings_main_operation_checkox__Nt6xQ\",\"operation_checkboxes_list\":\"OperationSettings_operation_checkboxes_list__11YZs\",\"main_operation_checkox_block\":\"OperationSettings_main_operation_checkox_block__6EGC6\",\"input_radio_wrap\":\"OperationSettings_input_radio_wrap__377TX\",\"settings\":\"OperationSettings_settings__3JtJh\",\"settings_btn\":\"OperationSettings_settings_btn__3NTSk\",\"settings_arrow\":\"OperationSettings_settings_arrow__fElCI\",\"settings_opened\":\"OperationSettings_settings_opened__GonmL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options_btn\":\"Solve_options_btn__3lvny\",\"answer_input_answer_wrap\":\"Solve_answer_input_answer_wrap__1TDgF\",\"answer_btn_agree\":\"Solve_answer_btn_agree__LYnoG\",\"state_example_string\":\"Solve_state_example_string__3S1oz\"};"],"sourceRoot":""}