{"version":3,"sources":["Component/TaskResult.module.css","sleep.ts","Component/AnswerButtonSvg.tsx","Component/Solve.tsx","Example/Operation.ts","Example/Example.ts","Example/ExampleProvider.ts","Task/Task.ts","Task/TaskProvider.ts","Task/TaskSettingsManager.ts","Random.ts","Example/ExampleGenerator.ts","Example/CoefficientGenerator.ts","Example/OperationGeneratorCollection.ts","Example/ExampleValues.ts","NumberManipulator.ts","Example/ValuesGenerator.ts","Task/RatingGenerator.ts","Example/AddGenerator.ts","ObjectManipulator.ts","Component/App.tsx","Example/RevertGenerator.ts","Task/TaskSettingsNormalizer.ts","Example/ProfileProvider.ts","Example/ExampleSettingsNormalizer.ts","Component/StartNewTaskButton.tsx","Component/TaskResult.tsx","Component/SettingInput.tsx","Component/OperationSettings.tsx","Component/TaskConfig.tsx","Example/MultGenerator.ts","Example/ExampleRepository.ts","reportWebVitals.ts","index.tsx","Component/OperationSettings.module.css","Component/Solve.module.css"],"names":["module","exports","sleep","milliseconds","Promise","resolve","setTimeout","AnswerButtonSvg","xmlns","width","height","viewBox","id","data-name","transform","x2","y2","fill","stroke","strokeLinecap","strokeWidth","y1","Operation","Solve","state","example","getActualOrNewExample","answer","isRight","task","this","getCurrentOrNewTask","className","title","onClick","props","openConfiguration","css","options_btn","d","onSubmit","submitHandler","bind","name","currentExampleNumber","taskSettings","examplesCount","state_example_string","string","answer_input_answer_wrap","input_text","type","value","onChange","changeHandler","answer_btn_agree","answerResultClass","event","setState","target","preventDefault","isSolved","exampleRepository","addSolvedExample","addExamplesOnError","openTaskResult","write_answer","wrong_answer","taskProvider","exampleProvider","React","Component","Example","first","operation","second","signs","Add","Sub","Mult","Div","solution","exampleValues","ExampleProvider","exampleGenerator","previousExample","lastExample","hasAnswer","newExample","getNewExample","examples","push","generate","Task","solvedExamplesCount","filter","length","wrongExamplesCount","solvedExamples","remainedExamplesCount","TaskProvider","taskSettingsManager","currentTask","getCurrentSettings","storageKey","TaskSettingsManager","taskSettingsNormalizer","profileProvider","item","localStorage","getItem","operations","addSettings","defaultAddProfile","exampleSettings","multSettings","defaultMultProfile","JSON","parse","normalize","setItem","stringify","random","min","max","Math","floor","randomFlag","probability","ExampleGenerator","operationGeneratorCollection","coefficientGenerator","getOperation","generator","getGenerator","includes","needUniqueExample","needMaximumAmplitude","maxCoefficient","number","nextExample","exampleCoefficient","getUniqueCoefficient","getAmplitudeCoefficient","CoefficientGenerator","uniqueCoefficient","base","keys","solvedExample","every","key","amplitudeCoefficient","getAmplitude","minValue","maxValue","middle","amplitude","abs","delta","OperationGeneratorCollection","generators","DOMException","ExampleValues","getValueBetween","getValueLessThan","Rating","ValuesGenerator","createFromValues","generateValues","AddGenerator","settings","minSecond","minResult","maxResult","getObjectKeys","object","Object","isEqual","object1","object2","Page","RatingGenerator","coefficients","coeeficients","getTaskCoefficients","rating","rightExamplesCount","getRatingByNumber","Super","Good","TryAgain","index","reduce","previousExamplesCount","standardExamplesCount","map","round","RevertGenerator","originalGenerator","TaskSettingsNormalizer","exampleSettingsNormalizer","normalizeAddSettings","normalizeMultSettings","ProfileProvider","normalizeAddProfile","normalizeMultProfile","normalizeProfile","add10Profile","addProfiles","multTableProfile","getMultProfile","multProfiles","normalizer","profile","ExampleSettingsNormalizer","upperBound","forEach","StartNewTaskButton","x1","TaskResult","startNewTask","ratingGenerator","getRating","result_table","showExamples","right_answer","SettingInput","toString","disabled","OperationSettings","isSettingsOpened","operationCheckboxes","renderOperationCheckbox","settings_container","operation_checkboxes_list","profiles","renderProfile","settings_opened","settings_btn","settings_arrow","renderSettings","baseOperation","isInputDisabled","input_radio_wrap","checked","changeRadioHandler","some","source","copyValues","operationNames","main_operation_checkox_block","main_operation_checkox","changeCheckboxHandler","htmlFor","enabledOperations","enabledOperation","TaskConfig","getCurrentTaskSettings","clickHandler","changeExamplesCountHandler","changeAddExamplesOnErrorHandler","saveTaskSettings","MultGenerator","solvedExamplesKey","ExampleRepository","exampleValue","slice","addGenerator","multGenerator","App","page","router","openPage","cleanCurrentTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a73a70d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"result_table\":\"TaskResult_result_table__2lDMu\",\"right_answer\":\"TaskResult_right_answer__1yN3n\",\"wrong_answer\":\"TaskResult_wrong_answer__3nxvJ\"};","export function sleep(milliseconds: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n","import React from \"react\";\n\nexport function AnswerButtonSvg() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25.828\" height=\"16.828\"\n             viewBox=\"0 0 25.828 16.828\">\n            <g id=\"Сгруппировать_7\" data-name=\"Сгруппировать 7\"\n               transform=\"translate(-498.086 -285.473)\">\n                <line id=\"Линия_13\" data-name=\"Линия 13\" x2=\"9\" y2=\"9\"\n                      transform=\"translate(499.5 291.887)\" fill=\"none\" stroke=\"#fff\"\n                      strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                <line id=\"Линия_14\" data-name=\"Линия 14\" y1=\"14\" x2=\"14\"\n                      transform=\"translate(508.5 286.887)\" fill=\"none\" stroke=\"#fff\"\n                      strokeLinecap=\"round\" strokeWidth=\"2\"/>\n            </g>\n        </svg>\n    )\n}\n","import {Example} from \"../Example/Example\";\nimport React from \"react\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {ExampleProvider} from \"../Example/ExampleProvider\";\nimport {Task} from \"../Task/Task\";\nimport css from './Solve.module.css';\nimport {sleep} from \"../sleep\";\nimport {ExampleRepository} from \"../Example/ExampleRepository\";\nimport {AnswerButtonSvg} from \"./AnswerButtonSvg\";\n\ninterface Props {\n    taskProvider: TaskProvider\n    exampleProvider: ExampleProvider\n    exampleRepository: ExampleRepository\n    openConfiguration: () => void\n    openTaskResult: () => void\n}\n\ninterface State {\n    example: Example\n    answer: string\n    isRight: boolean | null\n}\n\nexport class Solve extends React.Component<Props, State> {\n    public readonly state: State = {\n        example: this.getActualOrNewExample(),\n        answer: '',\n        isRight: null\n    }\n\n    public render() {\n        const task = this.getCurrentOrNewTask()\n\n        return (\n            <div className='wrap'>\n                <div className='header'>\n                    <h1>Задание</h1>\n                    <button title=\"Настройки\" onClick={this.props.openConfiguration}>\n                        <svg className={css.options_btn + ' header_btn'} xmlns=\"http://www.w3.org/2000/svg\"\n                             width=\"30.548\" height=\"30.548\" viewBox=\"0 0 30.548 30.548\">\n                            <g id=\"settings\" transform=\"translate(0 0)\">\n                                <path id=\"Контур_6\" data-name=\"Контур 6\"\n                                      d=\"M16.233,30.548H14.316A2.815,2.815,0,0,1,11.5,27.736v-.649a12.333,12.333,0,0,1-1.915-.795l-.46.46a2.812,2.812,0,0,1-3.978,0L3.8,25.4a2.812,2.812,0,0,1,0-3.978l.459-.459a12.333,12.333,0,0,1-.795-1.915H2.812A2.815,2.815,0,0,1,0,16.233V14.316A2.815,2.815,0,0,1,2.812,11.5h.649a12.336,12.336,0,0,1,.795-1.915l-.46-.46a2.812,2.812,0,0,1,0-3.978L5.152,3.8a2.812,2.812,0,0,1,3.977,0l.459.459A12.344,12.344,0,0,1,11.5,3.461V2.812A2.815,2.815,0,0,1,14.316,0h1.917a2.815,2.815,0,0,1,2.812,2.812v.649a12.332,12.332,0,0,1,1.915.795l.46-.46a2.812,2.812,0,0,1,3.978,0l1.355,1.355a2.812,2.812,0,0,1,0,3.978l-.459.459a12.333,12.333,0,0,1,.795,1.915h.649a2.815,2.815,0,0,1,2.812,2.812v1.917a2.815,2.815,0,0,1-2.812,2.812h-.649a12.336,12.336,0,0,1-.795,1.915l.46.46a2.812,2.812,0,0,1,0,3.978L25.4,26.752a2.812,2.812,0,0,1-3.977,0l-.459-.459a12.344,12.344,0,0,1-1.915.795v.649A2.815,2.815,0,0,1,16.233,30.548ZM9.887,24.413a10.549,10.549,0,0,0,2.734,1.135.9.9,0,0,1,.671.867v1.321a1.023,1.023,0,0,0,1.022,1.022h1.917a1.023,1.023,0,0,0,1.022-1.022V26.415a.9.9,0,0,1,.671-.867,10.549,10.549,0,0,0,2.734-1.135.9.9,0,0,1,1.088.138l.936.936a1.022,1.022,0,0,0,1.445,0l1.356-1.356a1.022,1.022,0,0,0,0-1.445l-.936-.936a.9.9,0,0,1-.138-1.088,10.548,10.548,0,0,0,1.135-2.734.9.9,0,0,1,.867-.671h1.321a1.023,1.023,0,0,0,1.022-1.022V14.316a1.023,1.023,0,0,0-1.022-1.022H26.415a.9.9,0,0,1-.867-.671,10.55,10.55,0,0,0-1.135-2.734A.9.9,0,0,1,24.551,8.8l.936-.936a1.022,1.022,0,0,0,0-1.445L24.131,5.062a1.022,1.022,0,0,0-1.445,0L21.749,6a.9.9,0,0,1-1.088.138A10.549,10.549,0,0,0,17.927,5a.9.9,0,0,1-.671-.867V2.812A1.023,1.023,0,0,0,16.233,1.79H14.316a1.023,1.023,0,0,0-1.022,1.022V4.134A.9.9,0,0,1,12.622,5,10.549,10.549,0,0,0,9.888,6.135.9.9,0,0,1,8.8,6l-.936-.936a1.022,1.022,0,0,0-1.445,0L5.062,6.417a1.022,1.022,0,0,0,0,1.445L6,8.8a.9.9,0,0,1,.138,1.088A10.548,10.548,0,0,0,5,12.622a.9.9,0,0,1-.867.671H2.812A1.024,1.024,0,0,0,1.79,14.316v1.917a1.023,1.023,0,0,0,1.022,1.022H4.134A.9.9,0,0,1,5,17.926a10.55,10.55,0,0,0,1.135,2.734A.9.9,0,0,1,6,21.749l-.936.936a1.022,1.022,0,0,0,0,1.445l1.356,1.356a1.022,1.022,0,0,0,1.445,0l.936-.936a.9.9,0,0,1,1.089-.137Z\"\n                                      fill=\"#395273\"/>\n                                <path id=\"Контур_7\" data-name=\"Контур 7\"\n                                      d=\"M151.247,157.893a6.647,6.647,0,1,1,6.647-6.647A6.654,6.654,0,0,1,151.247,157.893Zm0-11.5a4.857,4.857,0,1,0,4.857,4.857A4.862,4.862,0,0,0,151.247,146.39Z\"\n                                      transform=\"translate(-135.972 -135.972)\" fill=\"#395273\"/>\n                            </g>\n                        </svg>\n                    </button>\n                </div>\n                <div className='container'>\n                    <form onSubmit={this.submitHandler.bind(this)}>\n                        <div className={css.name}>\n                            <h2>Пример №{task.currentExampleNumber} из {task.taskSettings.examplesCount}</h2>\n                        </div>\n                        <div className={css.state_example_string}>{this.state.example.string} =</div>\n                        <div className={css.answer_input_answer_wrap}>\n                            <input\n                                className={css.input_text + ' input_text'}\n                                type=\"text\"\n                                value={this.state.answer}\n                                onChange={this.changeHandler.bind(this)}/>\n                            <button\n                                className={`${css.answer_btn_agree} ${this.answerResultClass}`}\n                                type=\"submit\"\n                                title=\"Ответить\">\n                                <AnswerButtonSvg/>\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private async submitHandler(event: React.FormEvent<HTMLFormElement>): Promise<void> {\n        event.preventDefault()\n        const answer = this.state.answer;\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n        const task = this.getCurrentOrNewTask()\n\n        if (example.isSolved) {\n            this.props.exampleRepository.addSolvedExample(example)\n        } else {\n            if (task.taskSettings.addExamplesOnError) {\n                task.taskSettings.examplesCount += 5\n            }\n        }\n\n        if (task.isSolved) {\n            this.props.openTaskResult()\n\n            return\n        }\n\n        this.setState({\n            example: this.getActualOrNewExample(),\n            isRight: example.isSolved,\n        })\n        await sleep(1000)\n        this.setState({\n            isRight: null\n        })\n    }\n\n    private get answerResultClass(): string {\n        const isRight = this.state.isRight\n\n        if (null === isRight) {\n            return ''\n        }\n\n        return isRight ? css.write_answer : css.wrong_answer\n    }\n\n    private getCurrentOrNewTask(): Task {\n        return this.props.taskProvider.getCurrentOrNewTask();\n    }\n\n    private getActualOrNewExample(): Example {\n        return this.props.exampleProvider.getActualOrNewExample(this.getCurrentOrNewTask())\n    }\n}\n","export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import {Operation} from \"./Operation\";\nimport {ExampleValues} from \"./ExampleValues\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public static createFromValues(exampleValues: ExampleValues, operation: Operation): Example {\n        return new Example(exampleValues.first, operation, exampleValues.second)\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solution\n    }\n\n    public get solution(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\nimport {ExampleGenerator} from \"./ExampleGenerator\";\n\nexport class ExampleProvider {\n    public constructor(\n        private readonly exampleGenerator: ExampleGenerator\n    ) {\n    }\n\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        const newExample = this.getNewExample(task, previousExample);\n        task.examples.push(newExample)\n\n        return newExample\n    }\n\n    private getNewExample(task: Task, previousExample: Example | null): Example {\n        if (null !== previousExample && !previousExample?.isSolved) {\n            return new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            )\n        }\n\n        return this.exampleGenerator.generate(task);\n    }\n}\n","import {Example} from \"../Example/Example\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly taskSettings: TaskSettings\n    ) {\n    }\n\n    public get currentExampleNumber(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount - this.wrongExamplesCount\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.solvedExamples.length\n    }\n\n    public get solvedExamples(): Example[] {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.taskSettings.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {Task} from \"./Task\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly taskSettingsManager: TaskSettingsManager) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.taskSettingsManager.getCurrentSettings()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","import {TaskSettings} from \"./TaskSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {TaskSettingsNormalizer} from \"./TaskSettingsNormalizer\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\n\nconst storageKey = 'task-settings-v2';\n\nexport class TaskSettingsManager {\n    public constructor(\n        private readonly taskSettingsNormalizer: TaskSettingsNormalizer,\n        private readonly profileProvider: ProfileProvider\n    ) {\n    }\n\n    public getCurrentSettings(): TaskSettings {\n        const item = localStorage.getItem(storageKey)\n\n        if (null === item) {\n            return {\n                examplesCount: 20,\n                addExamplesOnError: false,\n                operations: [Operation.Add],\n                addSettings: this.profileProvider.defaultAddProfile.exampleSettings,\n                multSettings: this.profileProvider.defaultMultProfile.exampleSettings\n            }\n        }\n\n        const taskSettings = JSON.parse(item)\n\n        return taskSettings\n    }\n\n    public saveTaskSettings(taskSettings: TaskSettings): void {\n        this.taskSettingsNormalizer.normalize(taskSettings)\n        localStorage.setItem(storageKey, JSON.stringify(taskSettings))\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function randomFlag(probability: number): boolean {\n    return probability / 100 >= Math.random()\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\nimport {random, randomFlag} from \"../Random\";\nimport {Task} from \"../Task/Task\";\nimport {CoefficientGenerator} from \"./CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./OperationGeneratorCollection\";\nimport {ExampleRepository} from \"./ExampleRepository\";\n\nexport class ExampleGenerator {\n    public constructor(\n        private readonly operationGeneratorCollection: OperationGeneratorCollection,\n        private readonly coefficientGenerator: CoefficientGenerator,\n        private readonly exampleRepository: ExampleRepository\n    ) {\n    }\n\n    public generate(task: Task): Example {\n        const operation = this.getOperation(task)\n        const generator = this.operationGeneratorCollection.getGenerator(operation)\n        const taskSettings = task.taskSettings\n        const exampleSettings = [Operation.Add, Operation.Sub].includes(operation) ? taskSettings.addSettings : taskSettings.multSettings\n        let example = generator.generate(exampleSettings)\n        const needUniqueExample = randomFlag(85)\n        const needMaximumAmplitude = randomFlag(40)\n        const solvedExamples = this.exampleRepository.solvedExamples\n        let maxCoefficient = 0\n\n        for (let number = 1; number <= 10; number++) {\n            const nextExample = generator.generate(exampleSettings)\n            let exampleCoefficient = 0\n\n            if (needUniqueExample) {\n                exampleCoefficient += this.coefficientGenerator.getUniqueCoefficient(nextExample, solvedExamples)\n            }\n\n            if (needMaximumAmplitude) {\n                exampleCoefficient += this.coefficientGenerator.getAmplitudeCoefficient(nextExample, exampleSettings)\n            }\n\n            if (exampleCoefficient > maxCoefficient) {\n                example = nextExample\n                maxCoefficient = exampleCoefficient\n            }\n        }\n\n        return example\n    }\n\n    private getOperation(task: Task): Operation {\n        const operations = task.taskSettings.operations\n\n        return operations[random(0, operations.length - 1)]\n    }\n}\n","import {Example} from \"./Example\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class CoefficientGenerator {\n    public getUniqueCoefficient(example: Example, solvedExamples: Example[]): number {\n        let uniqueCoefficient = 1\n        const base = solvedExamples.length || 1\n        const keys: (keyof Example)[] = ['first', 'operation', 'second']\n\n        for (let solvedExample of solvedExamples) {\n            const isEqualExample = keys.every((key: keyof Example): boolean => example[key] === solvedExample[key])\n\n            if (isEqualExample) {\n                uniqueCoefficient -= 30 / 100 / base\n            }\n\n            if (example.solution === solvedExample.solution) {\n                uniqueCoefficient -= 70 / 100 / base\n            }\n        }\n\n        return uniqueCoefficient\n    }\n\n    public getAmplitudeCoefficient(example: Example, exampleSettings: ExampleSettings): number {\n        let amplitudeCoefficient = 0\n        amplitudeCoefficient += this.getAmplitude(example.first, exampleSettings.minValue, exampleSettings.maxValue)\n        amplitudeCoefficient += this.getAmplitude(example.second, exampleSettings.minValue, exampleSettings.maxValue)\n\n        return 1 - amplitudeCoefficient / 2\n    }\n\n    private getAmplitude(value: number, min: number, max: number): number {\n        const middle = (min + max) / 2\n        const amplitude = Math.abs(middle - value)\n        let delta = Math.abs(max - min)\n\n        if (0 === delta) {\n            delta = 1\n        }\n\n        return amplitude / delta\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\n\nexport class OperationGeneratorCollection {\n    public constructor(private readonly generators: OperationGenerator[]) {\n    }\n\n    public getGenerator(operation: Operation): OperationGenerator {\nfor (let generator of this.generators){\n    if (operation===generator.operation){\n        return  generator\n    }\n}\n\n    throw new DOMException(`Generator with ${operation} does not exist`)\n    }\n}\n","export class ExampleValues {\n    public constructor(\n        public readonly first: number,\n        public readonly second: number\n    ) {\n    }\n}\n","export function getValueBetween(value: number, min: number, max: number): number {\n    if (min > max) {\n        throw new DOMException(`${min} is greater than ${max}`)\n    }\n\n    if (value < min) {\n        return min\n    }\n\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n\nexport function getValueLessThan(value: number, max: number): number {\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n","import {OperationGenerator} from \"./OperationGenerator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\n\nexport abstract class ValuesGenerator implements OperationGenerator {\n    public abstract readonly operation: Operation\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        return Example.createFromValues(this.generateValues(exampleSettings), this.operation)\n    }\n\n    protected abstract generateValues(settings: ExampleSettings): ExampleValues\n}\n","import {Task} from \"./Task\";\nimport {getObjectKeys} from \"../ObjectManipulator\";\n\nenum Rating {\n    Super = 'Оценка: 5. Ты молодец!',\nGood = 'Оценка: 4. Хороший результат!',\nTryAgain = 'Попробуй еще раз!',\n}\n\nexport class RatingGenerator {\n    private readonly coefficients = {\n        '10': [5, 6, 8, 9],\n        '20': [14, 15, 17, 19],\n    }\n\n    public getRating(task: Task): Rating {\n        const coeeficients = this.getTaskCoefficients(task)\n        let rating = 0\n\n        for (rating; rating < coeeficients.length; rating++) {\n            if (task.rightExamplesCount < coeeficients[rating]) {\n                break\n            }\n        }\n\n        return this.getRatingByNumber(rating + 1)\n    }\n\n    private getRatingByNumber(number: number): Rating {\n        switch (number) {\n            case 5:\n                return Rating.Super\n\n            case 4:\n                return Rating.Good\n\n            default:\n                return Rating.TryAgain\n        }\n    }\n\n    private getTaskCoefficients(task: Task): number[] {\n        const coefficients = this.coefficients\n        type ExamplesCount = keyof typeof coefficients\n        const index = getObjectKeys(this.coefficients)\n            .reduce((previousExamplesCount: ExamplesCount, examplesCount: ExamplesCount): ExamplesCount => task.solvedExamplesCount >= +examplesCount ? examplesCount : previousExamplesCount)\n        const standardExamplesCount = +index\n\n        return this.coefficients[index]\n            .map((examplesCount: number): number => Math.round(examplesCount * task.solvedExamplesCount / standardExamplesCount))\n    }\n}\n","import {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {getValueBetween} from \"../NumberManipulator\";\nimport {ValuesGenerator} from \"./ValuesGenerator\";\nimport {Operation} from \"./Operation\";\n\nexport class AddGenerator extends ValuesGenerator {\n    public readonly operation: Operation = Operation.Add\n\n    protected generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult - first, settings.maxResult - first)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult - first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","export function getObjectKeys<T extends {}>(object: T): (keyof T)[] {\n    const keys = Object.keys(object)\n\n    return keys as (keyof T)[]\n}\n\nexport function isEqual<T extends {}>(object1: T, object2: T): boolean {\n    for (let key of getObjectKeys(object1)) {\n        if (object1[key] !== object2[key]) {\n            return false\n        }\n    }\n\n    return true\n}\n\nexport function copyValues<T extends {}>(target: T, source: T): void {\n    for (let key of getObjectKeys(source)) {\n        target[key] = source[key]\n    }\n}\n\n\nexport function clone<T extends {}>(object: T): T {\n    const cloned = {} as T\n\n    for (let key of getObjectKeys(object)) {\n        const value = object[key]\n        cloned[key] = isObject(value) ? clone(value) : value\n    }\n\n    return cloned\n}\n\nfunction isObject(value: any): boolean {\n    return typeof value === 'object' && value !== null\n}\n","import React from 'react';\nimport {Solve} from \"./Solve\";\nimport {ExampleProvider} from \"../Example/ExampleProvider\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\nimport {ExampleGenerator} from '../Example/ExampleGenerator'\nimport {CoefficientGenerator} from \"../Example/CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"../Example/OperationGeneratorCollection\";\nimport {AddGenerator} from \"../Example/AddGenerator\";\nimport {RatingGenerator} from \"../Task/RatingGenerator\";\nimport {RevertGenerator} from \"../Example/RevertGenerator\";\nimport {TaskSettingsNormalizer} from \"../Task/TaskSettingsNormalizer\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\nimport {ExampleSettingsNormalizer} from \"../Example/ExampleSettingsNormalizer\";\nimport {TaskResult} from \"./TaskResult\";\nimport {TaskConfig} from \"./TaskConfig\";\nimport {MultGenerator} from \"../Example/MultGenerator\";\nimport {ExampleRepository} from \"../Example/ExampleRepository\";\n\nconst addGenerator = new AddGenerator()\nconst multGenerator = new MultGenerator()\nconst operationGeneratorCollection = new OperationGeneratorCollection([\n    addGenerator,\n    new RevertGenerator(addGenerator),\n    multGenerator,\n    new RevertGenerator(multGenerator),\n])\nconst coefficientGenerator = new CoefficientGenerator()\nconst exampleRepository = new ExampleRepository()\nconst exampleGenerator = new ExampleGenerator(operationGeneratorCollection, coefficientGenerator, exampleRepository)\nconst exampleProvider = new ExampleProvider(exampleGenerator)\nconst exampleSettingsNormalizer = new ExampleSettingsNormalizer()\nconst taskSettingsNormalizer = new TaskSettingsNormalizer(exampleSettingsNormalizer)\nconst profileProvider = new ProfileProvider(exampleSettingsNormalizer)\nconst taskSettingsManager = new TaskSettingsManager(taskSettingsNormalizer, profileProvider)\nconst taskProvider = new TaskProvider(taskSettingsManager)\nconst ratingGenerator = new RatingGenerator()\n\nenum Page {\n    Solve = 1,\n    TaskResult,\n    TaskConfig,\n}\n\ninterface State {\n    page: Page\n}\n\nexport class App extends React.Component<{}, State> {\n    public readonly state: State = {\n        page: Page.Solve,\n    }\n\n    public render() {\n        const router = {\n            [Page.Solve]: <Solve\n                taskProvider={taskProvider}\n                exampleProvider={exampleProvider}\n                exampleRepository={exampleRepository}\n                openConfiguration={this.openPage.bind(this, Page.TaskConfig)}\n                openTaskResult={this.openPage.bind(this, Page.TaskResult)}/>,\n            [Page.TaskResult]: <TaskResult\n                ratingGenerator={ratingGenerator}\n                taskProvider={taskProvider}\n                startNewTask={this.startNewTask.bind(this)}/>,\n            [Page.TaskConfig]: <TaskConfig\n                profileProvider={profileProvider}\n                taskSettingsManager={taskSettingsManager}\n                startNewTask={this.startNewTask.bind(this)}/>,\n        }\n\n        return (\n            <>\n                {router[this.state.page]}\n            </>\n        )\n    }\n\n    private startNewTask(): void {\n        taskProvider.cleanCurrentTask()\n        this.openPage(Page.Solve)\n    }\n\n    private openPage(page: Page): void {\n        this.setState({\n            page: page\n        })\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {Example} from \"./Example\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class RevertGenerator implements OperationGenerator {\n    public readonly operation: Operation\n\n    public constructor(private readonly originalGenerator: OperationGenerator) {\n        const operation = originalGenerator.operation\n\n        if (![Operation.Add, Operation.Mult].includes(operation)) {\n            throw new DOMException(`You can not revert ${operation} operation example generation`)\n        }\n\n        this.operation = operation + 1\n    }\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        const example = this.originalGenerator.generate(exampleSettings)\n\n        return new Example(\n            example.solution,\n            this.operation,\n            example.second\n        )\n    }\n}\n","import {TaskSettings} from \"./TaskSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {ExampleSettingsNormalizer} from \"../Example/ExampleSettingsNormalizer\";\n\nexport class TaskSettingsNormalizer {\n    public constructor(private readonly exampleSettingsNormalizer: ExampleSettingsNormalizer) {\n    }\n\n    public normalize(taskSettings: TaskSettings): void {\n        if (taskSettings.examplesCount < 1) {\n            taskSettings.examplesCount = 20\n        }\n\n        if (0 === taskSettings.operations.length) {\n            taskSettings.operations.push(Operation.Add)\n        }\n\n        this.exampleSettingsNormalizer.normalizeAddSettings(taskSettings.addSettings)\n        this.exampleSettingsNormalizer.normalizeMultSettings(taskSettings.multSettings)\n    }\n}\n","import {Profile} from \"./Profile\";\nimport {ExampleSettingsNormalizer} from \"./ExampleSettingsNormalizer\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\ntype ProfileNormalizer = (profile: Profile) => void\n\nexport class ProfileProvider {\n    private normalizeAddProfile: ProfileNormalizer\n    private normalizeMultProfile: ProfileNormalizer\n\n    public constructor(exampleSettingsNormalizer: ExampleSettingsNormalizer) {\n        this.normalizeAddProfile = this.normalizeProfile.bind(this, exampleSettingsNormalizer.normalizeAddSettings)\n        this.normalizeMultProfile = this.normalizeProfile.bind(this, exampleSettingsNormalizer.normalizeMultSettings)\n    }\n\n    public get defaultAddProfile(): Profile {\n        const add10Profile: Profile = {\n            name: 'В пределах 10',\n            exampleSettings: {\n                minValue: 1,\n                maxValue: 9,\n                minResult: 0,\n                maxResult: 0\n            }\n        }\n        this.normalizeAddProfile(add10Profile)\n\n        return add10Profile\n    }\n\n    public get addProfiles(): Profile[] {\n        const addProfiles: Profile[] = [\n            this.defaultAddProfile,\n            {\n                name: 'В пределах 15',\n                exampleSettings: {\n                    minValue: 2,\n                    maxValue: 13,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'В пределах 20',\n                exampleSettings: {\n                    minValue: 1,\n                    maxValue: 19,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'В пределах 100',\n                exampleSettings: {\n                    minValue: 10,\n                    maxValue: 90,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'В пределах 10 000 (в столбик)',\n                exampleSettings: {\n                    minValue: 100,\n                    maxValue: 10000 - 100,\n                    minResult: 0,\n                    maxResult: 0\n                }\n            },\n            {\n                name: 'От -100 до 100',\n                exampleSettings: {\n                    minValue: -100,\n                    maxValue: 100,\n                    minResult: -100,\n                    maxResult: 100\n                }\n            },\n        ]\n        addProfiles.map(this.normalizeAddProfile)\n\n        return addProfiles\n    }\n\n    public get defaultMultProfile(): Profile {\n        const multTableProfile: Profile = this.getMultProfile(1, 9)\n        this.normalizeMultProfile(multTableProfile)\n\n        return multTableProfile\n    }\n\n    public get multProfiles(): Profile[] {\n        const multProfiles: Profile[] = [\n            this.getMultProfile(1, 3),\n            this.getMultProfile(1, 6),\n            this.getMultProfile(1, 9),\n            this.getMultProfile(3, 9),\n            this.getMultProfile(10, 1000),\n        ]\n        multProfiles.map(this.normalizeMultProfile)\n\n        return multProfiles\n    }\n\n    private getMultProfile(minValue: number, maxValue: number): Profile {\n        return {\n            name: `От ${minValue} до ${maxValue}`,\n            exampleSettings: {\n                minValue: minValue,\n                maxValue: maxValue,\n                minResult: minValue ** 2,\n                maxResult: maxValue ** 2\n            }\n        }\n    }\n\n    private normalizeProfile(normalizer: (exampleSettings: ExampleSettings) => void, profile: Profile): void {\n        normalizer(profile.exampleSettings)\n    }\n}\n","import {getValueBetween, getValueLessThan} from \"../NumberManipulator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class ExampleSettingsNormalizer {\n    public normalizeAddSettings(exampleSettings: ExampleSettings): void {\n        exampleSettings.minValue = getValueLessThan(exampleSettings.minValue, exampleSettings.maxValue)\n        const upperBound = exampleSettings.maxValue + exampleSettings.minValue\n        exampleSettings.minResult = getValueBetween(exampleSettings.minResult, exampleSettings.minValue * 2, upperBound)\n        exampleSettings.maxResult = getValueBetween(exampleSettings.maxResult, upperBound, exampleSettings.maxValue * 2)\n    }\n\n    public normalizeMultSettings(exampleSettings: ExampleSettings): void {\n        const valueSettings: (keyof ExampleSettings)[] = ['minValue', 'maxValue']\n        valueSettings.forEach((key: keyof ExampleSettings): void => {\n            if (0 >= exampleSettings[key]) {\n                exampleSettings[key] = 1\n            }\n        })\n        exampleSettings.minValue = getValueLessThan(exampleSettings.minValue, exampleSettings.maxValue)\n        const upperBound = exampleSettings.maxValue * exampleSettings.minValue\n        exampleSettings.minResult = getValueBetween(exampleSettings.minResult, exampleSettings.minValue ** 2, upperBound)\n        exampleSettings.maxResult = getValueBetween(exampleSettings.maxResult, upperBound, exampleSettings.maxValue ** 2)\n    }\n}\n","import React from \"react\";\n\ninterface Props {\n    onClick: () => void\n}\n\nexport class StartNewTaskButton extends React.Component<Props> {\n   public render() {\n        return (\n            <button onClick={this.props.onClick} title='начать новое задание'>\n                <svg className='header_btn' xmlns=\"http://www.w3.org/2000/svg\" width=\"22.412\" height=\"18.824\" viewBox=\"0 0 22.412 18.824\">\n                <g id=\"Сгруппировать_5\" data-name=\"Сгруппировать 5\" transform=\"translate(-781.088 -594.088)\">\n                    <line id=\"Линия_6\" data-name=\"Линия 6\" x1=\"20\" transform=\"translate(782.5 603.5)\" fill=\"none\" stroke=\"#395273\" strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                    <line id=\"Линия_7\" data-name=\"Линия 7\" y1=\"8\" x2=\"9\" transform=\"translate(782.5 595.5)\" fill=\"none\" stroke=\"#395273\" strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                    <line id=\"Линия_8\" data-name=\"Линия 8\" x2=\"9\" y2=\"8\" transform=\"translate(782.5 603.5)\" fill=\"none\" stroke=\"#395273\" strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                </g>\n                </svg>\n            </button>\n        )\n    }\n}\n","import React from \"react\";\nimport {Task} from \"../Task/Task\";\nimport {RatingGenerator} from \"../Task/RatingGenerator\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport css from './TaskResult.module.css';\n\ninterface Props {\n    ratingGenerator: RatingGenerator\n    taskProvider: TaskProvider\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    public render() {\n        const task = this.props.taskProvider.getCurrentOrNewTask()\n\n        return (\n            <div className='wrap'>\n                <div className='header'>\n                    <h1>Результаты задания</h1>\n                    <StartNewTaskButton onClick={this.props.startNewTask}/>\n                </div>\n                <div className=\"container\">\n                    <ul>\n                        <li>Решено примеров: {task.solvedExamplesCount}</li>\n                        <li>Ошибок: {task.wrongExamplesCount}</li>\n                        <li>{this.props.ratingGenerator.getRating(task)}</li>\n                    </ul>\n                    <h2>Примеры</h2>\n                    <table className={css.result_table}>\n                        <thead>\n                        <tr>\n                            <th>№</th>\n                            <th>Пример</th>\n                            <th>Ответ</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.showExamples(task)}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr className={example.isSolved ? css.right_answer : css.wrong_answer}>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n}\n","import React from \"react\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\n\ninterface Props {\n    exampleSettings: ExampleSettings\n    name: keyof ExampleSettings\n    disabled: boolean\n}\n\ninterface State {\n    value: string\n}\n\nexport class SettingInput extends React.Component<Props> {\n    public readonly state: State = {\n        value: this.props.exampleSettings[this.props.name].toString(),\n    }\n\n   public render() {\n        return (\n            <input\n                className='input_text'\n                type=\"number\"\n                value={this.state.value}\n                onChange={this.changeHandler.bind(this)}\n                disabled={this.props.disabled}/>\n        )\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const exampleSettings = this.props.exampleSettings\n        const value = event.target.value\n        exampleSettings[this.props.name] = +value\n        this.setState({\n            value: value\n        })\n    }\n}\n","import React from \"react\";\nimport {SettingInput} from \"./SettingInput\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {TaskSettings} from \"../Task/TaskSettings\";\nimport {Profile} from \"../Example/Profile\";\nimport {copyValues, isEqual} from \"../ObjectManipulator\";\nimport css from './OperationSettings.module.css';\n\ninterface Props {\n    baseOperation: Operation.Add | Operation.Mult\n    taskSettings: TaskSettings\n    exampleSettings: ExampleSettings\n    profiles: Profile[]\n}\n\ninterface State {\n    isSettingsOpened: boolean\n    taskSettings: TaskSettings\n    exampleSettings: ExampleSettings\n}\n\nexport class OperationSettings extends React.Component<Props, State> {\n    public readonly state: State = {\n        isSettingsOpened: false,\n        taskSettings: this.props.taskSettings,\n        exampleSettings: this.props.exampleSettings,\n    }\n\n    public render() {\n        const operationCheckboxes = this.operations.map(this.renderOperationCheckbox.bind(this))\n\n        return (\n            <div className={css.settings_container}>\n                    <div className={css.operation_checkboxes_list}>\n                        {operationCheckboxes}\n                    </div>\n                    <form>\n                        {this.props.profiles.map(this.renderProfile.bind(this))}\n                    </form>\n                    <div className={`${css.settings} ${!this.state.isSettingsOpened ? \"\" : css.settings_opened}`}>\n                        <button className={css.settings_btn} onClick={(): void => this.setState({isSettingsOpened: !this.state.isSettingsOpened})}>\n                            Детальные настройки\n                            <svg className={css.settings_arrow} xmlns=\"http://www.w3.org/2000/svg\" width=\"17.762\" height=\"10.295\" viewBox=\"0 0 17.762 10.295\">\n                                <g id=\"Сгруппировать_8\" data-name=\"Сгруппировать 8\" transform=\"translate(-497.153 -854.352)\">\n                                    <line id=\"Линия_19\" data-name=\"Линия 19\" x2=\"7.467\" y2=\"7.467\" transform=\"translate(513.5 863.233) rotate(180)\" fill=\"none\" stroke={!this.state.isSettingsOpened ? '#fff' : '#395273'} strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                                    <line id=\"Линия_20\" data-name=\"Линия 20\" x1=\"7.467\" y2=\"7.467\" transform=\"translate(506.034 863.233) rotate(180)\" fill=\"none\" stroke={!this.state.isSettingsOpened ? '#fff' : '#395273'} strokeLinecap=\"round\" strokeWidth=\"2\"/>\n                                </g>\n                            </svg>\n                        </button>\n                    {this.renderSettings(this.state.exampleSettings)}\n                    </div>\n            </div>\n        )\n    }\n\n    private get operations(): Operation[] {\n        const baseOperation = this.props.baseOperation\n\n        return [baseOperation, baseOperation + 1]\n    }\n\n    private renderProfile(profile: Profile) {\n        const isInputDisabled = this.isInputDisabled\n\n        return (\n            <label className={css.input_radio_wrap} key={profile.name}>\n                <input\n                    type=\"radio\"\n                    name='profile'\n                    checked={!isInputDisabled && isEqual(this.state.exampleSettings, profile.exampleSettings)}\n                    disabled={isInputDisabled}\n                    onChange={this.changeRadioHandler.bind(this, profile)}/>\n                {profile.name}\n            </label>\n        )\n    }\n\n    private get isInputDisabled(): boolean {\n        return !this.props\n            .taskSettings\n            .operations\n            .some((operation: Operation): boolean => this.operations.includes(operation))\n    }\n\n    private changeRadioHandler(profile: Profile): void {\n        const exampleSettings = this.state.exampleSettings\n        copyValues(exampleSettings, profile.exampleSettings)\n        this.setState({\n            exampleSettings: exampleSettings\n        })\n    }\n\n    private renderSettings(exampleSettings: ExampleSettings) {\n        const isInputDisabled = this.isInputDisabled\n        const key = JSON.stringify([isInputDisabled, exampleSettings])\n\n        return !this.state.isSettingsOpened ? '' : (\n            <table>\n                <thead>\n                <tr>\n                    <th></th>\n                    <th>Минимум</th>\n                    <th>Максимум</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <th>Значение</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minValue' key={key}\n                                      disabled={isInputDisabled}/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxValue' key={key}\n                                      disabled={isInputDisabled}/>\n                    </td>\n                </tr>\n                <tr>\n                    <th>Результат</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minResult' key={key}\n                                      disabled={isInputDisabled}/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxResult' key={key}\n                                      disabled={isInputDisabled}/>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        )\n    }\n\n    private renderOperationCheckbox(operation: Operation) {\n        const operationNames = {\n            [Operation.Add]: 'Сложение',\n            [Operation.Sub]: 'Вычитание',\n            [Operation.Mult]: 'Умножение',\n            [Operation.Div]: 'Деление',\n        }\n\n        return (\n            <div className={css.main_operation_checkox_block}>\n                <input className={css.main_operation_checkox}\n                    id={'MainOperationCheckox' + operation}\n                    type=\"checkbox\"\n                    checked={this.state.taskSettings.operations.includes(operation)}\n                    onChange={this.changeCheckboxHandler.bind(this, operation)}/>\n                    <label key={operation} htmlFor={'MainOperationCheckox' + operation}>\n                        {operationNames[operation]}\n                    </label>\n            </div>\n        )\n    }\n\n    private changeCheckboxHandler(operation: Operation): void {\n        const taskSettings = this.state.taskSettings\n        const enabledOperations = taskSettings.operations\n            .filter((enabledOperation: Operation): boolean => enabledOperation !== operation)\n\n        if (!taskSettings.operations.includes(operation)) {\n            enabledOperations.push(operation)\n        }\n\n        taskSettings.operations = enabledOperations\n        this.setState({\n            taskSettings: taskSettings\n        })\n    }\n}\n","import React from \"react\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\nimport {TaskSettings} from \"../Task/TaskSettings\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\nimport {OperationSettings} from \"./OperationSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    profileProvider: ProfileProvider\n    startNewTask: () => void\n}\n\ninterface State {\n    examplesCount: string\n    addExamplesOnError: boolean\n    taskSettings: TaskSettings\n}\n\nexport class TaskConfig extends React.Component<Props, State> {\n    public readonly state: State = {\n        examplesCount: this.getCurrentTaskSettings().examplesCount.toString(),\n        addExamplesOnError: this.getCurrentTaskSettings().addExamplesOnError,\n        taskSettings: this.getCurrentTaskSettings()\n    }\n\n    public render() {\n        const taskSettings = this.state.taskSettings;\n\n        return (\n            <div className='wrap'>\n                <div className='header'>\n                    <h1>Настройки задания</h1>\n                    <StartNewTaskButton onClick={this.clickHandler.bind(this)}/>\n                </div>\n                <div className=\"container\">\n                    Количество примеров:\n                    <div>\n                        <input\n                            className='input_text'\n                            type=\"number\"\n                            value={this.state.examplesCount}\n                            onChange={this.changeExamplesCountHandler.bind(this)}/>\n                    </div>\n                    <label>\n                        Добавлять 5 примеров при ошибке\n                        <input\n                            type=\"checkbox\"\n                            checked={this.state.addExamplesOnError}\n                            onChange={this.changeAddExamplesOnErrorHandler.bind(this)}/>\n                    </label>\n                    <OperationSettings\n                        baseOperation={Operation.Add}\n                        taskSettings={taskSettings}\n                        exampleSettings={taskSettings.addSettings}\n                        profiles={this.props.profileProvider.addProfiles}/>\n                    <OperationSettings\n                        baseOperation={Operation.Mult}\n                        taskSettings={taskSettings}\n                        exampleSettings={taskSettings.multSettings}\n                        profiles={this.props.profileProvider.multProfiles}/>\n                </div>\n            </div>\n        )\n    }\n\n    private changeExamplesCountHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const taskSettings = this.state.taskSettings\n        const value = event.target.value\n        taskSettings.examplesCount = +value\n        this.setState({\n            examplesCount: value,\n        })\n    }\n\n    private changeAddExamplesOnErrorHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const taskSettings = this.state.taskSettings\n        const checked = event.target.checked\n        taskSettings.addExamplesOnError=checked\n        this.setState({\n            addExamplesOnError: checked,\n        })\n    }\n\n    private clickHandler(): void {\n        this.props.taskSettingsManager.saveTaskSettings(this.state.taskSettings)\n        this.props.startNewTask()\n    }\n\n    private getCurrentTaskSettings(): TaskSettings {\n        return this.props.taskSettingsManager.getCurrentSettings()\n    }\n}\n","import {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {getValueBetween} from \"../NumberManipulator\";\nimport {ValuesGenerator} from \"./ValuesGenerator\";\nimport {Operation} from \"./Operation\";\n\nexport class MultGenerator extends ValuesGenerator {\n    public readonly operation: Operation = Operation.Mult\n\n    protected generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult / first, settings.maxResult / first)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult / first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\n\nconst solvedExamplesKey = 'solved-examples'\nconst examplesLimit = 50\n\nexport class ExampleRepository {\n    public get solvedExamples(): Example[] {\n        const item = localStorage.getItem(solvedExamplesKey)\n\n        if (null === item) {\n            return []\n        }\n\n        type ExampleValue={ first: number, operation: Operation, second: number }\n        const exampleValues: ExampleValue[] = JSON.parse(item)\n\n        return exampleValues.map((exampleValue:ExampleValue):Example=>new Example(exampleValue.first, exampleValue.operation, exampleValue.second))\n    }\n\n    public addSolvedExample(example: Example): void {\n        let solvedExamples = this.solvedExamples\n        solvedExamples.push(example)\n        solvedExamples = solvedExamples.slice(-examplesLimit)\n        localStorage.setItem(solvedExamplesKey, JSON.stringify(solvedExamples))\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './Component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings_container\":\"OperationSettings_settings_container__3fXro\",\"main_operation_checkox\":\"OperationSettings_main_operation_checkox__Nt6xQ\",\"operation_checkboxes_list\":\"OperationSettings_operation_checkboxes_list__11YZs\",\"main_operation_checkox_block\":\"OperationSettings_main_operation_checkox_block__6EGC6\",\"input_radio_wrap\":\"OperationSettings_input_radio_wrap__377TX\",\"settings\":\"OperationSettings_settings__3JtJh\",\"settings_btn\":\"OperationSettings_settings_btn__3NTSk\",\"settings_arrow\":\"OperationSettings_settings_arrow__fElCI\",\"settings_opened\":\"OperationSettings_settings_opened__GonmL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options_btn\":\"Solve_options_btn__3lvny\",\"answer_input_answer_wrap\":\"Solve_answer_input_answer_wrap__1TDgF\",\"answer_btn_agree\":\"Solve_answer_btn_agree__LYnoG\",\"state_example_string\":\"Solve_state_example_string__3S1oz\",\"write_answer\":\"Solve_write_answer__2FhMy\",\"wrong_answer\":\"Solve_wrong_answer__2YUId\"};"],"sourceRoot":""}