{"version":3,"sources":["Example/Operation.ts","Task/StartNewTaskButton.tsx","Task/TaskResult.tsx","Task/TaskSettings.ts","Task/SettingInput.tsx","Task/TaskConfig.tsx","Example/Solve.tsx","Example/Example.ts","Example/ExampleProvider.ts","Task/Task.ts","Task/TaskProvider.ts","Example/ExampleSettings.ts","Example/NumberManipulator.ts","Task/TaskSettingsManager.ts","Random.ts","Example/ExampleGenerator.ts","Example/CoefficientGenerator.ts","Example/OperationGeneratorCollection.ts","Example/ExampleValues.ts","Example/AddGenerator.ts","Task/RatingGenerator.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Operation","StartNewTaskButton","onClick","this","props","clickHandler","React","Component","TaskResult","task","startNewTask","solvedExamplesCount","wrongExamplesCount","ratingGenerator","getRating","showExamples","examples","number","example","push","string","answer","isSolved","TaskSettings","examplesCount","addSettings","SettingInput","state","value","exampleSettings","name","toString","type","onChange","changeHandler","bind","event","target","setState","TaskConfig","taskSettings","getCurrentTaskSettings","changeExamplesCountHandler","getNewTaskSettings","taskSettingsManager","saveTaskSettings","getCurrentSettings","Solve","getActualOrNewExample","showTaskHistory","showTaskConfig","getCurrentOrNewTask","onSubmit","submitHandler","currentExampleNumber","taskProvider","cleanCurrentTask","preventDefault","exampleProvider","Example","first","operation","second","signs","Add","Sub","Mult","Div","solution","exampleValues","ExampleProvider","exampleGenerator","previousExample","lastExample","hasAnswer","newExample","generate","Task","filter","length","solvedExamples","remainedExamplesCount","TaskProvider","currentTask","ExampleSettings","minValue","maxValue","minResult","maxResult","getValueBetween","min","max","DOMException","TaskSettingsManager","storageKey","item","localStorage","getItem","JSON","parse","normalize","setItem","stringify","random","Math","floor","randomFlag","probability","ExampleGenerator","operationGeneratorCollection","coefficientGenerator","generator","getGenerator","maxCoefficient","nextExample","nextCoefficient","getUniqueCoefficient","CoefficientGenerator","uniqueCoefficient","solvedExample","OperationGeneratorCollection","generators","ExampleValues","AddGenerator","createFromValues","generateValues","settings","minSecond","RatingGenerator","coefficients","coeeficients","getTaskCoefficients","rating","rightExamplesCount","unknownIndex","Object","keys","reduce","previousExamplesCount","index","standardExamplesCount","map","round","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e523c1ff.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import React from \"react\";\n\ninterface Props {\n    clickHandler: () => void\n}\n\nexport class StartNewTaskButton extends React.Component<Props> {\n    render() {\n        return (\n            <button onClick={this.props.clickHandler}>Start new task</button>\n        )\n    }\n}\n","import React from \"react\";\nimport {Task} from \"./Task\";\nimport {RatingGenerator} from \"./RatingGenerator\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\n\ninterface Props {\n    ratingGenerator:RatingGenerator\n    task: Task\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    render() {\n        const task = this.props.task\n\n        return (\n            <div>\n                <div>\n                    <StartNewTaskButton clickHandler={this.props.startNewTask}/>\n                </div>\n                <h1>Task result</h1>\n                <ul>\n                    <li>Solved examples count: {task.solvedExamplesCount}</li>\n                    <li>Errors count: {task.wrongExamplesCount}</li>\n                    <li>Rating: {this.props.ratingGenerator.getRating(task)}</li>\n                </ul>\n                <h2>Examples</h2>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Example</th>\n                        <th>Answer</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.showExamples(task)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n}\n","import {ExampleSettings} from \"../Example/ExampleSettings\";\n\nexport class TaskSettings {\n    public constructor(\n        public examplesCount: number,\n        public readonly addSettings: ExampleSettings\n    ) {\n    }\n}\n","import React from \"react\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\n\ninterface Props {\n    exampleSettings: ExampleSettings\n    name: keyof ExampleSettings\n}\n\ninterface State {\n    value: string\n}\n\nexport class SettingInput extends React.Component<Props> {\n    public readonly state: State = {\n        value: this.props.exampleSettings[this.props.name].toString()\n    }\n\n    render() {\n        return (\n            <input\n                type=\"number\"\n                value={this.state.value}\n                onChange={this.changeHandler.bind(this)}\n            />\n        )\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const exampleSettings = this.props.exampleSettings\n        const value = event.target.value\n        exampleSettings[this.props.name] = +value\n        this.setState({\n            value: value\n        })\n    }\n}\n","import React from \"react\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\nimport {TaskSettings} from \"./TaskSettings\";\nimport {SettingInput} from \"./SettingInput\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    startNewTask: () => void\n}\n\ninterface State {\n    taskSettings: TaskSettings\n}\n\nexport class TaskConfig extends React.Component<Props> {\n    public readonly state: State = {\n        taskSettings: this.getCurrentTaskSettings()\n    }\n\n    render() {\n        const taskSettings = this.state.taskSettings;\n        const addSettings = taskSettings.addSettings\n\n        return (\n            <div>\n                <div>\n                    <StartNewTaskButton clickHandler={this.clickHandler.bind(this)}/>\n                </div>\n                <h1>Task settings</h1>\n                <div>\n                    <input\n                        type=\"number\"\n                        value={taskSettings.examplesCount}\n                        onChange={this.changeExamplesCountHandler.bind(this)}/>\n                </div>\n                <table>\n                    <thead>\n                    <tr>\n                        <th></th>\n                        <th>Minimum</th>\n                        <th>Maximum</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                        <th>Value</th>\n                        <td>\n                            <SettingInput exampleSettings={addSettings} name={'minValue'}/>\n                        </td>\n                        <td>\n                            <SettingInput exampleSettings={addSettings} name={'maxValue'}/>\n                        </td>\n                    </tr>\n                    <tr>\n                        <th>Result</th>\n                        <td>\n                            <SettingInput exampleSettings={addSettings} name={'minResult'}/>\n                        </td>\n                        <td>\n                            <SettingInput exampleSettings={addSettings} name={'maxResult'}/>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private changeExamplesCountHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const taskSettings = this.getNewTaskSettings()\n        taskSettings.examplesCount = +event.target.value\n        this.setState({\n            taskSettings: taskSettings\n        })\n    }\n\n    private getNewTaskSettings(): TaskSettings {\n        const taskSettings = this.state.taskSettings\n\n        return new TaskSettings(taskSettings.examplesCount, taskSettings.addSettings)\n    }\n\n    private clickHandler(): void {\n        this.props.taskSettingsManager.saveTaskSettings(this.state.taskSettings)\n        this.props.startNewTask()\n    }\n\n    private getCurrentTaskSettings(): TaskSettings {\n        return this.props.taskSettingsManager.getCurrentSettings()\n    }\n}\n","import {Example} from \"./Example\";\nimport React from \"react\";\nimport {TaskResult} from \"../Task/TaskResult\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {ExampleProvider} from \"./ExampleProvider\";\nimport {Task} from \"../Task/Task\";\nimport {TaskConfig} from \"../Task/TaskConfig\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\nimport {RatingGenerator} from \"../Task/RatingGenerator\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    taskProvider: TaskProvider\n    ratingGenerator:RatingGenerator\n    exampleProvider: ExampleProvider\n}\n\ninterface State {\n    example: Example\n    answer: string\n    showTaskHistory: boolean\n    showTaskConfig: boolean\n}\n\nexport class Solve extends React.Component<Props, State> {\n    public readonly state: State = {\n        example: this.getActualOrNewExample(),\n        answer: '',\n        showTaskHistory: false,\n        showTaskConfig: false,\n    }\n\n    public render() {\n        if (this.state.showTaskConfig) {\n            return <TaskConfig startNewTask={this.startNewTask.bind(this)} taskSettingsManager={this.props.taskSettingsManager}/>\n        }\n\n        const task = this.getCurrentOrNewTask()\n\n        if (this.state.showTaskHistory) {\n            return <TaskResult ratingGenerator={this.props.ratingGenerator} task={task} startNewTask={this.startNewTask.bind(this)}/>\n        }\n\n                return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Example #{task.currentExampleNumber} from {task.taskSettings.examplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Answer</button>\n                </form>\n                <div>\n                    <button onClick={this.clickHandler.bind(this)}>Change settings</button>\n                </div>\n            </div>\n        )\n    }\n\n    private startNewTask(): void {\n        this.props.taskProvider.cleanCurrentTask()\n        this.setState({\n            example: this.getActualOrNewExample(),\n            showTaskHistory: false,\n            showTaskConfig: false\n        })\n    }\n\n    private clickHandler(): void {\n        this.setState({\n            showTaskConfig: true\n        })\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (this.getCurrentOrNewTask().isSolved) {\n            this.setState({\n                showTaskHistory: true\n            })\n\n            return\n        }\n\n        this.setState({\n            example: this.getActualOrNewExample()\n        })\n    }\n\n    private getCurrentOrNewTask(): Task {\n        return this.props.taskProvider.getCurrentOrNewTask();\n    }\n\n    private getActualOrNewExample(): Example {\n        return this.props.exampleProvider.getActualOrNewExample(this.getCurrentOrNewTask())\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {ExampleValues} from \"./ExampleValues\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public static createFromValues(exampleValues: ExampleValues, operation: Operation): Example {\n        return new Example(exampleValues.first, operation, exampleValues.second)\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solution\n    }\n\n    public get solution(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\nimport {ExampleGenerator} from \"./ExampleGenerator\";\n\nexport class ExampleProvider {\n    public constructor(private readonly exampleGenerator: ExampleGenerator) {\n    }\n\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = this.exampleGenerator.generate(task)\n\n        if (null !== previousExample && !previousExample?.isSolved) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.examples.push(newExample)\n\n        return newExample\n    }\n}\n","import {Example} from \"../Example/Example\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly taskSettings: TaskSettings\n    ) {\n    }\n\n    public get currentExampleNumber(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount - this.wrongExamplesCount\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.solvedExamples.length\n    }\n\n    public get solvedExamples(): Example[] {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.taskSettings.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {Task} from \"./Task\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly taskSettingsManager: TaskSettingsManager) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.taskSettingsManager.getCurrentSettings()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","export class ExampleSettings {\n    public constructor(\n        public minValue: number,\n        public maxValue: number,\n        public minResult: number,\n        public maxResult: number,\n    ) {\n    }\n}\n","export function getValueBetween(value: number, min: number, max: number): number {\n    if (min > max) {\n        throw new DOMException(`${min} is greater than ${max}`)\n    }\n\n    if (value < min) {\n        return min\n    }\n\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n\nexport function getValueLessThan(value: number, max: number): number {\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n","import {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {TaskSettings} from \"./TaskSettings\";\nimport {getValueBetween, getValueLessThan} from \"../Example/NumberManipulator\";\n\nexport class TaskSettingsManager {\n    private readonly storageKey = 'task-settings';\n\n    public getCurrentSettings(): TaskSettings {\n        const item = localStorage.getItem(this.storageKey)\n\n        if (null === item) {\n            const exampleSettings = new ExampleSettings(1, 9, 1, 10)\n            const defaultTaskSettings = new TaskSettings(20, exampleSettings)\n\n            return defaultTaskSettings\n        }\n\n        const taskSettings = JSON.parse(item)\n\n        return taskSettings\n    }\n\n    public saveTaskSettings(taskSettings: TaskSettings): void {\n        this.normalize(taskSettings)\n        localStorage.setItem(this.storageKey, JSON.stringify(taskSettings))\n    }\n\n    private normalize(taskSettings: TaskSettings): void {\n        if (taskSettings.examplesCount < 1) {\n            taskSettings.examplesCount = 1\n        }\n\n        const addSettings = taskSettings.addSettings\n\n        addSettings.minValue = getValueLessThan(addSettings.minValue, addSettings.maxValue)\n        addSettings.minResult = getValueBetween(addSettings.minResult, addSettings.minValue * 2, addSettings.minValue + addSettings.maxValue)\n        addSettings.maxResult = getValueBetween(addSettings.maxResult, addSettings.minValue + addSettings.maxValue, addSettings.maxValue * 2)\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function randomFlag(probability: number): boolean {\n    return probability / 100 <= Math.random()\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\nimport {randomFlag} from \"../Random\";\nimport {Task} from \"../Task/Task\";\nimport {CoefficientGenerator} from \"./CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./OperationGeneratorCollection\";\n\nexport class ExampleGenerator {\n    public constructor(\n        private readonly operationGeneratorCollection: OperationGeneratorCollection,\n        private readonly coefficientGenerator: CoefficientGenerator\n    ) {\n    }\n\n    public generate(task: Task): Example {\n        const generator = this.operationGeneratorCollection.getGenerator(Operation.Add)\n        const exampleSettings = task.taskSettings.addSettings\n        let example = generator.generate(exampleSettings)\n\n        if (randomFlag(15)) {\n            return example\n        }\n\n        let maxCoefficient = 0\n\n        for (let number = 1; number <= 100; number++) {\n            const nextExample = generator.generate(exampleSettings)\n            const nextCoefficient = this.coefficientGenerator.getUniqueCoefficient(nextExample, task)\n\n            if (nextCoefficient > maxCoefficient) {\n                example = nextExample\n                maxCoefficient = nextCoefficient\n            }\n        }\n\n        return example\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\n\nexport class CoefficientGenerator {\n    public getUniqueCoefficient(example: Example, task: Task): number {\n        let uniqueCoefficient = 1\n        const solvedExamples = task.solvedExamples\n        const solvedExamplesCount = solvedExamples.length || 1\n\n        for (let solvedExample of solvedExamples) {\n            if (example.first === solvedExample.first && example.operation === solvedExample.operation && example.second === solvedExample.second) {\n                uniqueCoefficient -= 60 / 100 / solvedExamplesCount\n            }\n\n            if (example.solution === solvedExample.solution) {\n                uniqueCoefficient -= 40 / 100 / solvedExamplesCount\n            }\n        }\n\n        return uniqueCoefficient\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\n\nexport class OperationGeneratorCollection {\n    public constructor(private readonly generators: OperationGenerator[]) {\n    }\n\n    public getGenerator(operation: Operation): OperationGenerator {\nfor (let generator of this.generators){\n    if (operation===generator.operation){\n        return  generator\n    }\n}\n\n    throw new DOMException(`Generator with ${operation} does not exist`)\n    }\n}\n","export class ExampleValues {\n    public constructor(\n        public readonly first: number,\n        public readonly second: number\n    ) {\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {Example} from \"./Example\";\nimport {getValueBetween} from \"./NumberManipulator\";\n\nexport class AddGenerator implements OperationGenerator {\n    public readonly operation: Operation = Operation.Add\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        return Example.createFromValues(this.generateValues(exampleSettings), this.operation)\n    }\n\n    private generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult - first, settings.maxResult - first)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult - first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","import {Task} from \"./Task\";\n\nexport class RatingGenerator {\n    private readonly coefficients = {\n        '10': [5, 6, 8, 9],\n        '20': [14, 15, 17, 19],\n    }\n\n    public getRating(task: Task): number {\n        const coeeficients = this.getTaskCoefficients(task)\n        let rating = 0\n\n        for (rating; rating < coeeficients.length; rating++) {\n            if (task.rightExamplesCount < coeeficients[rating]) {\n                break\n            }\n        }\n\n        return rating + 1\n    }\n\n    private getTaskCoefficients(task: Task): number[] {\n        const unknownIndex = Object.keys(this.coefficients)\n            .reduce((previousExamplesCount: string, examplesCount: string): string => task.solvedExamplesCount >= +examplesCount ? examplesCount : previousExamplesCount)\n        const coefficients = this.coefficients\n        const index = unknownIndex as unknown as keyof typeof coefficients\n        const standardExamplesCount = +index\n\n        return this.coefficients[index]\n            .map((examplesCount: number): number => Math.round(examplesCount * task.solvedExamplesCount / standardExamplesCount))\n    }\n}\n","import React from 'react';\nimport {Solve} from \"./Example/Solve\";\nimport {ExampleProvider} from \"./Example/ExampleProvider\";\nimport {TaskProvider} from \"./Task/TaskProvider\";\nimport {TaskSettingsManager} from \"./Task/TaskSettingsManager\";\nimport {ExampleGenerator} from './Example/ExampleGenerator'\nimport {CoefficientGenerator} from \"./Example/CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./Example/OperationGeneratorCollection\";\nimport {AddGenerator} from \"./Example/AddGenerator\";\nimport {RatingGenerator} from \"./Task/RatingGenerator\";\n\nconst operationGeneratorCollection = new OperationGeneratorCollection([new AddGenerator()])\nconst coefficientGenerator = new CoefficientGenerator()\nconst exampleGenerator = new ExampleGenerator(operationGeneratorCollection, coefficientGenerator)\nconst exampleProvider = new ExampleProvider(exampleGenerator)\nconst taskSettingsManager = new TaskSettingsManager()\nconst taskProvider = new TaskProvider(taskSettingsManager)\nconst ratingGenerator = new RatingGenerator()\n\nexport default function App() {\n    return (\n        <Solve\n            taskProvider={taskProvider}\n            taskSettingsManager={taskSettingsManager}\n            ratingGenerator={ratingGenerator}\n            exampleProvider={exampleProvider}/>\n    )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Solve from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Solve />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}