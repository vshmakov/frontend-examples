{"version":3,"sources":["Example/Operation.ts","Task/StartNewTaskButton.tsx","Task/TaskResult.tsx","Task/SettingInput.tsx","ObjectManipulator.ts","Task/OperationSettings.tsx","Task/TaskConfig.tsx","Example/Solve.tsx","Example/Example.ts","Example/ExampleProvider.ts","Task/Task.ts","Task/TaskProvider.ts","Task/TaskSettingsManager.ts","Random.ts","Example/ExampleGenerator.ts","Example/CoefficientGenerator.ts","Example/OperationGeneratorCollection.ts","Example/ExampleValues.ts","Example/NumberManipulator.ts","Example/AddGenerator.ts","Task/RatingGenerator.ts","Example/RevertGenerator.ts","Task/TaskSettingsNormalizer.ts","Example/ProfileProvider.ts","Example/ExampleSettingsNormalizer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Operation","StartNewTaskButton","onClick","this","props","React","Component","TaskResult","task","startNewTask","solvedExamplesCount","wrongExamplesCount","ratingGenerator","getRating","showExamples","examples","number","example","push","string","answer","isSolved","SettingInput","state","value","exampleSettings","name","toString","type","onChange","changeHandler","bind","event","target","setState","getObjectKeys","object","Object","keys","isEqual","object1","object2","key","OperationSettings","isSettingsOpened","taskSettings","baseOperation","operationCheckboxes","map","renderOperationCheckbox","profiles","renderProfile","renderSettings","profile","checked","changeRadioHandler","source","copyValues","JSON","stringify","operation","operationNames","Add","Sub","Mult","Div","operations","includes","changeCheckboxHandler","enabledOperations","filter","enabledOperation","TaskConfig","examplesCount","getCurrentTaskSettings","clickHandler","changeExamplesCountHandler","addSettings","profileProvider","addProfiles","getNewTaskSettings","taskSettingsManager","saveTaskSettings","getCurrentSettings","Solve","getActualOrNewExample","showTaskHistory","showTaskConfig","getCurrentOrNewTask","onSubmit","submitHandler","currentExampleNumber","taskProvider","cleanCurrentTask","preventDefault","exampleProvider","Example","first","second","signs","solution","exampleValues","ExampleProvider","exampleGenerator","previousExample","lastExample","hasAnswer","newExample","generate","Task","length","solvedExamples","remainedExamplesCount","TaskProvider","currentTask","storageKey","TaskSettingsManager","taskSettingsNormalizer","item","localStorage","getItem","defaultAddProfile","parse","normalize","setItem","random","min","max","Math","floor","randomFlag","probability","ExampleGenerator","operationGeneratorCollection","coefficientGenerator","generator","getGenerator","getOperation","maxCoefficient","nextExample","nextCoefficient","getUniqueCoefficient","CoefficientGenerator","uniqueCoefficient","solvedExample","OperationGeneratorCollection","generators","DOMException","ExampleValues","getValueBetween","AddGenerator","createFromValues","generateValues","settings","minValue","maxValue","minSecond","minResult","maxResult","RatingGenerator","coefficients","coeeficients","getTaskCoefficients","rating","rightExamplesCount","index","reduce","previousExamplesCount","standardExamplesCount","round","RevertGenerator","originalGenerator","TaskSettingsNormalizer","exampleSettingsNormalizer","normalizeAddSettings","add10Profile","ProfileProvider","ExampleSettingsNormalizer","addGenerator","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40ddc0b5.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import React from \"react\";\n\ninterface Props {\n    onClick: () => void\n}\n\nexport class StartNewTaskButton extends React.Component<Props> {\n    render() {\n        return (\n            <button onClick={this.props.onClick}>\n                Продолжить решение\n            </button>\n        )\n    }\n}\n","import React from \"react\";\nimport {Task} from \"./Task\";\nimport {RatingGenerator} from \"./RatingGenerator\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\n\ninterface Props {\n    ratingGenerator:RatingGenerator\n    task: Task\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    render() {\n        const task = this.props.task\n\n        return (\n            <div>\n                <div>\n                    <StartNewTaskButton onClick={this.props.startNewTask}/>\n                </div>\n                <h1>Результаты задания</h1>\n                <ul>\n                    <li>Решено примеров: {task.solvedExamplesCount}</li>\n                    <li>Ошибок: {task.wrongExamplesCount}</li>\n                    <li>Оценка: {this.props.ratingGenerator.getRating(task)}</li>\n                </ul>\n                <h2>Примеры</h2>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>№</th>\n                        <th>Пример</th>\n                        <th>Ответ</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.showExamples(task)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n}\n","import React from \"react\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\n\ninterface Props {\n    exampleSettings: ExampleSettings\n    name: keyof ExampleSettings\n}\n\ninterface State {\n    value: string\n}\n\nexport class SettingInput extends React.Component<Props> {\n    public readonly state: State = {\n        value: this.props.exampleSettings[this.props.name].toString()\n    }\n\n    render() {\n        return (\n            <input\n                type=\"number\"\n                value={this.state.value}\n                onChange={this.changeHandler.bind(this)}\n            />\n        )\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const exampleSettings = this.props.exampleSettings\n        const value = event.target.value\n        exampleSettings[this.props.name] = +value\n        this.setState({\n            value: value\n        })\n    }\n}\n","export function getObjectKeys<T extends {}>(object: T): (keyof T)[] {\n    const keys = Object.keys(object)\n\n    return keys as (keyof T)[]\n}\n\nexport function isEqual<T extends {}>(object1: T, object2: T): boolean {\n    for (let key of getObjectKeys(object1)) {\n        if (object1[key] !== object2[key]) {\n            return false\n        }\n    }\n\n    return true\n}\n\nexport function copyValues<T extends {}>(target: T, source: T): void {\n    for (let key of getObjectKeys(source)) {\n        target[key] = source[key]\n    }\n}\n\n\nexport function clone<T extends {}>(object: T): T {\n    const clone = {} as T\n\n    for (let key of getObjectKeys(object)) {\n        clone[key] = object[key]\n    }\n\n    return clone\n}\n","import React from \"react\";\nimport {SettingInput} from \"./SettingInput\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {TaskSettings} from \"./TaskSettings\";\nimport {Profile} from \"../Example/Profile\";\nimport {copyValues, isEqual} from \"../ObjectManipulator\";\n\ninterface Props {\n    baseOperation: Operation.Add | Operation.Mult\n    taskSettings: TaskSettings\n    exampleSettings: ExampleSettings\n    profiles: Profile[]\n}\n\ninterface State {\n    isSettingsOpened: boolean\n    taskSettings: TaskSettings\n    exampleSettings: ExampleSettings\n}\n\nexport class OperationSettings extends React.Component<Props, State> {\n    public readonly state: State = {\n        isSettingsOpened: false,\n        taskSettings: this.props.taskSettings,\n        exampleSettings: this.props.exampleSettings,\n    }\n\n    public render() {\n        const baseOperation = this.props.baseOperation\n        const operationCheckboxes = [baseOperation, baseOperation + 1]\n            .map(this.renderOperationCheckbox.bind(this))\n\n        return (\n            <div>\n                <div>\n                    {operationCheckboxes}\n                </div>\n                <form>\n                    {this.props.profiles.map(this.renderProfile.bind(this))}\n                </form>\n                <div>\n                    <button onClick={(): void => this.setState({isSettingsOpened: !this.state.isSettingsOpened})}>\n                        {!this.state.isSettingsOpened ? \"Показать детальные настройки\" : \"Скрыть\"}\n                    </button>\n                </div>\n                {this.renderSettings(this.state.exampleSettings)}\n            </div>\n        )\n    }\n\n    private renderProfile(profile: Profile) {\n        return (\n            <label key={profile.name}>\n                <input\n                    type=\"radio\"\n                    name='profile'\n                    checked={isEqual(this.state.exampleSettings, profile.exampleSettings)}\n                    onChange={this.changeRadioHandler.bind(this, profile)}/>\n                {profile.name}\n            </label>\n        )\n    }\n\n    private changeRadioHandler(profile: Profile): void {\n        const exampleSettings = this.state.exampleSettings\n        copyValues(exampleSettings, profile.exampleSettings)\n        this.setState({\n            exampleSettings: exampleSettings\n        })\n    }\n\n    private renderSettings(exampleSettings: ExampleSettings) {\n        const key = JSON.stringify(exampleSettings)\n\n        return !this.state.isSettingsOpened ? '' : (\n            <table>\n                <thead>\n                <tr>\n                    <th></th>\n                    <th>Минимум</th>\n                    <th>Максимум</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <th>Значение</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minValue' key={key}/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxValue' key={key}/>\n                    </td>\n                </tr>\n                <tr>\n                    <th>Результат</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minResult' key={key}/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxResult' key={key}/>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        )\n    }\n\n    private renderOperationCheckbox(operation: Operation) {\n        const operationNames = {\n            [Operation.Add]: 'Сложение',\n            [Operation.Sub]: 'Вычитание',\n            [Operation.Mult]: 'Умножение',\n            [Operation.Div]: 'Деление',\n        }\n\n        return (\n            <label key={operation}>\n                <input\n                    type=\"checkbox\"\n                    checked={this.state.taskSettings.operations.includes(operation)}\n                    onChange={this.changeCheckboxHandler.bind(this, operation)}/>\n                {operationNames[operation]}\n            </label>\n        )\n    }\n\n    private changeCheckboxHandler(operation: Operation): void {\n        const taskSettings = this.state.taskSettings\n        const enabledOperations = taskSettings.operations\n            .filter((enabledOperation: Operation): boolean => enabledOperation !== operation)\n\n        if (!taskSettings.operations.includes(operation)) {\n            enabledOperations.push(operation)\n        }\n\n        taskSettings.operations = enabledOperations\n        this.setState({\n            taskSettings: taskSettings\n        })\n    }\n}\n","import React from \"react\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\nimport {TaskSettings} from \"./TaskSettings\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\nimport {OperationSettings} from \"./OperationSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    profileProvider: ProfileProvider\n    startNewTask: () => void\n}\n\ninterface State {\n    examplesCount: string\n    taskSettings: TaskSettings\n}\n\nexport class TaskConfig extends React.Component<Props, State> {\n    public readonly state: State = {\n        examplesCount: this.getCurrentTaskSettings().examplesCount.toString(),\n        taskSettings: this.getCurrentTaskSettings()\n    }\n\n    public render() {\n        const taskSettings = this.state.taskSettings;\n\n        return (\n            <div>\n                <div>\n                    <StartNewTaskButton onClick={this.clickHandler.bind(this)}/>\n                </div>\n                <h1>Настройки задания</h1>\n                Количество примеров: <div>\n                <input\n                    type=\"number\"\n                    value={this.state.examplesCount}\n                    onChange={this.changeExamplesCountHandler.bind(this)}/>\n            </div>\n                <OperationSettings\n                    baseOperation={Operation.Add}\n                    taskSettings={taskSettings}\n                    exampleSettings={taskSettings.addSettings}\n                    profiles={this.props.profileProvider.addProfiles}/>\n            </div>\n        )\n    }\n\n    private changeExamplesCountHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const taskSettings = this.getNewTaskSettings()\n        const value = event.target.value\n        taskSettings.examplesCount = +value\n        this.setState({\n            examplesCount: value,\n            taskSettings: taskSettings\n        })\n    }\n\n    private getNewTaskSettings(): TaskSettings {\n        const taskSettings = this.state.taskSettings\n\n        return {\n            examplesCount: taskSettings.examplesCount,\n            operations: taskSettings.operations,\n            addSettings: taskSettings.addSettings,\n        }\n    }\n\n    private clickHandler(): void {\n        this.props.taskSettingsManager.saveTaskSettings(this.state.taskSettings)\n        this.props.startNewTask()\n    }\n\n    private getCurrentTaskSettings(): TaskSettings {\n        return this.props.taskSettingsManager.getCurrentSettings()\n    }\n}\n","import {Example} from \"./Example\";\nimport React from \"react\";\nimport {TaskResult} from \"../Task/TaskResult\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {ExampleProvider} from \"./ExampleProvider\";\nimport {Task} from \"../Task/Task\";\nimport {TaskConfig} from \"../Task/TaskConfig\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\nimport {RatingGenerator} from \"../Task/RatingGenerator\";\nimport {ProfileProvider} from \"./ProfileProvider\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    taskProvider: TaskProvider\n    ratingGenerator:RatingGenerator\n    exampleProvider: ExampleProvider\n    profileProvider: ProfileProvider\n}\n\ninterface State {\n    example: Example\n    answer: string\n    showTaskHistory: boolean\n    showTaskConfig: boolean\n}\n\nexport class Solve extends React.Component<Props, State> {\n    public readonly state: State = {\n        example: this.getActualOrNewExample(),\n        answer: '',\n        showTaskHistory: false,\n        showTaskConfig: false,\n    }\n\n    public render() {\n        if (this.state.showTaskConfig) {\n            return <TaskConfig\n                startNewTask={this.startNewTask.bind(this)}\n                taskSettingsManager={this.props.taskSettingsManager}\n            profileProvider={this.props.profileProvider}/>\n        }\n\n        const task = this.getCurrentOrNewTask()\n\n        if (this.state.showTaskHistory) {\n            return <TaskResult ratingGenerator={this.props.ratingGenerator} task={task} startNewTask={this.startNewTask.bind(this)}/>\n        }\n\n                return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Пример №{task.currentExampleNumber} из {task.taskSettings.examplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Ответить</button>\n                </form>\n                <div>\n                    <button onClick={this.clickHandler.bind(this)}>\n                        Изменить настройки\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n    private startNewTask(): void {\n        this.props.taskProvider.cleanCurrentTask()\n        this.setState({\n            example: this.getActualOrNewExample(),\n            showTaskHistory: false,\n            showTaskConfig: false\n        })\n    }\n\n    private clickHandler(): void {\n        this.setState({\n            showTaskConfig: true\n        })\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (this.getCurrentOrNewTask().isSolved) {\n            this.setState({\n                showTaskHistory: true\n            })\n\n            return\n        }\n\n        this.setState({\n            example: this.getActualOrNewExample()\n        })\n    }\n\n    private getCurrentOrNewTask(): Task {\n        return this.props.taskProvider.getCurrentOrNewTask();\n    }\n\n    private getActualOrNewExample(): Example {\n        return this.props.exampleProvider.getActualOrNewExample(this.getCurrentOrNewTask())\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {ExampleValues} from \"./ExampleValues\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public static createFromValues(exampleValues: ExampleValues, operation: Operation): Example {\n        return new Example(exampleValues.first, operation, exampleValues.second)\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solution\n    }\n\n    public get solution(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\nimport {ExampleGenerator} from \"./ExampleGenerator\";\n\nexport class ExampleProvider {\n    public constructor(private readonly exampleGenerator: ExampleGenerator) {\n    }\n\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = this.exampleGenerator.generate(task)\n\n        if (null !== previousExample && !previousExample?.isSolved) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.examples.push(newExample)\n\n        return newExample\n    }\n}\n","import {Example} from \"../Example/Example\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly taskSettings: TaskSettings\n    ) {\n    }\n\n    public get currentExampleNumber(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount - this.wrongExamplesCount\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.solvedExamples.length\n    }\n\n    public get solvedExamples(): Example[] {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.taskSettings.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {Task} from \"./Task\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly taskSettingsManager: TaskSettingsManager) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.taskSettingsManager.getCurrentSettings()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","import {TaskSettings} from \"./TaskSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {TaskSettingsNormalizer} from \"./TaskSettingsNormalizer\";\nimport {ProfileProvider} from \"../Example/ProfileProvider\";\n\nconst storageKey = 'task-settings-v1';\n\nexport class TaskSettingsManager {\n    public constructor(\n        private readonly taskSettingsNormalizer: TaskSettingsNormalizer,\n        private readonly profileProvider: ProfileProvider\n    ) {\n    }\n\n    public getCurrentSettings(): TaskSettings {\n        const item = localStorage.getItem(storageKey)\n\n        if (null === item) {\n            return {\n                examplesCount: 10,\n                operations: [Operation.Add],\n                addSettings: this.profileProvider.defaultAddProfile.exampleSettings\n            }\n        }\n\n        const taskSettings = JSON.parse(item)\n\n        return taskSettings\n    }\n\n    public saveTaskSettings(taskSettings: TaskSettings): void {\n        this.taskSettingsNormalizer.normalize(taskSettings)\n        localStorage.setItem(storageKey, JSON.stringify(taskSettings))\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function randomFlag(probability: number): boolean {\n    return probability / 100 <= Math.random()\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\nimport {random, randomFlag} from \"../Random\";\nimport {Task} from \"../Task/Task\";\nimport {CoefficientGenerator} from \"./CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./OperationGeneratorCollection\";\n\nexport class ExampleGenerator {\n    public constructor(\n        private readonly operationGeneratorCollection: OperationGeneratorCollection,\n        private readonly coefficientGenerator: CoefficientGenerator\n    ) {\n    }\n\n    public generate(task: Task): Example {\n        const generator = this.operationGeneratorCollection.getGenerator(this.getOperation(task))\n        const exampleSettings = task.taskSettings.addSettings\n        let example = generator.generate(exampleSettings)\n\n        if (randomFlag(15)) {\n            return example\n        }\n\n        let maxCoefficient = 0\n\n        for (let number = 1; number <= 100; number++) {\n            const nextExample = generator.generate(exampleSettings)\n            const nextCoefficient = this.coefficientGenerator.getUniqueCoefficient(nextExample, task)\n\n            if (nextCoefficient > maxCoefficient) {\n                example = nextExample\n                maxCoefficient = nextCoefficient\n            }\n        }\n\n        return example\n    }\n\n    private getOperation(task: Task): Operation {\n        const operations = task.taskSettings.operations\n\n        return operations[random(0, operations.length - 1)]\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\n\nexport class CoefficientGenerator {\n    public getUniqueCoefficient(example: Example, task: Task): number {\n        let uniqueCoefficient = 1\n        const solvedExamples = task.solvedExamples\n        const solvedExamplesCount = solvedExamples.length || 1\n\n        for (let solvedExample of solvedExamples) {\n            if (example.first === solvedExample.first && example.operation === solvedExample.operation && example.second === solvedExample.second) {\n                uniqueCoefficient -= 60 / 100 / solvedExamplesCount\n            }\n\n            if (example.solution === solvedExample.solution) {\n                uniqueCoefficient -= 40 / 100 / solvedExamplesCount\n            }\n        }\n\n        return uniqueCoefficient\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\n\nexport class OperationGeneratorCollection {\n    public constructor(private readonly generators: OperationGenerator[]) {\n    }\n\n    public getGenerator(operation: Operation): OperationGenerator {\nfor (let generator of this.generators){\n    if (operation===generator.operation){\n        return  generator\n    }\n}\n\n    throw new DOMException(`Generator with ${operation} does not exist`)\n    }\n}\n","export class ExampleValues {\n    public constructor(\n        public readonly first: number,\n        public readonly second: number\n    ) {\n    }\n}\n","export function getValueBetween(value: number, min: number, max: number): number {\n    if (min > max) {\n        throw new DOMException(`${min} is greater than ${max}`)\n    }\n\n    if (value < min) {\n        return min\n    }\n\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n\nexport function getValueLessThan(value: number, max: number): number {\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {Example} from \"./Example\";\nimport {getValueBetween} from \"./NumberManipulator\";\n\nexport class AddGenerator implements OperationGenerator {\n    public readonly operation: Operation = Operation.Add\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        return Example.createFromValues(this.generateValues(exampleSettings), this.operation)\n    }\n\n    private generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult - first, settings.maxResult - first)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult - first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","import {Task} from \"./Task\";\nimport {getObjectKeys} from \"../ObjectManipulator\";\n\nexport class RatingGenerator {\n    private readonly coefficients = {\n        '10': [5, 6, 8, 9],\n        '20': [14, 15, 17, 19],\n    }\n\n    public getRating(task: Task): number {\n        const coeeficients = this.getTaskCoefficients(task)\n        let rating = 0\n\n        for (rating; rating < coeeficients.length; rating++) {\n            if (task.rightExamplesCount < coeeficients[rating]) {\n                break\n            }\n        }\n\n        return rating + 1\n    }\n\n    private getTaskCoefficients(task: Task): number[] {\n        const coefficients = this.coefficients\n        type ExamplesCount = keyof typeof coefficients\n        const index = getObjectKeys(this.coefficients)\n            .reduce((previousExamplesCount: ExamplesCount, examplesCount: ExamplesCount): ExamplesCount => task.solvedExamplesCount >= +examplesCount ? examplesCount : previousExamplesCount)\n        const standardExamplesCount = +index\n\n        return this.coefficients[index]\n            .map((examplesCount: number): number => Math.round(examplesCount * task.solvedExamplesCount / standardExamplesCount))\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {Example} from \"./Example\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class RevertGenerator implements OperationGenerator {\n    public readonly operation: Operation\n\n    public constructor(private readonly originalGenerator: OperationGenerator) {\n        const operation = originalGenerator.operation\n\n        if (![Operation.Add, Operation.Mult].includes(operation)) {\n            throw new DOMException(`You can not revert ${operation} operation example generation`)\n        }\n\n        this.operation = operation + 1\n    }\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        const example = this.originalGenerator.generate(exampleSettings)\n\n        return new Example(\n            example.solution,\n            this.operation,\n            example.second\n        )\n    }\n}\n","import {TaskSettings} from \"./TaskSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {ExampleSettingsNormalizer} from \"../Example/ExampleSettingsNormalizer\";\n\nexport class TaskSettingsNormalizer {\n    public constructor(private readonly exampleSettingsNormalizer: ExampleSettingsNormalizer) {\n    }\n\n    public normalize(taskSettings: TaskSettings): void {\n        if (taskSettings.examplesCount < 1) {\n            taskSettings.examplesCount = 10\n        }\n\n        if (0 === taskSettings.operations.length) {\n            taskSettings.operations.push(Operation.Add)\n        }\n\n        this.exampleSettingsNormalizer.normalizeAddSettings(taskSettings.addSettings)\n    }\n\n}\n","import {Profile} from \"./Profile\";\nimport {ExampleSettingsNormalizer} from \"./ExampleSettingsNormalizer\";\n\nconst add10Profile: Profile = {\n    name: 'В пределах 10',\n    exampleSettings: {\n        minValue: 1,\n        maxValue: 9,\n        minResult: 0,\n        maxResult: 0\n    }\n}\n\nconst addProfiles: Profile[] = [\n    add10Profile,\n    {\n        name: 'В пределах 20',\n        exampleSettings: {\n            minValue: 1,\n            maxValue: 19,\n            minResult: 0,\n            maxResult: 0\n        }\n    },\n    {\n        name: 'В пределах 100',\n        exampleSettings: {\n            minValue: 10,\n            maxValue: 90,\n            minResult: 0,\n            maxResult: 0\n        }\n    },\n    {\n        name: 'В пределах 10 000 (в столбик)',\n        exampleSettings: {\n            minValue: 100,\n            maxValue: 10000 - 100,\n            minResult: 0,\n            maxResult: 0\n        }\n    },\n    {\n        name: 'От -100 до 100',\n        exampleSettings: {\n            minValue: -100,\n            maxValue: 100,\n            minResult: -100,\n            maxResult: 100\n        }\n    },\n]\n\nexport class ProfileProvider {\n    public constructor(private readonly exampleSettingsNormalizer: ExampleSettingsNormalizer) {\n    }\n\n    public get defaultAddProfile(): Profile {\n        this.exampleSettingsNormalizer.normalizeAddSettings(add10Profile.exampleSettings)\n\n        return add10Profile\n    }\n\n    public get addProfiles(): Profile[] {\n        addProfiles.map((profile: Profile): void => this.exampleSettingsNormalizer.normalizeAddSettings(profile.exampleSettings))\n\n        return addProfiles\n    }\n}\n","import {getValueBetween, getValueLessThan} from \"./NumberManipulator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class ExampleSettingsNormalizer {\n    public normalizeAddSettings(exampleSettings: ExampleSettings): void {\n        exampleSettings.minValue = getValueLessThan(exampleSettings.minValue, exampleSettings.maxValue)\n        exampleSettings.minResult = getValueBetween(exampleSettings.minResult, exampleSettings.minValue * 2, exampleSettings.minValue + exampleSettings.maxValue)\n        exampleSettings.maxResult = getValueBetween(exampleSettings.maxResult, exampleSettings.minValue + exampleSettings.maxValue, exampleSettings.maxValue * 2)\n            }\n}\n","import React from 'react';\nimport {Solve} from \"./Example/Solve\";\nimport {ExampleProvider} from \"./Example/ExampleProvider\";\nimport {TaskProvider} from \"./Task/TaskProvider\";\nimport {TaskSettingsManager} from \"./Task/TaskSettingsManager\";\nimport {ExampleGenerator} from './Example/ExampleGenerator'\nimport {CoefficientGenerator} from \"./Example/CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./Example/OperationGeneratorCollection\";\nimport {AddGenerator} from \"./Example/AddGenerator\";\nimport {RatingGenerator} from \"./Task/RatingGenerator\";\nimport {RevertGenerator} from \"./Example/RevertGenerator\";\nimport {TaskSettingsNormalizer} from \"./Task/TaskSettingsNormalizer\";\nimport {ProfileProvider} from \"./Example/ProfileProvider\";\nimport {ExampleSettingsNormalizer} from \"./Example/ExampleSettingsNormalizer\";\n\nconst addGenerator = new AddGenerator()\nconst operationGeneratorCollection = new OperationGeneratorCollection([\n    addGenerator,\n    new RevertGenerator(addGenerator),\n])\nconst coefficientGenerator = new CoefficientGenerator()\nconst exampleGenerator = new ExampleGenerator(operationGeneratorCollection, coefficientGenerator)\nconst exampleProvider = new ExampleProvider(exampleGenerator)\nconst exampleSettingsNormalizer = new ExampleSettingsNormalizer()\nconst taskSettingsNormalizer = new TaskSettingsNormalizer(exampleSettingsNormalizer)\nconst profileProvider = new ProfileProvider(exampleSettingsNormalizer)\nconst taskSettingsManager = new TaskSettingsManager(taskSettingsNormalizer, profileProvider)\nconst taskProvider = new TaskProvider(taskSettingsManager)\nconst ratingGenerator = new RatingGenerator()\n\nexport default function App() {\n    return (\n        <Solve\n            taskProvider={taskProvider}\n            taskSettingsManager={taskSettingsManager}\n            ratingGenerator={ratingGenerator}\n            exampleProvider={exampleProvider}\n        profileProvider={profileProvider}/>\n    )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}