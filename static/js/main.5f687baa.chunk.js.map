{"version":3,"sources":["Example/Operation.ts","Task/StartNewTaskButton.tsx","Task/TaskResult.tsx","Task/TaskSettings.ts","Task/SettingInput.tsx","Task/OperationSettings.tsx","Task/TaskConfig.tsx","Example/Solve.tsx","Example/Example.ts","Example/ExampleProvider.ts","Task/Task.ts","Task/TaskProvider.ts","Example/ExampleSettings.ts","Example/NumberManipulator.ts","Task/TaskSettingsManager.ts","Random.ts","Example/ExampleGenerator.ts","Example/CoefficientGenerator.ts","Example/OperationGeneratorCollection.ts","Example/ExampleValues.ts","Example/AddGenerator.ts","Task/RatingGenerator.ts","Example/RevertGenerator.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Operation","StartNewTaskButton","onClick","this","props","React","Component","TaskResult","task","startNewTask","solvedExamplesCount","wrongExamplesCount","ratingGenerator","getRating","showExamples","examples","number","example","push","string","answer","isSolved","TaskSettings","examplesCount","operations","addSettings","SettingInput","state","value","exampleSettings","name","toString","type","onChange","changeHandler","bind","event","target","setState","OperationSettings","isSettingsOpened","taskSettings","baseOperation","operationCheckboxes","map","renderOperationCheckbox","renderSettings","operation","operationNames","Add","Sub","Mult","Div","checked","includes","enabledOperations","filter","enabledOperation","TaskConfig","getCurrentTaskSettings","clickHandler","changeExamplesCountHandler","getNewTaskSettings","taskSettingsManager","saveTaskSettings","getCurrentSettings","Solve","getActualOrNewExample","showTaskHistory","showTaskConfig","getCurrentOrNewTask","onSubmit","submitHandler","currentExampleNumber","taskProvider","cleanCurrentTask","preventDefault","exampleProvider","Example","first","second","signs","solution","exampleValues","ExampleProvider","exampleGenerator","previousExample","lastExample","hasAnswer","newExample","generate","Task","length","solvedExamples","remainedExamplesCount","TaskProvider","currentTask","ExampleSettings","minValue","maxValue","minResult","maxResult","getValueBetween","min","max","DOMException","storageKey","TaskSettingsManager","item","localStorage","getItem","JSON","parse","normalize","setItem","stringify","random","Math","floor","randomFlag","probability","ExampleGenerator","operationGeneratorCollection","coefficientGenerator","generator","getGenerator","getOperation","maxCoefficient","nextExample","nextCoefficient","getUniqueCoefficient","CoefficientGenerator","uniqueCoefficient","solvedExample","OperationGeneratorCollection","generators","ExampleValues","AddGenerator","createFromValues","generateValues","settings","minSecond","RatingGenerator","coefficients","coeeficients","getTaskCoefficients","rating","rightExamplesCount","unknownIndex","Object","keys","reduce","previousExamplesCount","index","standardExamplesCount","round","RevertGenerator","originalGenerator","addGenerator","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f687baa.chunk.js","sourcesContent":["export enum Operation {\n    Add = 1,\n    Sub,\n    Mult,\n    Div\n}\n","import React from \"react\";\n\ninterface Props {\n    onClick: () => void\n}\n\nexport class StartNewTaskButton extends React.Component<Props> {\n    render() {\n        return (\n            <button onClick={this.props.onClick}>Start new task</button>\n        )\n    }\n}\n","import React from \"react\";\nimport {Task} from \"./Task\";\nimport {RatingGenerator} from \"./RatingGenerator\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\n\ninterface Props {\n    ratingGenerator:RatingGenerator\n    task: Task\n    startNewTask: () => void\n}\n\nexport class TaskResult extends React.Component<Props> {\n    render() {\n        const task = this.props.task\n\n        return (\n            <div>\n                <div>\n                    <StartNewTaskButton onClick={this.props.startNewTask}/>\n                </div>\n                <h1>Task result</h1>\n                <ul>\n                    <li>Solved examples count: {task.solvedExamplesCount}</li>\n                    <li>Errors count: {task.wrongExamplesCount}</li>\n                    <li>Rating: {this.props.ratingGenerator.getRating(task)}</li>\n                </ul>\n                <h2>Examples</h2>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Example</th>\n                        <th>Answer</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.showExamples(task)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private showExamples(task: Task) {\n        const examples = []\n        let number = 1\n\n        for (let example of task.examples) {\n            examples.push(\n                <tr>\n                    <td>{number}</td>\n                    <td>{example.string}</td>\n                    <td>{example.answer}</td>\n                </tr>\n            )\n\n            if (example.isSolved) {\n                number++\n            }\n        }\n\n        return examples\n    }\n}\n","import {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {Operation} from \"../Example/Operation\";\n\nexport class TaskSettings {\n    public constructor(\n        public examplesCount: number,\n        public operations: Operation[],\n        public readonly addSettings: ExampleSettings\n    ) {\n    }\n}\n","import React from \"react\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\n\ninterface Props {\n    exampleSettings: ExampleSettings\n    name: keyof ExampleSettings\n}\n\ninterface State {\n    value: string\n}\n\nexport class SettingInput extends React.Component<Props> {\n    public readonly state: State = {\n        value: this.props.exampleSettings[this.props.name].toString()\n    }\n\n    render() {\n        return (\n            <input\n                type=\"number\"\n                value={this.state.value}\n                onChange={this.changeHandler.bind(this)}\n            />\n        )\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const exampleSettings = this.props.exampleSettings\n        const value = event.target.value\n        exampleSettings[this.props.name] = +value\n        this.setState({\n            value: value\n        })\n    }\n}\n","import React from \"react\";\nimport {SettingInput} from \"./SettingInput\";\nimport {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {Operation} from \"../Example/Operation\";\nimport {TaskSettings} from \"./TaskSettings\";\n\ninterface Props {\n    baseOperation: Operation.Add | Operation.Mult\n    taskSettings: TaskSettings\n    exampleSettings: ExampleSettings\n}\n\ninterface State {\n    isSettingsOpened: boolean\n    taskSettings: TaskSettings\n}\n\nexport class OperationSettings extends React.Component<Props, State> {\n    public readonly state: State = {\n        isSettingsOpened: false,\n        taskSettings: this.props.taskSettings\n    }\n\n    public render() {\n        const baseOperation = this.props.baseOperation\n        const operationCheckboxes = [baseOperation, baseOperation + 1]\n            .map(this.renderOperationCheckbox.bind(this))\n\n        return (\n            <div>\n                <div>\n                    {operationCheckboxes}\n                </div>\n                <div>\n                    <button onClick={(): void => this.setState({isSettingsOpened: !this.state.isSettingsOpened})}>\n                        {!this.state.isSettingsOpened ? 'Open settings' : 'Hide settings'}\n                    </button>\n                </div>\n                {this.renderSettings(this.props.exampleSettings)}\n            </div>\n        )\n    }\n\n    private renderSettings(exampleSettings: ExampleSettings) {\n        return !this.state.isSettingsOpened ? '' : (\n            <table>\n                <thead>\n                <tr>\n                    <th></th>\n                    <th>Minimum</th>\n                    <th>Maximum</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <th>Value</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minValue'/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxValue'/>\n                    </td>\n                </tr>\n                <tr>\n                    <th>Result</th>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='minResult'/>\n                    </td>\n                    <td>\n                        <SettingInput exampleSettings={exampleSettings} name='maxResult'/>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        )\n    }\n\n    private renderOperationCheckbox(operation: Operation) {\n        const operationNames = {\n            [Operation.Add]: 'Add',\n            [Operation.Sub]: 'Sub',\n            [Operation.Mult]: 'Mult',\n            [Operation.Div]: 'Div',\n        }\n\n        return (\n            <label key={operation}>\n                <input\n                    type=\"checkbox\"\n                    checked={this.state.taskSettings.operations.includes(operation)}\n                    onChange={this.changeHandler.bind(this, operation)}/>\n                {operationNames[operation]}\n            </label>\n        )\n    }\n\n    private changeHandler(operation: Operation, event: React.ChangeEvent<HTMLInputElement>): void {\n        const taskSettings = this.state.taskSettings\n        const enabledOperations = taskSettings.operations\n            .filter((enabledOperation: Operation): boolean => enabledOperation !== operation)\n\n        if (!taskSettings.operations.includes(operation)) {\n            enabledOperations.push(operation)\n        }\n\n        taskSettings.operations = enabledOperations\n        this.setState({\n            taskSettings: taskSettings\n        })\n    }\n}\n","import React from \"react\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\nimport {TaskSettings} from \"./TaskSettings\";\nimport {StartNewTaskButton} from \"./StartNewTaskButton\";\nimport {OperationSettings} from \"./OperationSettings\";\nimport {Operation} from \"../Example/Operation\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    startNewTask: () => void\n}\n\ninterface State {\n    examplesCount: string\n    taskSettings: TaskSettings\n}\n\nexport class TaskConfig extends React.Component<Props, State> {\n    public readonly state: State = {\n        examplesCount: this.getCurrentTaskSettings().examplesCount.toString(),\n        taskSettings: this.getCurrentTaskSettings()\n    }\n\n    public render() {\n        const taskSettings = this.state.taskSettings;\n\n        return (\n            <div>\n                <div>\n                    <StartNewTaskButton onClick={this.clickHandler.bind(this)}/>\n                </div>\n                <h1>Task settings</h1>\n                <div>\n                    <input\n                        type=\"number\"\n                        value={this.state.examplesCount}\n                        onChange={this.changeExamplesCountHandler.bind(this)}/>\n                </div>\n                <OperationSettings\n                    baseOperation={Operation.Add}\n                    taskSettings={taskSettings}\n                    exampleSettings={taskSettings.addSettings}/>\n            </div>\n        )\n    }\n\n    private changeExamplesCountHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        const taskSettings = this.getNewTaskSettings()\n        const value = event.target.value\n        taskSettings.examplesCount = +value\n        this.setState({\n            examplesCount: value,\n            taskSettings: taskSettings\n        })\n    }\n\n    private getNewTaskSettings(): TaskSettings {\n        const taskSettings = this.state.taskSettings\n\n        return new TaskSettings(taskSettings.examplesCount, taskSettings.operations, taskSettings.addSettings)\n    }\n\n    private clickHandler(): void {\n        this.props.taskSettingsManager.saveTaskSettings(this.state.taskSettings)\n        this.props.startNewTask()\n    }\n\n    private getCurrentTaskSettings(): TaskSettings {\n        return this.props.taskSettingsManager.getCurrentSettings()\n    }\n}\n","import {Example} from \"./Example\";\nimport React from \"react\";\nimport {TaskResult} from \"../Task/TaskResult\";\nimport {TaskProvider} from \"../Task/TaskProvider\";\nimport {ExampleProvider} from \"./ExampleProvider\";\nimport {Task} from \"../Task/Task\";\nimport {TaskConfig} from \"../Task/TaskConfig\";\nimport {TaskSettingsManager} from \"../Task/TaskSettingsManager\";\nimport {RatingGenerator} from \"../Task/RatingGenerator\";\n\ninterface Props {\n    taskSettingsManager: TaskSettingsManager\n    taskProvider: TaskProvider\n    ratingGenerator:RatingGenerator\n    exampleProvider: ExampleProvider\n}\n\ninterface State {\n    example: Example\n    answer: string\n    showTaskHistory: boolean\n    showTaskConfig: boolean\n}\n\nexport class Solve extends React.Component<Props, State> {\n    public readonly state: State = {\n        example: this.getActualOrNewExample(),\n        answer: '',\n        showTaskHistory: false,\n        showTaskConfig: false,\n    }\n\n    public render() {\n        if (this.state.showTaskConfig) {\n            return <TaskConfig startNewTask={this.startNewTask.bind(this)} taskSettingsManager={this.props.taskSettingsManager}/>\n        }\n\n        const task = this.getCurrentOrNewTask()\n\n        if (this.state.showTaskHistory) {\n            return <TaskResult ratingGenerator={this.props.ratingGenerator} task={task} startNewTask={this.startNewTask.bind(this)}/>\n        }\n\n                return (\n            <div>\n                <form onSubmit={this.submitHandler.bind(this)}>\n                    <h1>Example #{task.currentExampleNumber} from {task.taskSettings.examplesCount}</h1>\n                    <span>{this.state.example.string} = </span>\n                    <input\n                        type=\"text\"\n                        value={this.state.answer}\n                        onChange={this.changeHandler.bind(this)}/>\n                    <button type=\"submit\">Answer</button>\n                </form>\n                <div>\n                    <button onClick={this.clickHandler.bind(this)}>Change settings</button>\n                </div>\n            </div>\n        )\n    }\n\n    private startNewTask(): void {\n        this.props.taskProvider.cleanCurrentTask()\n        this.setState({\n            example: this.getActualOrNewExample(),\n            showTaskHistory: false,\n            showTaskConfig: false\n        })\n    }\n\n    private clickHandler(): void {\n        this.setState({\n            showTaskConfig: true\n        })\n    }\n\n    private changeHandler(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            answer: event.target.value\n        })\n    }\n\n    private submitHandler(event: React.FormEvent<HTMLFormElement>): void {\n        event.preventDefault()\n        const answer = this.state.answer;\n\n        if ('' === answer) {\n            return\n        }\n\n        this.setState({\n            answer: ''\n        })\n\n        const example = this.state.example;\n        example.answer = +answer\n\n        if (this.getCurrentOrNewTask().isSolved) {\n            this.setState({\n                showTaskHistory: true\n            })\n\n            return\n        }\n\n        this.setState({\n            example: this.getActualOrNewExample()\n        })\n    }\n\n    private getCurrentOrNewTask(): Task {\n        return this.props.taskProvider.getCurrentOrNewTask();\n    }\n\n    private getActualOrNewExample(): Example {\n        return this.props.exampleProvider.getActualOrNewExample(this.getCurrentOrNewTask())\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {ExampleValues} from \"./ExampleValues\";\n\nexport class Example {\n    public answer: number | null = null\n\n    public constructor(\n        public readonly first: number,\n        public readonly operation: Operation,\n        public readonly second: number,\n    ) {\n    }\n\n    public static createFromValues(exampleValues: ExampleValues, operation: Operation): Example {\n        return new Example(exampleValues.first, operation, exampleValues.second)\n    }\n\n    public get hasAnswer(): boolean {\n        return null !== this.answer\n    }\n\n    public get string(): string {\n        const signs = {\n            [Operation.Add]: '+',\n            [Operation.Sub]: '-',\n            [Operation.Mult]: '*',\n            [Operation.Div]: ':',\n        }\n\n        return `${this.first} ${signs[this.operation]} ${this.second}`\n    }\n\n    public get isSolved(): boolean {\n        return this.answer === this.solution\n    }\n\n    public get solution(): number {\n        switch (this.operation) {\n            case Operation.Add:\n                return this.first + this.second\n\n            case Operation.Sub:\n                return this.first - this.second\n\n            case Operation.Mult:\n                return this.first * this.second\n        }\n\n        return this.first / this.second\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\nimport {ExampleGenerator} from \"./ExampleGenerator\";\n\nexport class ExampleProvider {\n    public constructor(private readonly exampleGenerator: ExampleGenerator) {\n    }\n\n    public getActualOrNewExample(task: Task): Example {\n        const previousExample = task.lastExample;\n\n        if (null !== previousExample && !previousExample.hasAnswer) {\n            return previousExample\n        }\n\n        let newExample = this.exampleGenerator.generate(task)\n\n        if (null !== previousExample && !previousExample?.isSolved) {\n            newExample = new Example(\n                previousExample?.first,\n                previousExample?.operation,\n                previousExample?.second,\n            );\n        }\n\n        task.examples.push(newExample)\n\n        return newExample\n    }\n}\n","import {Example} from \"../Example/Example\";\nimport {TaskSettings} from \"./TaskSettings\";\n\nexport class Task {\n    public readonly examples: Example[] = []\n\n    public constructor(\n        public readonly taskSettings: TaskSettings\n    ) {\n    }\n\n    public get currentExampleNumber(): number {\n        return this.solvedExamplesCount + this.examples\n            .filter((example: Example): boolean => !example.hasAnswer)\n            .length\n    }\n\n    public get rightExamplesCount(): number {\n        return this.solvedExamplesCount - this.wrongExamplesCount\n    }\n\n    public get wrongExamplesCount(): number {\n        return this.examples\n            .filter((example: Example): boolean => example.hasAnswer && !example.isSolved)\n            .length\n    }\n\n    public get solvedExamplesCount(): number {\n        return this.solvedExamples.length\n    }\n\n    public get solvedExamples(): Example[] {\n        return this.examples\n            .filter((example: Example): boolean => example.isSolved)\n    }\n\n    public get remainedExamplesCount(): number {\n        return this.taskSettings.examplesCount - this.solvedExamplesCount\n    }\n\n    public get isSolved(): boolean {\n        return 0 === this.remainedExamplesCount\n    }\n\n    public get lastExample(): Example | null {\n        const length = this.examples.length\n\n        if (0 === length) {\n            return null\n        }\n\n        return this.examples[length - 1]\n    }\n}\n","import {Task} from \"./Task\";\nimport {TaskSettingsManager} from \"./TaskSettingsManager\";\n\nexport class TaskProvider {\n    private currentTask: Task | null = null\n\n    public constructor(private readonly taskSettingsManager: TaskSettingsManager) {\n    }\n\n    public getCurrentOrNewTask(): Task {\n        if (null == this.currentTask) {\n            this.currentTask = new Task(\n                this.taskSettingsManager.getCurrentSettings()\n            )\n        }\n\n        return this.currentTask\n    }\n\n    public cleanCurrentTask(): void {\n        this.currentTask = null\n    }\n}\n","export class ExampleSettings {\n    public constructor(\n        public minValue: number,\n        public maxValue: number,\n        public minResult: number,\n        public maxResult: number,\n    ) {\n    }\n}\n","export function getValueBetween(value: number, min: number, max: number): number {\n    if (min > max) {\n        throw new DOMException(`${min} is greater than ${max}`)\n    }\n\n    if (value < min) {\n        return min\n    }\n\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n\nexport function getValueLessThan(value: number, max: number): number {\n    if (value > max) {\n        return max\n    }\n\n    return value\n}\n","import {ExampleSettings} from \"../Example/ExampleSettings\";\nimport {TaskSettings} from \"./TaskSettings\";\nimport {getValueBetween, getValueLessThan} from \"../Example/NumberManipulator\";\nimport {Operation} from \"../Example/Operation\";\n\nconst storageKey = 'task-settings-v1';\n\nexport class TaskSettingsManager {\n        public getCurrentSettings(): TaskSettings {\n        const item = localStorage.getItem(storageKey)\n\n        if (null === item) {\n            const exampleSettings = new ExampleSettings(1, 9, 1, 10)\n            const defaultTaskSettings = new TaskSettings(\n                20,\n                [Operation.Add],\n                exampleSettings\n            )\n\n            return defaultTaskSettings\n        }\n\n        const taskSettings = JSON.parse(item)\n\n        return taskSettings\n    }\n\n    public saveTaskSettings(taskSettings: TaskSettings): void {\n        this.normalize(taskSettings)\n        localStorage.setItem(storageKey, JSON.stringify(taskSettings))\n    }\n\n    private normalize(taskSettings: TaskSettings): void {\n        if (taskSettings.examplesCount < 1) {\n            taskSettings.examplesCount = 10\n        }\n\n        if (0===taskSettings.operations.length){\n            taskSettings.operations.push(Operation.Add)\n        }\n\n        const addSettings = taskSettings.addSettings\n\n        addSettings.minValue = getValueLessThan(addSettings.minValue, addSettings.maxValue)\n        addSettings.minResult = getValueBetween(addSettings.minResult, addSettings.minValue * 2, addSettings.minValue + addSettings.maxValue)\n        addSettings.maxResult = getValueBetween(addSettings.maxResult, addSettings.minValue + addSettings.maxValue, addSettings.maxValue * 2)\n    }\n}\n","export function random(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function randomFlag(probability: number): boolean {\n    return probability / 100 <= Math.random()\n}\n","import {Example} from \"./Example\";\nimport {Operation} from \"./Operation\";\nimport {random, randomFlag} from \"../Random\";\nimport {Task} from \"../Task/Task\";\nimport {CoefficientGenerator} from \"./CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./OperationGeneratorCollection\";\n\nexport class ExampleGenerator {\n    public constructor(\n        private readonly operationGeneratorCollection: OperationGeneratorCollection,\n        private readonly coefficientGenerator: CoefficientGenerator\n    ) {\n    }\n\n    public generate(task: Task): Example {\n        const generator = this.operationGeneratorCollection.getGenerator(this.getOperation(task))\n        const exampleSettings = task.taskSettings.addSettings\n        let example = generator.generate(exampleSettings)\n\n        if (randomFlag(15)) {\n            return example\n        }\n\n        let maxCoefficient = 0\n\n        for (let number = 1; number <= 100; number++) {\n            const nextExample = generator.generate(exampleSettings)\n            const nextCoefficient = this.coefficientGenerator.getUniqueCoefficient(nextExample, task)\n\n            if (nextCoefficient > maxCoefficient) {\n                example = nextExample\n                maxCoefficient = nextCoefficient\n            }\n        }\n\n        return example\n    }\n\n    private getOperation(task: Task): Operation {\n        const operations = task.taskSettings.operations\n\n        return operations[random(0, operations.length - 1)]\n    }\n}\n","import {Example} from \"./Example\";\nimport {Task} from \"../Task/Task\";\n\nexport class CoefficientGenerator {\n    public getUniqueCoefficient(example: Example, task: Task): number {\n        let uniqueCoefficient = 1\n        const solvedExamples = task.solvedExamples\n        const solvedExamplesCount = solvedExamples.length || 1\n\n        for (let solvedExample of solvedExamples) {\n            if (example.first === solvedExample.first && example.operation === solvedExample.operation && example.second === solvedExample.second) {\n                uniqueCoefficient -= 60 / 100 / solvedExamplesCount\n            }\n\n            if (example.solution === solvedExample.solution) {\n                uniqueCoefficient -= 40 / 100 / solvedExamplesCount\n            }\n        }\n\n        return uniqueCoefficient\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\n\nexport class OperationGeneratorCollection {\n    public constructor(private readonly generators: OperationGenerator[]) {\n    }\n\n    public getGenerator(operation: Operation): OperationGenerator {\nfor (let generator of this.generators){\n    if (operation===generator.operation){\n        return  generator\n    }\n}\n\n    throw new DOMException(`Generator with ${operation} does not exist`)\n    }\n}\n","export class ExampleValues {\n    public constructor(\n        public readonly first: number,\n        public readonly second: number\n    ) {\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {ExampleSettings} from \"./ExampleSettings\";\nimport {ExampleValues} from \"./ExampleValues\";\nimport {random, randomFlag} from \"../Random\";\nimport {Example} from \"./Example\";\nimport {getValueBetween} from \"./NumberManipulator\";\n\nexport class AddGenerator implements OperationGenerator {\n    public readonly operation: Operation = Operation.Add\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        return Example.createFromValues(this.generateValues(exampleSettings), this.operation)\n    }\n\n    private generateValues(settings: ExampleSettings): ExampleValues {\n        const first = random(settings.minValue, settings.maxValue)\n        const minSecond = getValueBetween(settings.minValue, settings.minResult - first, settings.maxResult - first)\n        const maxSecond = getValueBetween(settings.maxValue, minSecond, settings.maxResult - first)\n        const second = random(minSecond, maxSecond)\n\n        return randomFlag(60) ? new ExampleValues(first, second) : new ExampleValues(second, first)\n    }\n}\n","import {Task} from \"./Task\";\n\nexport class RatingGenerator {\n    private readonly coefficients = {\n        '10': [5, 6, 8, 9],\n        '20': [14, 15, 17, 19],\n    }\n\n    public getRating(task: Task): number {\n        const coeeficients = this.getTaskCoefficients(task)\n        let rating = 0\n\n        for (rating; rating < coeeficients.length; rating++) {\n            if (task.rightExamplesCount < coeeficients[rating]) {\n                break\n            }\n        }\n\n        return rating + 1\n    }\n\n    private getTaskCoefficients(task: Task): number[] {\n        const unknownIndex = Object.keys(this.coefficients)\n            .reduce((previousExamplesCount: string, examplesCount: string): string => task.solvedExamplesCount >= +examplesCount ? examplesCount : previousExamplesCount)\n        const coefficients = this.coefficients\n        const index = unknownIndex as unknown as keyof typeof coefficients\n        const standardExamplesCount = +index\n\n        return this.coefficients[index]\n            .map((examplesCount: number): number => Math.round(examplesCount * task.solvedExamplesCount / standardExamplesCount))\n    }\n}\n","import {Operation} from \"./Operation\";\nimport {OperationGenerator} from \"./OperationGenerator\";\nimport {Example} from \"./Example\";\nimport {ExampleSettings} from \"./ExampleSettings\";\n\nexport class RevertGenerator implements OperationGenerator {\n    public readonly operation: Operation\n\n    public constructor(private readonly originalGenerator: OperationGenerator) {\n        const operation = originalGenerator.operation\n\n        if (![Operation.Add, Operation.Mult].includes(operation)) {\n            throw new DOMException(`You can not revert ${operation} operation example generation`)\n        }\n\n        this.operation = operation + 1\n    }\n\n    public generate(exampleSettings: ExampleSettings): Example {\n        const example = this.originalGenerator.generate(exampleSettings)\n\n        return new Example(\n            example.solution,\n            this.operation,\n            example.second\n        )\n    }\n}\n","import React from 'react';\nimport {Solve} from \"./Example/Solve\";\nimport {ExampleProvider} from \"./Example/ExampleProvider\";\nimport {TaskProvider} from \"./Task/TaskProvider\";\nimport {TaskSettingsManager} from \"./Task/TaskSettingsManager\";\nimport {ExampleGenerator} from './Example/ExampleGenerator'\nimport {CoefficientGenerator} from \"./Example/CoefficientGenerator\";\nimport {OperationGeneratorCollection} from \"./Example/OperationGeneratorCollection\";\nimport {AddGenerator} from \"./Example/AddGenerator\";\nimport {RatingGenerator} from \"./Task/RatingGenerator\";\nimport {RevertGenerator} from \"./Example/RevertGenerator\";\n\nconst addGenerator = new AddGenerator()\nconst operationGeneratorCollection = new OperationGeneratorCollection([\n    addGenerator,\n    new RevertGenerator(addGenerator),\n])\nconst coefficientGenerator = new CoefficientGenerator()\nconst exampleGenerator = new ExampleGenerator(operationGeneratorCollection, coefficientGenerator)\nconst exampleProvider = new ExampleProvider(exampleGenerator)\nconst taskSettingsManager = new TaskSettingsManager()\nconst taskProvider = new TaskProvider(taskSettingsManager)\nconst ratingGenerator = new RatingGenerator()\n\nexport default function App() {\n    return (\n        <Solve\n            taskProvider={taskProvider}\n            taskSettingsManager={taskSettingsManager}\n            ratingGenerator={ratingGenerator}\n            exampleProvider={exampleProvider}/>\n    )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Solve from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Solve />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}